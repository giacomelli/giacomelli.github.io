<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Diego Giacomelli - arc8</title>
 <link href="//tags/arc8/index.xml" rel="self"/>
 <link href="/tag/arc8.html"/>
 <updated>2022-07-09T10:29:34-03:00</updated>
 <id>/tag/arc8.html</id>
 <author>
   <name>Diego Giacomelli</name>
 </author>
 
 <entry>
   <title>ARC-8&colon; devlog &num;4 - CHIP-8 inside Unity Inspector</title>
   <link href="//arc-8-devlog-4/"/>
   <updated>2020-11-11T00:00:00-03:00</updated>
   <id>//arc-8-devlog-4</id>
   <content type="html">&lt;p&gt;Some years ago I coded a CHIP-8 emulator in C# just for fun, that emulator was hibernating in a private repository that I never released. Some days ago I started to working on it again with the idea to release it running on Blazor and as a Unity asset where any game developer could drag its prefabs as easter eggs directly to their games.&lt;/p&gt;

&lt;p&gt;In this post, I will talk about how I put a &lt;strong&gt;CHIP-8 emulator to run inside the Unity Editor Inspector Window&lt;/strong&gt;.&lt;/p&gt;

&lt;center&gt;                
        &lt;img class=&quot;screenshot&quot; src=&quot;/assets/2020/11/11/arc-8-devlog-4/arc-8-running-chip-8-emulator-inside-unity-inspector.gif &quot; alt=&quot;post image&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;To help to understand everything in this post I recommend you read the previous &lt;a href=&quot;/tags/arc8-devlog&quot;&gt;ARC-8 devlog posts&lt;/a&gt;, in special the &lt;a href=&quot;/arc-8-devlog-3&quot;&gt;last one&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;The source code is not yet published on GitHub, I will notify in this series of posts about ARC-8 devlog and on my &lt;a href=&quot;https://twitter.com/ogiacomelli&quot;&gt;Twitter&lt;/a&gt; too when this happens.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I wanted to run the graphics of the emulator inside the Unity Editor Inspector Window. Maybe, you can ask “why?”, well there is an inside joke among Unity developers where we try to play not expected things inside the inspector window, as you can see in the links below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/DJ_Link/status/1134489432130818048&quot;&gt;https://twitter.com/DJ_Link/status/1134489432130818048&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/alexanderameye/status/1006916653777596416&quot;&gt;https://twitter.com/alexanderameye/status/1006916653777596416&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/DevdogUnity/status/1007563448174219265&quot;&gt;https://twitter.com/DevdogUnity/status/1007563448174219265&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chip8loadereditorcs&quot;&gt;Chip8LoaderEditor.cs&lt;/h2&gt;
&lt;p&gt;This is a simplified version of the &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Editor.html&quot;&gt;Editor&lt;/a&gt; script for &lt;a href=&quot;/arc-8-devlog-3&quot;&gt;Chip8Loader&lt;/a&gt;.
&lt;script src=&quot;https://gist.github.com/746f415fa4571dccd52008c4dc0c2b31.js?file=Chip8LoaderEditor.cs&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h4 id=&quot;startemulator-and-stopemulator-methods&quot;&gt;StartEmulator and StopEmulator methods&lt;/h4&gt;
&lt;p&gt;In the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StartEmulator&lt;/code&gt; we start the emulation inside the Inspector Window.
After starting the emulator by calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run&lt;/code&gt; method of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chip8Loader&lt;/code&gt; passing our local &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EditorChip8Input&lt;/code&gt; to override the emulator input to always use the keyboard.
We use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EditorCoroutineUtility.StartCoroutine&lt;/code&gt; method from the &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.editorcoroutines@0.0/manual/index.html&quot;&gt;Editor Coroutines package&lt;/a&gt; to start two coroutines for update and render emulator inside the editor.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StopEmulator&lt;/code&gt; stops the emulation inside the Inspector Window using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EditorCoroutineUtility.StopCoroutine&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;updateemulator-and-renderemulator-methods&quot;&gt;UpdateEmulator and RenderEmulator methods&lt;/h4&gt;
&lt;p&gt;In the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UpdateEmulator&lt;/code&gt; we call &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/MonoBehaviour.LateUpdate.html&quot;&gt;LateUpdate&lt;/a&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chip8Loader&lt;/code&gt; to run a emulation cycle.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RenderEmulator&lt;/code&gt; calls the &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Editor.Repaint.html&quot;&gt;Repaint&lt;/a&gt; from Editor to redraw the inspector using the &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Editor.OnInspectorGUI.html&quot;&gt;OnInspectorGUI&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;oninspectorgui-method&quot;&gt;OnInspectorGUI method&lt;/h4&gt;
&lt;p&gt;When the emulation is not running this method just draws the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chip8Loader&lt;/code&gt; inspector using the &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Editor.DrawDefaultInspector.html&quot;&gt;DrawDefaultInspector&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When we click on the button &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test emulator&lt;/code&gt; on the inspector, the emulation is activated and the emulation will be rendered on the inspector.&lt;/p&gt;

&lt;p&gt;When we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUI.BeginClip&lt;/code&gt; everything that we draw using the &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/GL.html&quot;&gt;GL (Low-level graphics library)&lt;/a&gt; will be rendered inside the area passed as an argument to BeginClip. This is why we call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Graphic.Render&lt;/code&gt; between the BeginClip and EndClip.&lt;/p&gt;

&lt;p&gt;In the last step, we read the input using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input.ReadKeys&lt;/code&gt;.&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/YMz62z3xlAo &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;next-step&quot;&gt;Next step&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;In the next &lt;a href=&quot;/tags/arc8-devlog&quot;&gt;ARC-8 devlog&lt;/a&gt; post I will probably talk about the release of the ARC-8 as an open-source project.&lt;/p&gt;

&lt;p&gt;If you have any doubts about what I talk about above or any tip about the CHIP-8 emulator (or Unity) and you like to share it, please let me know in the comments section below.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.unity.com/tutorial/editor-scripting&quot;&gt;Editor Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/Manual/editor-CustomEditors.html&quot;&gt;Custom Editors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Editor.html&quot;&gt;Editor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.editorcoroutines@0.0/manual/index.html&quot;&gt;Editor Coroutines package&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/ScriptReference/MonoBehaviour.LateUpdate.html&quot;&gt;LateUpdate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Editor.Repaint.html&quot;&gt;Repaint&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Editor.OnInspectorGUI.html&quot;&gt;OnInspectorGUI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Editor.DrawDefaultInspector.html&quot;&gt;DrawDefaultInspector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ARC-8&colon; devlog &num;3 - Unity</title>
   <link href="//arc-8-devlog-3/"/>
   <updated>2020-11-04T00:00:00-03:00</updated>
   <id>//arc-8-devlog-3</id>
   <content type="html">&lt;p&gt;Some years ago I coded a CHIP-8 emulator in C# just for fun, that emulator was hibernating in a private repository that I never released. Some days ago I started to working on it again with the idea to release it running on Blazor and as a Unity asset where any game developer could drag its prefabs as easter eggs directly to their games.&lt;/p&gt;

&lt;p&gt;In this post, I will talk about &lt;strong&gt;how I implemented the graphics, sound, input, and log systems for Unity 3D&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can read the other &lt;a href=&quot;/tags/arc8-devlog&quot;&gt;ARC-8’s devlog posts&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;The source code is not yet published on GitHub, I will notify in this series of posts about ARC-8 devlog and on my &lt;a href=&quot;https://twitter.com/ogiacomelli&quot;&gt;Twitter&lt;/a&gt; too when this happens.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;If you were out of the planet in the last decade, maybe you don’t know what is &lt;a href=&quot;https://unity.com&quot;&gt;Unity&lt;/a&gt;: Unity is a cross-platform game engine developed in C++, but the games made on it are developed using .NET and C#.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unity is a cross-platform game engine developed by Unity Technologies, first announced and released in June 2005 at Apple Inc.’s Worldwide Developers Conference as a Mac OS X-exclusive game engine. As of 2018, the engine had been extended to support more than 25 platforms. The engine can be used to create three-dimensional, two-dimensional, virtual reality, and augmented reality games, as well as simulations and other experiences. The engine has been adopted by industries outside video gaming, such as film, automotive, architecture, engineering and construction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In older versions, Unity only supported a subset of .NET Framework (4.x), but nowadays it’s supporting .NET Standard 2.0.
This is why we can use our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARC-8 Core&lt;/code&gt;, mentioned in the &lt;a href=&quot;/arc-8-devlog-1&quot;&gt;first devlog&lt;/a&gt;, because it is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET Standard class library&lt;/code&gt; and can run directly on Unity.&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/jSR-pu0WqHY &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;The 3D models of the arcade cabinet and arcade room were created by my talented friend &lt;a href=&quot;https://twitter.com/giusepe/status/1324050160779956227&quot;&gt;Giusepe Casagrande&lt;/a&gt;.&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;systems-interfaces-implementations&quot;&gt;Systems interfaces implementations&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/component-128-1eb69a9dc.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/component-128-1eb69a9dc.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/component-128-1eb69a9dc.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;The system interfaces &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IGraphic&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISound&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IInput&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ILog&lt;/code&gt; will be implemented as &lt;a href=&quot;https://docs.unity3d.com/Manual/class-MonoBehaviour.html&quot;&gt;MonoBehaviour&lt;/a&gt;.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/arc-8-unity-components-186-6eee669de.webp 186w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/arc-8-unity-components-186-6eee669de.jpg 186w&quot; type=&quot;image/jpeg&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/arc-8-unity-components-186-6eee669de.jpg&quot; alt=&quot;post image&quot; width=&quot;186&quot; height=&quot;320&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;blockquote&gt;
  &lt;p&gt;The MonoBehaviour class is the base class from which every Unity script derives, by default. TPovides the framework which allows you to attach your script to a GameObject in the editor, as well as providing hooks into useful Events such as Start and Update.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;chip8graphiccs-monobehaviour-igraphic&quot;&gt;Chip8Graphic.cs MonoBehaviour (IGraphic)&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/graphic-128-fe24f0e1d.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/graphic-128-fe24f0e1d.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/graphic-128-fe24f0e1d.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;This is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IGraphic&lt;/code&gt; implementation.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-graphic-200-12d224ad6.webp 200w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-graphic-400-12d224ad6.webp 400w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-graphic-518-12d224ad6.webp 518w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-graphic-200-12d224ad6.png 200w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-graphic-400-12d224ad6.png 400w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-graphic-518-12d224ad6.png 518w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-graphic-518-12d224ad6.png&quot; alt=&quot;post image&quot; width=&quot;518&quot; height=&quot;130&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;script src=&quot;https://gist.github.com/560a0d0eda7762fc73ad0aa84f3d3ebb.js?file=Chip8Graphic.cs&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;intialize-method&quot;&gt;Intialize method&lt;/h4&gt;
&lt;p&gt;In the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Initialize&lt;/code&gt; we verify if will render to the main camera or to a specific target camera, then we set some camera configuration, create the material we will use to render the CHIP-8 graphic, get the screen size, then we initialize our &lt;a href=&quot;https://gameprogrammingpatterns.com/double-buffer.html&quot;&gt;Double Buffer&lt;/a&gt; array.&lt;/p&gt;

&lt;p&gt;In most cases, we don’t use the main camera, but instead, use a target camera that uses a &lt;a href=&quot;https://docs.unity3d.com/Manual/class-RenderTexture.html&quot;&gt;RenderTexture&lt;/a&gt;, and then we can use that texture on any surface on our game, like a TV screen or an arcade cabinet.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Render Textures are special types of Textures that are created and updated at run time. To use them, you first create a new Render Texture and designate one of your Cameras to render into it. Then you can use the Render Texture in a Material just like a regular Texture.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;draw-method&quot;&gt;Draw method&lt;/h4&gt;
&lt;p&gt;This is one of the two methods that needed to be implemented of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IGraphic&lt;/code&gt; interface. We received the array (64x32) of bytes representing the current state of CHIP-8 graphics and just update our local array variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_gfx&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;onrenderobject&quot;&gt;OnRenderObject&lt;/h4&gt;
&lt;p&gt;The method &lt;a href=&quot;https://docs.unity3d.com/2017.3/Documentation/ScriptReference/Camera.OnRenderObject.html&quot;&gt;OnRenderObject&lt;/a&gt; is called after the camera has rendered the scene.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OnRenderObject can be used to render your own objects using Graphics.DrawMeshNow or other functions. This function is similar to OnPostRender, except OnRenderObject is called on any object that has a script with the function; no matter if it’s attached to a Camera or not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;render-method&quot;&gt;Render method&lt;/h4&gt;
&lt;p&gt;The method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Render&lt;/code&gt; will be called by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnRenderObject&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;This method is used to draw the state of CHIP-8 graphics (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_gfx&lt;/code&gt; array) to the current camera using the &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/GL.html&quot;&gt;GL (Low-level graphics library)&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Use GL class to manipulate active transformation matrices, issue rendering commands similar to OpenGL’s immediate mode and do other low-level graphics tasks. GL immediate drawing functions use whatever is the “current material” set up right now (see Material.SetPass). The material controls how the rendering is done (blending, textures, etc.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We use a second array called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_buffer&lt;/code&gt; to implement a &lt;a href=&quot;https://gameprogrammingpatterns.com/double-buffer.html&quot;&gt;Double Buffer&lt;/a&gt; and reduce the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen flickering&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;A byte with value 1 should be drawn (foreground color) and a byte with value 0 should not be drawn (background color).&lt;/p&gt;
&lt;/div&gt;

&lt;h4 id=&quot;invalidate-method&quot;&gt;Invalidate method&lt;/h4&gt;
&lt;p&gt;This is the second of the two methods needed to be implemented of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IGraphic&lt;/code&gt; interface, but as we implemented a Double Buffer, this method does not need to perform any operation.&lt;/p&gt;

&lt;h4 id=&quot;setrendertexture-method&quot;&gt;SetRenderTexture method&lt;/h4&gt;
&lt;p&gt;It just set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RenderTexture&lt;/code&gt; of the current target camera.&lt;/p&gt;

&lt;h2 id=&quot;chip8soundcs-monobehaviour-isound&quot;&gt;Chip8Sound.cs MonoBehaviour (ISound)&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/sound-128-972082c3e.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/sound-128-972082c3e.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/sound-128-972082c3e.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;This is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISound&lt;/code&gt; implementation.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-sound-200-7b130dbfe.webp 200w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-sound-400-7b130dbfe.webp 400w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-sound-529-7b130dbfe.webp 529w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-sound-200-7b130dbfe.png 200w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-sound-400-7b130dbfe.png 400w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-sound-529-7b130dbfe.png 529w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-sound-529-7b130dbfe.png&quot; alt=&quot;post image&quot; width=&quot;529&quot; height=&quot;70&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;script src=&quot;https://gist.github.com/560a0d0eda7762fc73ad0aa84f3d3ebb.js?file=Chip8Sound.cs&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;awake-method&quot;&gt;Awake method&lt;/h4&gt;
&lt;p&gt;We just try to locate our &lt;a href=&quot;https://docs.unity3d.com/2019.3/Documentation/Manual/class-AudioSource.html&quot;&gt;AudioSource&lt;/a&gt; component that will be used to play the sound.&lt;/p&gt;

&lt;h4 id=&quot;play-method&quot;&gt;Play method&lt;/h4&gt;
&lt;p&gt;This is the only method we need to implement of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISound&lt;/code&gt; interface and it just calls the AudioSource’s &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/AudioSource.PlayOneShot.html&quot;&gt;PlayOneShot&lt;/a&gt; using the &lt;a href=&quot;https://docs.unity3d.com/2019.3/Documentation/Manual/class-AudioClip.html&quot;&gt;AudioClip&lt;/a&gt; defined on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_beep&lt;/code&gt; field.&lt;/p&gt;

&lt;h2 id=&quot;keyboardchip8inputcs-monobehaviour-iinput&quot;&gt;KeyboardChip8Input.cs MonoBehaviour (IInput)&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/joystick-128-82c7ade06.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/joystick-128-82c7ade06.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/joystick-128-82c7ade06.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;This is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IInput&lt;/code&gt; implementation for the keyboard.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/keyboard-chip-8-input-200-5789d9288.webp 200w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/keyboard-chip-8-input-400-5789d9288.webp 400w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/keyboard-chip-8-input-527-5789d9288.webp 527w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/keyboard-chip-8-input-200-5789d9288.png 200w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/keyboard-chip-8-input-400-5789d9288.png 400w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/keyboard-chip-8-input-527-5789d9288.png 527w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/keyboard-chip-8-input-527-5789d9288.png&quot; alt=&quot;post image&quot; width=&quot;527&quot; height=&quot;53&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;script src=&quot;https://gist.github.com/560a0d0eda7762fc73ad0aa84f3d3ebb.js?file=KeyboardChip8Input.cs&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;key-mapping&quot;&gt;Key mapping&lt;/h4&gt;
&lt;p&gt;First, we create the dictionary &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_map&lt;/code&gt; to map the real keyboard keys to CHIP-8 keypad keys.&lt;/p&gt;

&lt;h4 id=&quot;updatekeys-method&quot;&gt;UpdateKeys method&lt;/h4&gt;
&lt;p&gt;The only method we need to implement for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IInput&lt;/code&gt; interface. 
In this method, we set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; the CHIP-8’s keypad keys that were pressed by the player using the &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Input.GetKey.html&quot;&gt;Input.GetKey&lt;/a&gt; method.&lt;/p&gt;

&lt;h2 id=&quot;chip8logcs-monobehaviour-ilog&quot;&gt;Chip8Log.cs MonoBehaviour (ILog)&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/logging-128-de6e1a017.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/logging-128-de6e1a017.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/logging-128-de6e1a017.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;This is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ILog&lt;/code&gt; implementation.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-log-200-9c411a016.webp 200w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-log-400-9c411a016.webp 400w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-log-521-9c411a016.webp 521w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-log-200-9c411a016.png 200w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-log-400-9c411a016.png 400w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-log-521-9c411a016.png 521w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-log-521-9c411a016.png&quot; alt=&quot;post image&quot; width=&quot;521&quot; height=&quot;62&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;script src=&quot;https://gist.github.com/560a0d0eda7762fc73ad0aa84f3d3ebb.js?file=Chip8Log.cs&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;debug-and-error-methods&quot;&gt;Debug and Error methods&lt;/h4&gt;
&lt;p&gt;The two methods implemented for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ILog&lt;/code&gt; interface use methods available on Unity &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Debug.html&quot;&gt;Debug&lt;/a&gt; class to send log messages to the &lt;a href=&quot;https://docs.unity3d.com/Manual/Console.html&quot;&gt;console window&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;chip8loadercs&quot;&gt;Chip8Loader.cs&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/package-128-f3193c47c.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/package-128-f3193c47c.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/package-128-f3193c47c.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;This is a simplified version of the component responsible to load all systems (IGraphic, ISound, IInput, and ILog), initialize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chip8&lt;/code&gt; class emulator, and load the ROM.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-loader-200-a9c0f3f99.webp 200w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-loader-400-a9c0f3f99.webp 400w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-loader-529-a9c0f3f99.webp 529w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-loader-200-a9c0f3f99.png 200w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-loader-400-a9c0f3f99.png 400w, /assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-loader-529-a9c0f3f99.png 529w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/11/04/arc-8-devlog-3/chip-8-loader-529-a9c0f3f99.png&quot; alt=&quot;post image&quot; width=&quot;529&quot; height=&quot;191&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;script src=&quot;https://gist.github.com/560a0d0eda7762fc73ad0aa84f3d3ebb.js?file=Chip8Loader.cs&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;start-method&quot;&gt;Start method&lt;/h4&gt;
&lt;p&gt;Verifies if all the systems needed to run the emulator were configured in the editor, then &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Application-targetFrameRate.html&quot;&gt;sets the desired FPS&lt;/a&gt; and starts to run the emulator.&lt;/p&gt;

&lt;h4 id=&quot;run-and-restart-methods&quot;&gt;Run and Restart methods&lt;/h4&gt;
&lt;p&gt;These two methods have some overloads, but in the end, they will create a new instance of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arc8.Chip8&lt;/code&gt; class using the systems defined and will load the ROM.&lt;/p&gt;

&lt;h4 id=&quot;lateupdate-method&quot;&gt;LateUpdate method&lt;/h4&gt;
&lt;p&gt;We use the &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/MonoBehaviour.LateUpdate.html&quot;&gt;LateUpdate&lt;/a&gt; method from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonoBehaviour&lt;/code&gt; to run the emulator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EmulateCycle&lt;/code&gt; method.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;LateUpdate is called every frame after all Update functions have been called.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;next-step&quot;&gt;Next step&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;In the next &lt;a href=&quot;/tags/arc8-devlog&quot;&gt;ARC-8 devlog&lt;/a&gt; I will talk about how I put a &lt;a href=&quot;https://www.reddit.com/r/Unity3D/comments/ip507l/space_invaders_inside_the_unity_inspector_window/&quot;&gt;CHIP-8 emulator to run inside the Unity editor inspector window&lt;/a&gt;.&lt;/p&gt;
&lt;center&gt;                
        &lt;img class=&quot;screenshot&quot; src=&quot;/assets/2020/11/04/arc-8-devlog-3/arc-8-running-chip-8-emulator-inside-unity-inspector.gif &quot; alt=&quot;post image&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;If you have any doubts about what I talk about above or any tip about the CHIP-8 emulator (or Unity) and you like to share it, please let me know in the comments section below.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://unity.com/learn/get-started&quot;&gt;Get started with Unity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/Manual/index.html&quot;&gt;Unity User Manual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/Manual/class-MonoBehaviour.html&quot;&gt;MonoBehaviour&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com/double-buffer.html&quot;&gt;Double Buffer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/Manual/class-RenderTexture.html&quot;&gt;RenderTexture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/2017.3/Documentation/ScriptReference/Camera.OnRenderObject.html&quot;&gt;OnRenderObject&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/ScriptReference/GL.html&quot;&gt;GL (Low-level graphics library)&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/2019.3/Documentation/Manual/class-AudioSource.html&quot;&gt;AudioSource&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/2019.3/Documentation/Manual/class-AudioClip.html&quot;&gt;AudioClip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/Manual/class-InputManager.html&quot;&gt;Input Manager&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Debug.html&quot;&gt;Debug&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/Manual/Console.html&quot;&gt;Console Window&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Application-targetFrameRate.html&quot;&gt;TargetFrameRate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ARC-8&colon; devlog &num;2 - Blazor</title>
   <link href="//arc-8-devlog-2/"/>
   <updated>2020-10-29T00:00:00-03:00</updated>
   <id>//arc-8-devlog-2</id>
   <content type="html">&lt;p&gt;Some years ago I coded a CHIP-8 emulator in C# just for fun, that emulator was hibernating in a private repository that I never released. Some days ago I started to working on it again with the idea to release it running on Blazor and as a Unity asset where any game developer could drag its prefabs as easter eggs directly to their games.&lt;/p&gt;

&lt;p&gt;In this post, I will talk about &lt;strong&gt;how I implemented the graphics, sound, input, and log systems for Blazor&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can read the other &lt;a href=&quot;/tags/arc8-devlog&quot;&gt;ARC-8’s devlog posts&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;The source code is not yet published on GitHub, I will notify in this series of posts about ARC-8 devlog and on my &lt;a href=&quot;https://twitter.com/ogiacomelli&quot;&gt;Twitter&lt;/a&gt; too when this happens.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor&quot;&gt;Blazor&lt;/a&gt; is a feature of ASP.NET that extends the .NET developer platform with tools and libraries for building web apps.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Blazor can run your client-side C# code directly in the browser, using WebAssembly. Because it’s real .NET running on WebAssembly, you can re-use code and libraries from server-side parts of your application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is why we can use our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARC-8 Core&lt;/code&gt;, mentioned in the previous &lt;a href=&quot;/arc-8-devlog-1&quot;&gt;devlog&lt;/a&gt;, because it is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET Standard class library&lt;/code&gt; and can run directly on Blazor web assembly.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;For some components, like menu, inputs, and buttons I use the &lt;a href=&quot;https://blazorise.com/&quot;&gt;Blazorise library&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;online-demo&quot;&gt;Online demo&lt;/h2&gt;
&lt;p&gt;You can test and play the CHIP-8’s games directly on your browser with our online demo: &lt;a href=&quot;/apps/arc-8&quot;&gt;ARC-8 Blazor Online Demo&lt;/a&gt;.&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/9eHBdCTipZs &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;systems-interfaces-implementations&quot;&gt;Systems interfaces implementations&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/component-128-1eb69a9dc.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/component-128-1eb69a9dc.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/component-128-1eb69a9dc.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;The system interfaces &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IGraphic&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISound&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IInput&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ILog&lt;/code&gt; will be implemented as &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-3.1#:~:text=Blazor%20apps%20are%20built%20using,Components%20are%20flexible%20and%20lightweight.&quot;&gt;Blazor components&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A component is a self-contained chunk of user interface (UI), such as a page, dialog, or form. A component includes HTML markup and the processing logic required to inject data or respond to UI events. Components are flexible and lightweight. They can be nested, reused, and shared among projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/29/arc-8-devlog-2/arc-8-blazor-components-200-4b7f14cbd.webp 200w, /assets/images/generated/assets/2020/10/29/arc-8-devlog-2/arc-8-blazor-components-320-4b7f14cbd.webp 320w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/29/arc-8-devlog-2/arc-8-blazor-components-200-4b7f14cbd.jpg 200w, /assets/images/generated/assets/2020/10/29/arc-8-devlog-2/arc-8-blazor-components-320-4b7f14cbd.jpg 320w&quot; type=&quot;image/jpeg&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/29/arc-8-devlog-2/arc-8-blazor-components-320-4b7f14cbd.jpg&quot; alt=&quot;post image&quot; width=&quot;320&quot; height=&quot;246&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;chip8graphicrazor-component-igraphic&quot;&gt;Chip8Graphic.razor component (IGraphic)&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/graphic-128-fe24f0e1d.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/graphic-128-fe24f0e1d.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/graphic-128-fe24f0e1d.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;This a simplified version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IGraphic&lt;/code&gt; implementation (without of color selector that you can see in the demo).&lt;/p&gt;

&lt;h3 id=&quot;c-side&quot;&gt;C# side&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=Chip8Graphic.razor&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;js-side&quot;&gt;JS side&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=chip8-helper-graphic.js&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;onafterrenderasync-method&quot;&gt;OnAfterRenderAsync method&lt;/h4&gt;
&lt;p&gt;In the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnAfterRenderAsync&lt;/code&gt; we verify if it’s the component’s first render, then we call a JS method that will initialize a JS helper for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chip8Graphic.razor&lt;/code&gt; that will return the size of the canvas to C# code, then we use this information to scale our 64 x 32 CHIP-8’s display.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OnAfterRenderAsync and OnAfterRender are called after a component has finished rendering. Element and component references are populated at this point. Use this stage to perform additional initialization steps using the rendered content, such as activating third-party JavaScript libraries that operate on the rendered DOM elements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;draw-method&quot;&gt;Draw method&lt;/h4&gt;
&lt;p&gt;This is one of the two methods needed to be implemented of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IGraphic&lt;/code&gt; interface. We received the array (64x32) of bytes representing the current state of CHIP-8 graphics and just update our local array variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_gfx&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;renderasync-method&quot;&gt;RenderAsync method&lt;/h4&gt;
&lt;p&gt;The method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RenderAsync&lt;/code&gt; will be called by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chip8Loader&lt;/code&gt; component during the &lt;a href=&quot;https://gameprogrammingpatterns.com/game-loop.html&quot;&gt;Game Loop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This method is used to draw the state of CHIP-8 graphics (_gfx array) to the HTML page. 
We use a second array called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_buffer&lt;/code&gt; to implement a &lt;a href=&quot;https://gameprogrammingpatterns.com/double-buffer.html&quot;&gt;Double Buffer&lt;/a&gt; and reduce the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen flickering&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;A byte with value 1 should be drawn (foreground color) and a byte with value 0 should not be drawn (background color).&lt;/p&gt;
&lt;/div&gt;

&lt;h4 id=&quot;invalidate-method&quot;&gt;Invalidate method&lt;/h4&gt;
&lt;p&gt;This is the second of the two methods needed to be implemented of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IGraphic&lt;/code&gt; interface, but as we implemented a Double Buffer, this method does not need to perform any operation.&lt;/p&gt;

&lt;h4 id=&quot;resize-method&quot;&gt;Resize method&lt;/h4&gt;
&lt;p&gt;Called by the JS side every time that the user resizes the browser window.&lt;/p&gt;

&lt;h4 id=&quot;clearcanvasasync-method&quot;&gt;ClearCanvasAsync method&lt;/h4&gt;
&lt;p&gt;We use this one to invalidate our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_buffer&lt;/code&gt; and reset the canvas to the background color.&lt;/p&gt;

&lt;h2 id=&quot;chip8soundrazor-component-isound&quot;&gt;Chip8Sound.razor component (ISound)&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/sound-128-972082c3e.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/sound-128-972082c3e.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/sound-128-972082c3e.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;This a simplified version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISound&lt;/code&gt; implementation.&lt;/p&gt;

&lt;h3 id=&quot;c-side-1&quot;&gt;C# side&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=Chip8Sound.razor&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;js-side-1&quot;&gt;JS side&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=chip8-helper-sound.js&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;oninitialized-method&quot;&gt;OnInitialized method&lt;/h4&gt;
&lt;p&gt;We just use the information from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationManager&lt;/code&gt; to set the audio file we want to play.&lt;/p&gt;

&lt;h4 id=&quot;play-method&quot;&gt;Play method&lt;/h4&gt;
&lt;p&gt;This is the only method we need to implement of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISound&lt;/code&gt; interface and it just calls a JS method that will get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audio&lt;/code&gt; tag on the component, set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioSource&lt;/code&gt;, then load, and play it.&lt;/p&gt;

&lt;h2 id=&quot;chip8inputrazor-component-iinput&quot;&gt;Chip8Input.razor component (IInput)&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/joystick-128-82c7ade06.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/joystick-128-82c7ade06.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/joystick-128-82c7ade06.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;This is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IInput&lt;/code&gt; implementation.&lt;/p&gt;

&lt;h3 id=&quot;c-side-2&quot;&gt;C# side&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=Chip8Input.razor&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;js-side-2&quot;&gt;JS side&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=chip8-helper-input.js&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;key-mapping&quot;&gt;Key mapping&lt;/h4&gt;
&lt;p&gt;First we create the dictionary &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_map&lt;/code&gt; to map the real keyboard keys to CHIP-8 keypad keys.
The second dictionary we create is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_keyDown&lt;/code&gt;. It will be used to map what keys the player is pressing.&lt;/p&gt;

&lt;h4 id=&quot;onafterrenderasync-method-1&quot;&gt;OnAfterRenderAsync method&lt;/h4&gt;
&lt;p&gt;We call the JS method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chip8Input.init&lt;/code&gt; that will add two event listeners, one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keydown&lt;/code&gt; and the other for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyup&lt;/code&gt; that will call the C# methods &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HandleKeyDown&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HandleKeyUp&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;updatekeys-method&quot;&gt;UpdateKeys method&lt;/h4&gt;
&lt;p&gt;The only method we need to implement for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IInput&lt;/code&gt; interface. 
In this method, we set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; the CHIP-8’s keypad keys that were pressed by the player.&lt;/p&gt;

&lt;h4 id=&quot;handlekeydown-and-handlekeyup-methods&quot;&gt;HandleKeyDown and HandleKeyUp methods&lt;/h4&gt;
&lt;p&gt;This method is responsible to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_keyDown&lt;/code&gt; dictionary by the keyboard keys that the player pressed.&lt;/p&gt;

&lt;h2 id=&quot;chip8lograzor-component-ilog&quot;&gt;Chip8Log.razor component (ILog)&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/logging-128-de6e1a017.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/logging-128-de6e1a017.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/logging-128-de6e1a017.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;This is a simplified version of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ILog&lt;/code&gt; implementation.&lt;/p&gt;

&lt;h3 id=&quot;c-side-3&quot;&gt;C# side&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=Chip8Log.razor&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;debug-and-error-methods&quot;&gt;Debug and Error methods&lt;/h4&gt;
&lt;p&gt;The two methods implemented for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ILog&lt;/code&gt; interface use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Extensions.Logging.ILogger&amp;lt;T&amp;gt;&lt;/code&gt; to send log messages to the browser console.&lt;/p&gt;

&lt;h2 id=&quot;chip8loaderrazor&quot;&gt;Chip8Loader.razor&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/package-128-f3193c47c.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/package-128-f3193c47c.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/package-128-f3193c47c.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;This is a simplified version of the component responsible to load all systems (IGraphic, ISound, IInput, and ILog), initialize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chip8&lt;/code&gt; class emulator,  load the ROM and perform the game loop.&lt;/p&gt;

&lt;h3 id=&quot;c-side-4&quot;&gt;C# side&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=Chip8Loader.razor&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;js-side-3&quot;&gt;JS side&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=chip8-helper-loader.js&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;onafterrenderasync-method-2&quot;&gt;OnAfterRenderAsync method&lt;/h4&gt;
&lt;p&gt;Initializes the emulator with the systems, then calls the JS &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chip8Loader.init&lt;/code&gt; function that will use the browser &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame&quot;&gt;window.requestAnimationFrame&lt;/a&gt; to call the C# method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RunCycle&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser calls a specified function to update an animation before the next repaint.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;runcycle-method&quot;&gt;RunCycle method&lt;/h4&gt;
&lt;p&gt;This method is called by the JS  (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window.requestAnimationFrame&lt;/code&gt;).
We implement a &lt;a href=&quot;https://gameprogrammingpatterns.com/game-loop.html&quot;&gt;Game Loop&lt;/a&gt; and in the end, call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chip8Graphic.RenderAsync&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-step&quot;&gt;Next step&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;In the next &lt;a href=&quot;/tags/arc8-devlog&quot;&gt;ARC-8 devlog&lt;/a&gt; I will talk about the ARC-8’s implementation on Unity3D.&lt;/p&gt;

&lt;p&gt;If you have any doubts about what I talk about above or any tip about the CHIP-8 emulator (or Blazor) and you like to share it, please let me know in the comments section below.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dotnet.microsoft.com/learn/aspnet/blazor-tutorial/intro&quot;&gt;Blazor Tutorial - Build your first Blazor app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blazorise.com/docs/start/&quot;&gt;Blazorise quick-start&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-3.1#:~:text=Blazor%20apps%20are%20built%20using,Components%20are%20flexible%20and%20lightweight.&quot;&gt;Create and use ASP.NET Core Razor components&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-3.1&quot;&gt;ASP.NET Core Blazor lifecycle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/blazor/call-javascript-from-dotnet?view=aspnetcore-3.1&quot;&gt;Call JavaScript functions from .NET methods in ASP.NET Core Blazor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/blazor/fundamentals/logging?view=aspnetcore-3.1&quot;&gt;ASP.NET Core Blazor logging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com/double-buffer.html&quot;&gt;Double Buffer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com/game-loop.html&quot;&gt;Game Loop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame&quot;&gt;RequestAnimationFrame&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ARC-8&colon; devlog &num;1 - Core and code design</title>
   <link href="//arc-8-devlog-1/"/>
   <updated>2020-10-28T00:00:00-03:00</updated>
   <id>//arc-8-devlog-1</id>
   <content type="html">&lt;p&gt;Some years ago I coded a CHIP-8 emulator in C# just for fun, that emulator was hibernating in a private repository that I never released. Some days ago I started to working on it again with the idea to release it running on Blazor and as a Unity asset where any game developer could drag its prefabs as easter eggs directly to their games.&lt;/p&gt;

&lt;p&gt;In this post, I will talk about &lt;strong&gt;my premises for the ARC-8’s code design that guided me during its development&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can read the other &lt;a href=&quot;/tags/arc8-devlog&quot;&gt;ARC-8’s devlog posts&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;The source code is not yet published on GitHub, I will notify in this series of posts about ARC-8 devlog and on my &lt;a href=&quot;https://twitter.com/ogiacomelli&quot;&gt;Twitter&lt;/a&gt; too when this happens.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I always wanted to develop a video game emulator. Anybody that tried or even google about it quickly realizes that it is not an easy or simple task.
If you search a little further you will see developers talking about CHIP-8 as the best thing to emulate as your first emulator project. Why? Well, the CHIP-8 is quite a simple virtual machine that has only 35 opcodes, simple graphic, sound, and input systems too.&lt;/p&gt;

&lt;h2 id=&quot;chip-8&quot;&gt;CHIP-8&lt;/h2&gt;
&lt;p&gt;According to Wikipedia:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;CHIP-8 is an interpreted programming language, developed by Joseph Weisbecker. It was initially used on the COSMAC VIP and Telmac 1800 8-bit microcomputers in the mid-1970s. CHIP-8 programs are run on a CHIP-8 virtual machine. It was made to allow video games to be more easily programmed for these computers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to &lt;a href=&quot;http://mattmik.com/files/chip8/mastering/chip8.html&quot;&gt;Mastering CHIP-8 by Matthew Mikolay&lt;/a&gt; (one of the best technical information source about CHIP-8):&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;CHIP-8 is an interpreted minimalist programming language that was designed by Joseph Weisbecker in the 1970s for use on the RCA COSMAC VIP computer. Due to its hexadecimal format, it was best suited to machines with a scarcity of memory, as minimal text processing had to be performed by the interpreter before a program could be executed. This property inevitably led to its implementation on a variety of hobbyist computers aside from the VIP, such as the COSMAC ELF, Telmac 1800, and ETI 660.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;arc-8&quot;&gt;ARC-8&lt;/h2&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-200-42589059c.webp 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-400-42589059c.webp 400w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-600-42589059c.webp 600w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-200-42589059c.png 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-400-42589059c.png 400w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-600-42589059c.png 600w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-600-42589059c.png&quot; alt=&quot;post image&quot; width=&quot;600&quot; height=&quot;200&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;I won’t get into details about how to implement each of CHIP-8’s 35 opcodes, because there are plenty of tutorials and resources talking about this on the internet (look in the section ‘Further reading’ in the of this post). My focus here is to explain my code design decisions to allow built a CHIP-8 emulator core in .NET Standard that will allow us to develop a graphic, sound, and input systems for Blazor and Unity3D (and any other platform where C# / .NET is supported).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why the name ARC-8? well, the choice of the name was quite chaotic as any of the name ideas brainstorm that I have had with my friend &lt;a href=&quot;http://twitter.com/giusepe&quot;&gt;Giusepe Casagrande&lt;/a&gt;. The name’s meaning and the way of speaking are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arcade&lt;/code&gt; because we want to remember that old day when we are kids playing some classic games in an arcade or fliperama as we call it in Brazil.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;premises&quot;&gt;Premises&lt;/h2&gt;
&lt;p&gt;First of all, before started do develop the code, I needed to sit down and defined some premises of the ARC-8’s code design, they are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Premise 1 - Cross-platform&lt;/strong&gt;: the ARC-8 core solution should be cross-platform.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Premise 2 - Testable&lt;/strong&gt;: code must be testable.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Premise 3 - 100% code coverage&lt;/strong&gt;: Unit test code coverage for the core should be 100%.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Premise 4 - Benchmark&lt;/strong&gt;: benchmark the code to verify and compare solutions performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;premise-1---cross-platform&quot;&gt;Premise 1 - Cross-platform&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/cross-platform-128-90fb5f56b.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/cross-platform-128-90fb5f56b.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/cross-platform-128-90fb5f56b.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;To make the ARC-8 core solution cross-platform, the first decision is to implement it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET Standard class library&lt;/code&gt;. The second one is to define the graphic, sound, input, and logging systems of the emulator as interfaces that will only be implemented on specific platforms, like Blazor and Unity3d.&lt;/p&gt;

&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-systems-interfaces-200-39c2d19ce.webp 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-systems-interfaces-280-39c2d19ce.webp 280w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-systems-interfaces-200-39c2d19ce.jpg 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-systems-interfaces-280-39c2d19ce.jpg 280w&quot; type=&quot;image/jpeg&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-systems-interfaces-280-39c2d19ce.jpg&quot; alt=&quot;post image&quot; width=&quot;280&quot; height=&quot;562&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h3 id=&quot;systems-interfaces&quot;&gt;Systems interfaces&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=system-interfaces.cs&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;premise-2---testable&quot;&gt;Premise 2 - Testable&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/test-128-7afecab50.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/test-128-7afecab50.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/test-128-7afecab50.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;The main part of a CHIP-8 emulation development is on the opcodes.&lt;/p&gt;

&lt;p&gt;The common solution for many emulators is to put all opcodes inside a giant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement (some use nested switch to group some opcodes).&lt;/p&gt;

&lt;p&gt;There is no problem in this kind of solution, but besides the code readability that can easily suffer from too many cases in the switch statement, there is a problem with the idea of unit testing, because we cannot test each opcode isolated.&lt;/p&gt;

&lt;p&gt;Sure, you can still unit testing an emulator with opcodes in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement, but I decided to define an interface that an opcode needs to implement to be used on the emulator.&lt;/p&gt;

&lt;h3 id=&quot;iopcode-interface&quot;&gt;IOpcode interface&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=IOpcode.cs&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;an-iopcodes-implementation&quot;&gt;An IOpcode’s implementation&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=AnnnOpcode.cs&quot;&gt; &lt;/script&gt;

&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-opcodes-200-17d4a8cba.webp 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-opcodes-296-17d4a8cba.webp 296w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-opcodes-200-17d4a8cba.jpg 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-opcodes-296-17d4a8cba.jpg 296w&quot; type=&quot;image/jpeg&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-opcodes-296-17d4a8cba.jpg&quot; alt=&quot;post image&quot; width=&quot;296&quot; height=&quot;552&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;premise-3---100-code-coverage&quot;&gt;Premise 3 - 100% code coverage&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/score-128-702a2b758.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/score-128-702a2b758.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/score-128-702a2b758.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;With the decision of implement each opcode in a separate classes and the decision of use interfaces for each system, we can easly unit test them and achieve the 100% code coverage:
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=AnnnOpcodeTest.cs&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;To validate the code coverage I used the &lt;a href=&quot;https://github.com/coverlet-coverage/coverlet&quot;&gt;coverlet.msbuild&lt;/a&gt; and &lt;a href=&quot;https://github.com/danielpalme/ReportGenerator&quot;&gt;ReportGenerator&lt;/a&gt; Nuget packages combined with Cake’s recipe to generate a code coverage report:
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=unit-test.cake&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-200-43462216e.webp 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-400-43462216e.webp 400w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-800-43462216e.webp 800w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-1600-43462216e.webp 1600w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-200-43462216e.jpg 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-400-43462216e.jpg 400w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-800-43462216e.jpg 800w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-1600-43462216e.jpg 1600w&quot; type=&quot;image/jpeg&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-800-43462216e.jpg&quot; alt=&quot;post image&quot; width=&quot;1600&quot; height=&quot;527&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;premise-4---benchmark&quot;&gt;Premise 4 - Benchmark&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/podium-128-f9f44969b.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/podium-128-f9f44969b.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/podium-128-f9f44969b.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;I like to benchmark the code to compare some solutions in a fast and precise way. To create a benchmark in the .NET system the &lt;a href=&quot;https://benchmarkdotnet.org/&quot;&gt;BenchmarkDotNet&lt;/a&gt; is the right choice. BenchmarkDotNet is quite easy to use and you can set up a project with it in less than 5 minutes.&lt;/p&gt;

&lt;p&gt;When I used it on ARC-8 implementation I discover that I could improve the performance in 18x just removing a Linq code and using a cached solution to locate the opcodes.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-200-c0dab76d0.webp 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-400-c0dab76d0.webp 400w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-800-c0dab76d0.webp 800w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-1331-c0dab76d0.webp 1331w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-200-c0dab76d0.jpg 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-400-c0dab76d0.jpg 400w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-800-c0dab76d0.jpg 800w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-1331-c0dab76d0.jpg 1331w&quot; type=&quot;image/jpeg&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-800-c0dab76d0.jpg&quot; alt=&quot;post image&quot; width=&quot;1331&quot; height=&quot;239&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;next-step&quot;&gt;Next step&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;In the next &lt;a href=&quot;/tags/arc8-devlog&quot;&gt;ARC-8 devlog&lt;/a&gt; I will talk about the ARC-8’s implementation on Blazor.&lt;/p&gt;

&lt;p&gt;If you have any doubts about what I talk about above or any tip about the CHIP-8 emulator and you like to share it, please let me know in the comments section below.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://mattmik.com/files/chip8/mastering/chip8.html&quot;&gt;Mastering CHIP-8 by Matthew Mikolay&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JohnEarnest/Octo&quot;&gt;Octo: a high-level assembler for the CHIP-8&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mwales/chip8&quot;&gt;CHIP-8 Emulation and Disassembler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/corax89/chip8-test-rom&quot;&gt;CHIP-8 test rom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://johnearnest.github.io/chip8Archive/&quot;&gt;CHIP-8 Archive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dmatlack/chip8/tree/master/roms/games&quot;&gt;CHIP-8 roms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/coverlet-coverage/coverlet#Quick-Start&quot;&gt;Coverlet quick-start&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://benchmarkdotnet.org/articles/guides/getting-started.html&quot;&gt;BenchmarkDotNet getting started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cakebuild.net/docs/getting-started&quot;&gt;Cake getting started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
</feed>