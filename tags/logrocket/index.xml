<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Diego Giacomelli - logrocket</title>
 <link href="//tags/logrocket/index.xml" rel="self"/>
 <link href="/tag/logrocket.html"/>
 <updated>2023-11-07T09:05:44-03:00</updated>
 <id>/tag/logrocket.html</id>
 <author>
   <name>Diego Giacomelli</name>
 </author>
 
 <entry>
   <title>6 modern C# features for cleaner Unity code</title>
   <link href="//6-modern-csharp-features-for-cleaner-unity-code/"/>
   <updated>2022-11-15T00:00:00-03:00</updated>
   <id>//6-modern-csharp-features-for-cleaner-unity-code</id>
   <content type="html">&lt;p&gt;Since C# 7.0, many code improvements that help us write less code have been added to the language.&lt;/p&gt;

&lt;p&gt;This tutorial will focus on six new features that can help us write more concise and readable code and how we can use these features on our C# for Unity.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;I originally wrote this post as a guest writer for &lt;a href=&quot;https://blog.logrocket.com/6-modern-c-sharp-features-cleaner-unity-code/&quot;&gt;LogRocket’s blog&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;tutorial-sections&quot;&gt;Tutorial sections&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/requirements-128-8b68e8c6b.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/requirements-128-8b68e8c6b.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/requirements-128-8b68e8c6b.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;ul&gt;
  &lt;li&gt;Prerequisites&lt;/li&gt;
  &lt;li&gt;Setting up our Unity project&lt;/li&gt;
  &lt;li&gt;Tutorial structure&lt;/li&gt;
  &lt;li&gt;C# features support in Unity&lt;/li&gt;
  &lt;li&gt;Switch expression&lt;/li&gt;
  &lt;li&gt;Property pattern&lt;/li&gt;
  &lt;li&gt;Type pattern&lt;/li&gt;
  &lt;li&gt;Constant pattern&lt;/li&gt;
  &lt;li&gt;Relational pattern&lt;/li&gt;
  &lt;li&gt;Logical pattern&lt;/li&gt;
  &lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;The following prerequisites are required to follow along with this tutorial:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Basic knowledge of Unity&lt;/li&gt;
  &lt;li&gt;Previous experience writing C# scripts in Unity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setting-up-our-unity-project&quot;&gt;Setting up our Unity project&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/config-128-c46695ddc.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/config-128-c46695ddc.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/config-128-c46695ddc.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;First, we need to create our Unity project. For this tutorial, we’ll use the version 2021.3.4f1, which, at the moment I’m writing, is the newest LTS Unity version.&lt;/p&gt;

&lt;p&gt;On the project templates list, choose 2D(core), give it a name, and click the Create project button.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/11/15/6-modern-csharp-features-for-cleaner-unity-code/project-template-200-1cab31008.webp 200w, /assets/images/generated/assets/2022/11/15/6-modern-csharp-features-for-cleaner-unity-code/project-template-400-1cab31008.webp 400w, /assets/images/generated/assets/2022/11/15/6-modern-csharp-features-for-cleaner-unity-code/project-template-800-1cab31008.webp 800w, /assets/images/generated/assets/2022/11/15/6-modern-csharp-features-for-cleaner-unity-code/project-template-1224-1cab31008.webp 1224w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/11/15/6-modern-csharp-features-for-cleaner-unity-code/project-template-200-1cab31008.png 200w, /assets/images/generated/assets/2022/11/15/6-modern-csharp-features-for-cleaner-unity-code/project-template-400-1cab31008.png 400w, /assets/images/generated/assets/2022/11/15/6-modern-csharp-features-for-cleaner-unity-code/project-template-800-1cab31008.png 800w, /assets/images/generated/assets/2022/11/15/6-modern-csharp-features-for-cleaner-unity-code/project-template-1224-1cab31008.png 1224w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/11/15/6-modern-csharp-features-for-cleaner-unity-code/project-template-800-1cab31008.png&quot; alt=&quot;post image&quot; width=&quot;1224&quot; height=&quot;712&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
With the project started, create two folders called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scripts&lt;/code&gt; inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Assets&lt;/code&gt; folder. We’ll use them to keep our project organized during the tutorial.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/11/15/6-modern-csharp-features-for-cleaner-unity-code/folders-200-d4f7ca06e.webp 200w, /assets/images/generated/assets/2022/11/15/6-modern-csharp-features-for-cleaner-unity-code/folders-400-d4f7ca06e.webp 400w, /assets/images/generated/assets/2022/11/15/6-modern-csharp-features-for-cleaner-unity-code/folders-528-d4f7ca06e.webp 528w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/11/15/6-modern-csharp-features-for-cleaner-unity-code/folders-200-d4f7ca06e.png 200w, /assets/images/generated/assets/2022/11/15/6-modern-csharp-features-for-cleaner-unity-code/folders-400-d4f7ca06e.png 400w, /assets/images/generated/assets/2022/11/15/6-modern-csharp-features-for-cleaner-unity-code/folders-528-d4f7ca06e.png 528w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/11/15/6-modern-csharp-features-for-cleaner-unity-code/folders-528-d4f7ca06e.png&quot; alt=&quot;post image&quot; width=&quot;528&quot; height=&quot;192&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tutorial-structure&quot;&gt;Tutorial structure&lt;/h2&gt;
&lt;p&gt;For each sample of how to use the new C# feature, we will first look at how it was done before and then how we could write less and more readable code with the new feature.&lt;/p&gt;

&lt;p&gt;The classes below are just stubs that are used on all samples throughout the tutorial. You can add them to a script inside the `Scripts folder:
&lt;script src=&quot;https://gist.github.com/7c30665bc635b4950a9b949e4de7516d.js?file=base.cs&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;c-features-support-in-unity&quot;&gt;C# features support in Unity&lt;/h2&gt;
&lt;p&gt;In C# versions 8 and 9, a lot of new features were added to the language. You can read the full features list for each version in the links below:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8&quot;&gt;What’s new in C# 8.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9&quot;&gt;What’s new in C# 9.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;c-8-and-9-features-in-unity-whats-missing&quot;&gt;C# 8 and 9 features in Unity: What’s missing?&lt;/h3&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;Unity support for C# 8 has started on version &lt;a href=&quot;https://docs.unity3d.com/2020.2/Documentation/Manual/CSharpCompiler.html&quot;&gt;2020.2&lt;/a&gt; and C# 9 has started on version &lt;a href=&quot;https://docs.unity3d.com/2021.2/Documentation/Manual/CSharpCompiler.html&quot;&gt;2021.2&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be aware that not every C# 8 and 9 feature is supported by Unity, like:&lt;/li&gt;
  &lt;li&gt;default interface methods&lt;/li&gt;
  &lt;li&gt;indices and ranges&lt;/li&gt;
  &lt;li&gt;asynchronous streams&lt;/li&gt;
  &lt;li&gt;asynchronous disposable&lt;/li&gt;
  &lt;li&gt;suppress emitting locals init flag&lt;/li&gt;
  &lt;li&gt;covariant return types&lt;/li&gt;
  &lt;li&gt;module initializers&lt;/li&gt;
  &lt;li&gt;extensible calling conventions for unmanaged function pointers&lt;/li&gt;
  &lt;li&gt;init only setters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these unsupported features are used in very specific scenarios, like &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/function-pointers&quot;&gt;extensible calling conventions for unmanaged function pointers&lt;/a&gt;, and some aren’t, like &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges&quot;&gt;indices and ranges&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because of this, features like indices and ranges and init only setters will likely be supported in future versions of Unity. However, the chance of an unsupported feature for a very specific scenario gaining Unity support in the future is smaller than a feature like &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges&quot;&gt;indices and ranges&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maybe you can find some workarounds to use these unsupported features in Unity, but I discourage you from doing this because Unity is a cross-platform game engine. A workaround in a new feature could lead you to problems quite hard to understand, debug, and resolve.&lt;/p&gt;

&lt;p&gt;Fortunately, Unity supports some of the more common patterns and expressions from C# 8 and 9. Let’s review some of the most helpful ones below and see how they can enable us to write cleaner code.&lt;/p&gt;

&lt;h2 id=&quot;switch-expression&quot;&gt;Switch expression&lt;/h2&gt;
&lt;p&gt;The switch expression can dramatically simplify and reduce the LOC (Lines Of Code) to make a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt;, because we can avoid a bunch of boilerplate code, like the case and return statements.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#switch-expressions&quot;&gt;Doc tip&lt;/a&gt;: the switch expression provides for switch-like semantics in an expression context. It provides a concise syntax when the switch arms produce a value.&lt;/p&gt;

  &lt;p&gt;Often, a switch statement produces a value in each of its case blocks. Switch expressions enable you to use more concise expression syntax. There are fewer repetitive case and break keywords and fewer curly braces.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;before&quot;&gt;Before&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/7c30665bc635b4950a9b949e4de7516d.js?file=switch-expression-before.cs&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;after&quot;&gt;After&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/7c30665bc635b4950a9b949e4de7516d.js?file=switch-expression-after.cs&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;property-pattern&quot;&gt;Property pattern&lt;/h2&gt;
&lt;p&gt;The property pattern enables you to match on properties of the object examined in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; expression.&lt;/p&gt;

&lt;p&gt;As you can see in the sample below, using a property pattern, we can transform a series of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statements into a simple list of properties that the object on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement should match.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_ =&amp;gt;&lt;/code&gt; has the same meaning as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; on a classic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#property-patterns&quot;&gt;Doc tip&lt;/a&gt;: a property pattern matches an expression when an expression result is non-null and every nested pattern matches the corresponding property or field of the expression result.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;before-1&quot;&gt;Before&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/7c30665bc635b4950a9b949e4de7516d.js?file=property-pattern-before.cs&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;after-1&quot;&gt;After&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/7c30665bc635b4950a9b949e4de7516d.js?file=property-pattern-after.cs&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;type-pattern&quot;&gt;Type pattern&lt;/h2&gt;
&lt;p&gt;We can use type patterns to check if the runtime type of an expression is compatible with a given type.&lt;/p&gt;

&lt;p&gt;The type pattern is almost the same logic as a property pattern but is now used in a context of an object type. We can transform a series of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statements that check an object type into a list of types that the object on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement should match.&lt;/p&gt;

&lt;h3 id=&quot;before-2&quot;&gt;Before&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/7c30665bc635b4950a9b949e4de7516d.js?file=type-pattern-before.cs&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;after-2&quot;&gt;After&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/7c30665bc635b4950a9b949e4de7516d.js?file=type-pattern-after.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Using the type pattern, we go from 16 lines of code to only 8 that have the same result and are quite clear to read and understand.&lt;/p&gt;

&lt;h2 id=&quot;constant-pattern&quot;&gt;Constant pattern&lt;/h2&gt;
&lt;p&gt;A constant pattern can be used to test if an expression result equals a specified constant.&lt;/p&gt;

&lt;p&gt;Probably the simplest pattern match, it just matches a constant value (for instance, a string) and then returns the result.&lt;/p&gt;

&lt;h3 id=&quot;before-3&quot;&gt;Before&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/7c30665bc635b4950a9b949e4de7516d.js?file=constant-pattern-before.cs&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;after-3&quot;&gt;After&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/7c30665bc635b4950a9b949e4de7516d.js?file=constant-pattern-after.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;A constant pattern can be used with any constant expression, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int, float, char, string, bool, and enum&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;relational-pattern&quot;&gt;Relational pattern&lt;/h2&gt;
&lt;p&gt;A relational pattern will compare an expression result with a constant.&lt;/p&gt;

&lt;p&gt;This one could seem the most complex pattern match, but at its core it’s not that complicated. What we can do with a Relational Pattern is directly use logical operators as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;, &amp;gt;, &amp;lt;=, or &amp;gt;=&lt;/code&gt; to evaluate the object and then provide a result for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/patterns#relational-patterns&quot;&gt;Doc tip&lt;/a&gt;: the right-hand part of a relational pattern must be a constant expression.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;before-4&quot;&gt;Before&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/7c30665bc635b4950a9b949e4de7516d.js?file=relational-pattern-before.cs&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;after-4&quot;&gt;After&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/7c30665bc635b4950a9b949e4de7516d.js?file=relational-pattern-after.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Any of the relational operators &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;, &amp;gt;, &amp;lt;=, or &amp;gt;=&lt;/code&gt; can be used on a relational pattern.&lt;/p&gt;

&lt;h2 id=&quot;logical-pattern&quot;&gt;Logical pattern&lt;/h2&gt;
&lt;p&gt;We can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;not&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;and&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;or&lt;/code&gt; pattern combinators to create logical expressions.&lt;/p&gt;

&lt;p&gt;This is like an extension of the relational pattern where you can combine the logical operators not, and, and or to create a more complex and elaborate pattern match.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/patterns#logical-patterns&quot;&gt;Doc tip&lt;/a&gt;: you use the not, and, and or pattern combinators to create the following logical patterns:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Negation not pattern that matches an expression when the negated pattern doesn’t match the expression&lt;/li&gt;
    &lt;li&gt;Conjunctive and pattern that matches an expression when both patterns match the expression&lt;/li&gt;
    &lt;li&gt;Disjunctive or pattern that matches an expression when either pattern matches the expression&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;before-5&quot;&gt;Before&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/7c30665bc635b4950a9b949e4de7516d.js?file=logical-pattern-before.cs&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;after-5&quot;&gt;After&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/7c30665bc635b4950a9b949e4de7516d.js?file=logical-pattern-after.cs&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/challenge-128-2cdd65c40.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/challenge-128-2cdd65c40.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/challenge-128-2cdd65c40.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;In this tutorial, we’ve learned how to use the switch expression, property pattern, type pattern, constant pattern, relational pattern, and logical pattern to write less and more modern C# code on Unity.&lt;/p&gt;

&lt;p&gt;Hopefully, you can use some of these in your next project to spare yourself time while writing cleaner code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Fundamentals of Unity 2D colliders</title>
   <link href="//the-fundamentals-of-unity-2d-colliders/"/>
   <updated>2022-07-22T00:00:00-03:00</updated>
   <id>//the-fundamentals-of-unity-2d-colliders</id>
   <content type="html">&lt;p&gt;In the first years of Unity, there wasn’t solid support for 2D game development inside the engine — for years, the right way to refer to it was “Unity 3D”. Though it was possible to develop 2D games with Unity, without official engine support, it wasn’t a smooth process like it is nowadays.&lt;/p&gt;

&lt;p&gt;Around 2013, Unity started to support 2D game development with built-in components, like a 2D physics engine, Collider2D, Rigidbody2D, Vector2, Sprite, Tilemap, etc.&lt;/p&gt;

&lt;p&gt;In this post, we’ll cover the common properties and behaviors of 2D colliders, which messages are sent to their GameObjects, how we can use them in our scripts, and how each collider setup interacts with others.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;I originally wrote this post as a guest writer for &lt;a href=&quot;https://blog.logrocket.com/fundamentals-unity-2d-colliders/&quot;&gt;LogRocket’s blog&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;tutorial-sections&quot;&gt;Tutorial sections&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/manifest-128-579a71043.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/manifest-128-579a71043.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/manifest-128-579a71043.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;ul&gt;
  &lt;li&gt;Setting up our Unity project&lt;/li&gt;
  &lt;li&gt;What are colliders?&lt;/li&gt;
  &lt;li&gt;Common properties and behaviors of colliders&lt;/li&gt;
  &lt;li&gt;Adding a 2D collider to a GameObject&lt;/li&gt;
  &lt;li&gt;What is a Rigidbody2D component?&lt;/li&gt;
  &lt;li&gt;Using PhysicsMaterial2D to add effects&lt;/li&gt;
  &lt;li&gt;Collision callbacks&lt;/li&gt;
  &lt;li&gt;Using collision callbacks on scripts
    &lt;ul&gt;
      &lt;li&gt;Without a trigger&lt;/li&gt;
      &lt;li&gt;With a trigger&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Collider interactions
    &lt;ul&gt;
      &lt;li&gt;How do these setups affect collider interactions?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Physics2D settings&lt;/li&gt;
  &lt;li&gt;Source code and samples&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;The following prerequisites are required to follow along with this tutorial:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Basic knowledge of Unity&lt;/li&gt;
  &lt;li&gt;Previous experience writing C# scripts in Unity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setting-up-our-unity-project&quot;&gt;Setting up our Unity project&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/config-128-c46695ddc.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/config-128-c46695ddc.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/config-128-c46695ddc.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;First, we need to create our Unity project. For this tutorial, we’ll use the version 2021.3.4f1, which, at the moment I’m writing, is the newest LTS Unity version.&lt;/p&gt;

&lt;p&gt;On the project templates list, choose 2D(core), give it a name, and click the Create project button. We’ll call ours &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SampleScene&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/project-template-200-1cab31008.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/project-template-400-1cab31008.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/project-template-800-1cab31008.webp 800w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/project-template-1224-1cab31008.webp 1224w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/project-template-200-1cab31008.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/project-template-400-1cab31008.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/project-template-800-1cab31008.png 800w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/project-template-1224-1cab31008.png 1224w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/project-template-800-1cab31008.png&quot; alt=&quot;post image&quot; width=&quot;1224&quot; height=&quot;712&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
With the project started, create two folders called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scripts&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Physic Materials&lt;/code&gt; inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Assets&lt;/code&gt; folder. We’ll use them to keep our project organized during the tutorial.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/folders-200-d4f7ca06e.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/folders-400-d4f7ca06e.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/folders-528-d4f7ca06e.webp 528w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/folders-200-d4f7ca06e.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/folders-400-d4f7ca06e.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/folders-528-d4f7ca06e.png 528w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/folders-528-d4f7ca06e.png&quot; alt=&quot;post image&quot; width=&quot;528&quot; height=&quot;192&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-are-colliders&quot;&gt;What are colliders?&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;Before we start using our Unity project, we need to take a little dive into the basic concepts of colliders.&lt;/p&gt;

&lt;p&gt;Colliders are the way that Unity (and most of the available game engines, if not all) manages collisions between GameObjects. For the sake of this tutorial, we are only using the 2D colliders, but a lot of the rules mentioned below are applicable to 3D colliders, too.&lt;/p&gt;

&lt;p&gt;In Unity, a 2D collider is a component that allows us to define a shape, where we want to receive notifications in our GameObject’s script whenever another GameObject (with another collider) collides with the first collider.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.unity3d.com/Manual/Collider2D.html&quot;&gt;Unity doc tip&lt;/a&gt;: A collider is invisible, and does not need to be the exact same shape as the GameObject’s mesh. A rough approximation of the mesh is often more efficient and indistinguishable in gameplay.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Right now, Unity has eight built-in kinds of 2D colliders:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BoxCollider2D&lt;/li&gt;
  &lt;li&gt;CapsuleCollider2D&lt;/li&gt;
  &lt;li&gt;CircleCollider2D&lt;/li&gt;
  &lt;li&gt;CompositeCollider2D&lt;/li&gt;
  &lt;li&gt;CustomCollider2D&lt;/li&gt;
  &lt;li&gt;EdgeCollider2D&lt;/li&gt;
  &lt;li&gt;PolygonCollider2D&lt;/li&gt;
  &lt;li&gt;TilemapCollider2D&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/colliders-types-200-c2a46322b.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/colliders-types-250-c2a46322b.webp 250w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/colliders-types-200-c2a46322b.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/colliders-types-250-c2a46322b.png 250w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/colliders-types-250-c2a46322b.png&quot; alt=&quot;post image&quot; width=&quot;250&quot; height=&quot;355&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;common-properties-and-behaviors-of-colliders&quot;&gt;Common properties and behaviors of colliders&lt;/h2&gt;
&lt;p&gt;Every 2D collider in Unity inherits from a common class called Collider2D. As a result, they share common properties. Below is a list of the most notable and widely-used ones:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/common-properties-200-5deeeeb3e.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/common-properties-400-5deeeeb3e.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/common-properties-448-5deeeeb3e.webp 448w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/common-properties-200-5deeeeb3e.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/common-properties-400-5deeeeb3e.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/common-properties-448-5deeeeb3e.png 448w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/common-properties-448-5deeeeb3e.png&quot; alt=&quot;post image&quot; width=&quot;448&quot; height=&quot;120&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shape (Edit collider) — Each kind of 2D collider has a different shape, but most of them allow us to change some properties of their shapes, like the scale and distance of vertices&lt;/li&gt;
  &lt;li&gt;Material — Defines the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PhysicsMaterial2D&lt;/code&gt; that can be used by the collider to define things like friction and bounciness&lt;/li&gt;
  &lt;li&gt;isTrigger — If it’s checked, the collider will behave as a trigger. When a collider is not marked as a trigger, the physics engine will generate a collision; when the collider hits another collider, it produces the expected behaviors based on the colliders’ setups, like moving them to opposite directions or stopping them. However, when a collider is marked as a trigger, the physics engine will simply detect when it enters the space of another and no collision will be created&lt;/li&gt;
  &lt;li&gt;Used by Effector — Determines whether the collider will be used by an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Effector2D&lt;/code&gt; attached to the GameObject.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.unity3d.com/Manual/Effectors2D.html&quot;&gt;Unity doc tip&lt;/a&gt;: Effector2D components are used to direct the forces when colliders come into contact with each other&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Offset — As the collider will be attached to a GameObject, we can use this property to define an offset position relative to the GameObject&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;adding-a-2d-collider-to-a-gameobject&quot;&gt;Adding a 2D collider to a GameObject&lt;/h2&gt;
&lt;p&gt;In our Unity project, add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sprite (Square)&lt;/code&gt; to the opened scene (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SampleScene&lt;/code&gt;):&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/create-square-200-d7e90927c.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/create-square-400-d7e90927c.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/create-square-800-d7e90927c.webp 800w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/create-square-819-d7e90927c.webp 819w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/create-square-200-d7e90927c.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/create-square-400-d7e90927c.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/create-square-800-d7e90927c.png 800w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/create-square-819-d7e90927c.png 819w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/create-square-800-d7e90927c.png&quot; alt=&quot;post image&quot; width=&quot;819&quot; height=&quot;713&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sprite (Square)&lt;/code&gt; GameObject and add a component called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BoxCollider2D&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/square-200-5afeb90e2.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/square-400-5afeb90e2.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/square-455-5afeb90e2.webp 455w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/square-200-5afeb90e2.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/square-400-5afeb90e2.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/square-455-5afeb90e2.png 455w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/square-455-5afeb90e2.png&quot; alt=&quot;post image&quot; width=&quot;455&quot; height=&quot;708&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now repeat the process, but add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sprite (Circle)&lt;/code&gt; to the scene and add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CircleCollider2D&lt;/code&gt; component to it.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/circle-200-f11e563fd.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/circle-400-f11e563fd.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/circle-461-f11e563fd.webp 461w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/circle-200-f11e563fd.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/circle-400-f11e563fd.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/circle-461-f11e563fd.png 461w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/circle-461-f11e563fd.png&quot; alt=&quot;post image&quot; width=&quot;461&quot; height=&quot;643&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle GameObject&lt;/code&gt; a little on top of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Square GameObject&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/move-circle-200-2e37f4265.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/move-circle-400-2e37f4265.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/move-circle-708-2e37f4265.webp 708w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/move-circle-200-2e37f4265.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/move-circle-400-2e37f4265.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/move-circle-708-2e37f4265.png 708w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/move-circle-708-2e37f4265.png&quot; alt=&quot;post image&quot; width=&quot;708&quot; height=&quot;556&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If we hit the Play button now, nothing will happen, even if we move the GameObjects inside the editor. No collision will happen.&lt;/p&gt;
&lt;center&gt;                
        &lt;img class=&quot;screenshot&quot; src=&quot;/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/moving-circle.gif &quot; alt=&quot;post image&quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Why does nothing happen? Well, we need to talk about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rigidbody2D&lt;/code&gt; component.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-rigidbody2d-component&quot;&gt;What is a Rigidbody2D component?&lt;/h2&gt;
&lt;p&gt;A Rigidbody2D is a component used to tell Unity that it should put the GameObject under the control of the physics engine. In other words, GameObjects without a rigidbody do not exist for the physics engine.&lt;/p&gt;

&lt;p&gt;If we just add a 2D collider to our GameObject, nothing will happen because the physics engine is not aware of it. If we want the physics engine to control our GameObject, we need to add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rigidbody2D&lt;/code&gt; component to it.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/rigidbody2d-200-0007b5a10.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/rigidbody2d-400-0007b5a10.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/rigidbody2d-454-0007b5a10.webp 454w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/rigidbody2d-200-0007b5a10.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/rigidbody2d-400-0007b5a10.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/rigidbody2d-454-0007b5a10.png 454w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/rigidbody2d-454-0007b5a10.png&quot; alt=&quot;post image&quot; width=&quot;454&quot; height=&quot;312&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This means that now our GameObject is affected by gravity via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gravity Scale&lt;/code&gt; property, and can be controlled from scripts using forces.&lt;/p&gt;

&lt;p&gt;We Just need to add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rigidbody2D&lt;/code&gt; to each of the GameObjects that we’ve already created and hit the Play button:&lt;/p&gt;
&lt;center&gt;                
        &lt;img class=&quot;screenshot&quot; src=&quot;/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/ball-gravity.gif &quot; alt=&quot;post image&quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;With the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rigidbody2D&lt;/code&gt; components added to our GameObjects, the physics engine is aware of them and has started making the gravity act.&lt;/p&gt;

&lt;h2 id=&quot;using-physicsmaterial2d-to-add-effects&quot;&gt;Using PhysicsMaterial2D to add effects&lt;/h2&gt;
&lt;p&gt;In our sample, the two GameObjects are just falling, but what if we would like to have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Square GameObject&lt;/code&gt; stay in its position and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle GameObject&lt;/code&gt; hit it, before bouncing like a ball?&lt;/p&gt;

&lt;p&gt;An easy way to achieve this is using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PhysicsMaterial2D&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s add that ball effect to our sample scene. First, on the Square GameObject, change the property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Body Type&lt;/code&gt; of its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rigidbody2D&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Static&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/rigidbody2d-static-200-afa8cf714.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/rigidbody2d-static-381-afa8cf714.webp 381w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/rigidbody2d-static-200-afa8cf714.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/rigidbody2d-static-381-afa8cf714.png 381w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/rigidbody2d-static-381-afa8cf714.png&quot; alt=&quot;post image&quot; width=&quot;381&quot; height=&quot;93&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PhysicsMaterial2D&lt;/code&gt;, name it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ball physics material&lt;/code&gt;, and place it inside our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Physics Materials&lt;/code&gt; folder:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/create-physics-material-200-2fdd777ce.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/create-physics-material-400-2fdd777ce.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/create-physics-material-746-2fdd777ce.webp 746w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/create-physics-material-200-2fdd777ce.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/create-physics-material-400-2fdd777ce.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/create-physics-material-746-2fdd777ce.png 746w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/create-physics-material-746-2fdd777ce.png&quot; alt=&quot;post image&quot; width=&quot;746&quot; height=&quot;450&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Change its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bounciness&lt;/code&gt; property to 1:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/ball-physics-200-1d09b8bdc.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/ball-physics-381-1d09b8bdc.webp 381w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/ball-physics-200-1d09b8bdc.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/ball-physics-381-1d09b8bdc.png 381w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/ball-physics-381-1d09b8bdc.png&quot; alt=&quot;post image&quot; width=&quot;381&quot; height=&quot;121&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle GameObject's Rigidbody2D&lt;/code&gt;, change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Material&lt;/code&gt; property to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ball physics material&lt;/code&gt; that we’ve just created:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/set-physics-material-200-5d0ca6424.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/set-physics-material-382-5d0ca6424.webp 382w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/set-physics-material-200-5d0ca6424.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/set-physics-material-382-5d0ca6424.png 382w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/set-physics-material-382-5d0ca6424.png&quot; alt=&quot;post image&quot; width=&quot;382&quot; height=&quot;69&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Hit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Play&lt;/code&gt; button again. Now we should see this happen:&lt;/p&gt;
&lt;center&gt;                
        &lt;img class=&quot;screenshot&quot; src=&quot;/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/ball-boucing.gif &quot; alt=&quot;post image&quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;collision-callbacks&quot;&gt;Collision callbacks&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;When one collider interacts with another collider, Unity sends some messages (e.g., call a method on any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonoBehavior&lt;/code&gt; attached to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameObject&lt;/code&gt;). In the case of a 2D collider, there are six available messages:&lt;/p&gt;

&lt;h3 id=&quot;when-istrigger-is-not-checked&quot;&gt;When IsTrigger is not checked:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollisionEnter2D&lt;/code&gt;: called in the first frame when the collision starts&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollisionStay2D&lt;/code&gt;: called in each frame while the collision is happening&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollsionExit2D&lt;/code&gt;: called in the first frame when the collision ends&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;when-istrigger-is-checked&quot;&gt;When IsTrigger is checked:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnTriggerEnter2D&lt;/code&gt;: called in the first frame when the collision starts&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnTriggerStay2D&lt;/code&gt;: called in each frame while the collision is happening&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnTriggerExit2D&lt;/code&gt;: called in the first frame when the collision ends&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollisionStay2D&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnTriggerStay2D&lt;/code&gt; are called each frame until they reach Time To Sleep (if the GameObject is not moving anymore).&lt;/p&gt;

&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/time-to-sleep-200-10aa7dae6.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/time-to-sleep-355-10aa7dae6.webp 355w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/time-to-sleep-200-10aa7dae6.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/time-to-sleep-355-10aa7dae6.png 355w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/time-to-sleep-355-10aa7dae6.png&quot; alt=&quot;post image&quot; width=&quot;355&quot; height=&quot;111&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;We can change this setting on Project Settings / Physics 2D&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-collision-callbacks-on-scripts&quot;&gt;Using collision callbacks on scripts&lt;/h2&gt;
&lt;p&gt;It’s time to write some code. Let’s create a script to log every time that our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle GameObject&lt;/code&gt; hits the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Square GameObject&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollisionEnter2D&lt;/code&gt;) to the console window. We’ll record how many frames they stay in contact (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollisionStay2D&lt;/code&gt;), and when they stop hitting each other (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollsionExit2D&lt;/code&gt;). We’ll also show what happens with and without a trigger&lt;/p&gt;

&lt;h3 id=&quot;without-a-trigger&quot;&gt;Without a trigger&lt;/h3&gt;
&lt;p&gt;Inside our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scripts&lt;/code&gt; folder, create a script called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CollisionLogger&lt;/code&gt; and add it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle GameObject&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/collision-logger-200-b2b349465.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/collision-logger-400-b2b349465.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/collision-logger-442-b2b349465.webp 442w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/collision-logger-200-b2b349465.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/collision-logger-400-b2b349465.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/collision-logger-442-b2b349465.png 442w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/collision-logger-442-b2b349465.png&quot; alt=&quot;post image&quot; width=&quot;442&quot; height=&quot;348&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CollisionLogger&lt;/code&gt; script on editor and type these methods:
&lt;script src=&quot;https://gist.github.com/94b530c223d99f34d4fd6a0ab0702f51.js?file=CollisionLogger.cs&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Hit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Play&lt;/code&gt; button, and we should see something like this in the Console window:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-1-200-bf27113d6.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-1-400-bf27113d6.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-1-488-bf27113d6.webp 488w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-1-200-bf27113d6.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-1-400-bf27113d6.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-1-488-bf27113d6.png 488w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-1-488-bf27113d6.png&quot; alt=&quot;post image&quot; width=&quot;488&quot; height=&quot;197&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollisionEnter2D&lt;/code&gt; is called when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle GameObject&lt;/code&gt; hits the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Square GameObject&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollsionExit2D&lt;/code&gt; is called when they aren’t hitting each other anymore, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollisionStay2D&lt;/code&gt; has not been called because the two GameObjects are not keeping contact. To see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollisionStay2D&lt;/code&gt; being sent, just remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ball physics material&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle GameObject's Rigidbody2D&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/remove-physical-material-200-d43e21e16.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/remove-physical-material-400-d43e21e16.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/remove-physical-material-451-d43e21e16.webp 451w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/remove-physical-material-200-d43e21e16.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/remove-physical-material-400-d43e21e16.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/remove-physical-material-451-d43e21e16.png 451w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/remove-physical-material-451-d43e21e16.png&quot; alt=&quot;post image&quot; width=&quot;451&quot; height=&quot;80&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Hit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Play&lt;/code&gt; button again and the output in our Console window should be:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-2-200-45253a06e.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-2-400-45253a06e.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-2-483-45253a06e.webp 483w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-2-200-45253a06e.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-2-400-45253a06e.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-2-483-45253a06e.png 483w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-2-483-45253a06e.png&quot; alt=&quot;post image&quot; width=&quot;483&quot; height=&quot;198&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now we have one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollisionEnter2D&lt;/code&gt; and a lot of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollisionStay2D&lt;/code&gt; that will be called until the two GameObjects keep the contact or until Time To Sleep is reached.&lt;/p&gt;

&lt;p&gt;Now, re-enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ball physics material&lt;/code&gt; on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle GameObject's Rigidbody2D&lt;/code&gt; and add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CollisionLogger&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Square GameObject&lt;/code&gt; too.&lt;/p&gt;

&lt;p&gt;Hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Play&lt;/code&gt;, and the Console window should look like this:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-3-200-4d533a29a.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-3-400-4d533a29a.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-3-478-4d533a29a.webp 478w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-3-200-4d533a29a.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-3-400-4d533a29a.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-3-478-4d533a29a.png 478w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-3-478-4d533a29a.png&quot; alt=&quot;post image&quot; width=&quot;478&quot; height=&quot;196&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As expected, the messages are called in all GameObjects involved in the collision.&lt;/p&gt;

&lt;h3 id=&quot;with-a-trigger&quot;&gt;With a trigger&lt;/h3&gt;
&lt;p&gt;What about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnTrigger&lt;/code&gt; method? Right now, none of our colliders are marked as a trigger (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsTrigger&lt;/code&gt;), which is why only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollision&lt;/code&gt; has been called.&lt;/p&gt;

&lt;p&gt;Triggers are useful when we need to detect that a given GameObject has reached a point or another GameObject. Let’s say we want to be notified on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Square GameObject&lt;/code&gt; every time that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle GameObject&lt;/code&gt; passes through it. We can add a collider with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsTrigger&lt;/code&gt; checked on it and we will receive the notification when the physics engine calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnTriggerEnter2D&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;To see a trigger in action, mark the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Square GameObject's collider&lt;/code&gt; as a trigger:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/istrigger-200-8ff18a7fc.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/istrigger-400-8ff18a7fc.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/istrigger-451-8ff18a7fc.webp 451w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/istrigger-200-8ff18a7fc.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/istrigger-400-8ff18a7fc.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/istrigger-451-8ff18a7fc.png 451w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/istrigger-451-8ff18a7fc.png&quot; alt=&quot;post image&quot; width=&quot;451&quot; height=&quot;98&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Play the scene, and we’ll see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle GameObject&lt;/code&gt; is passing through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Square GameObject&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;                
        &lt;img class=&quot;screenshot&quot; src=&quot;/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/passing-through.gif &quot; alt=&quot;post image&quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This happens because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Square GameObject&lt;/code&gt; is a trigger now. The physics engine won’t generate the expected behavior when two objects collide, but will instead send the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnTrigger&lt;/code&gt; methods to the involved GameObjects.&lt;/p&gt;

&lt;p&gt;If we look at the Console window, you’ll notice that it is empty because no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollision&lt;/code&gt; methods are called. To log the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnTrigger&lt;/code&gt; methods, open our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CollisionLogger&lt;/code&gt; script and add these new methods:
&lt;script src=&quot;https://gist.github.com/94b530c223d99f34d4fd6a0ab0702f51.js?file=trigger-methods.cs&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Run the scene and we can see this log in the Console window:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-4-200-a7970a28a.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-4-400-a7970a28a.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-4-475-a7970a28a.webp 475w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-4-200-a7970a28a.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-4-400-a7970a28a.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-4-475-a7970a28a.png 475w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-4-475-a7970a28a.png&quot; alt=&quot;post image&quot; width=&quot;475&quot; height=&quot;196&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-5-200-764f811c6.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-5-400-764f811c6.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-5-474-764f811c6.webp 474w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-5-200-764f811c6.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-5-400-764f811c6.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-5-474-764f811c6.png 474w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/console-window-5-474-764f811c6.png&quot; alt=&quot;post image&quot; width=&quot;474&quot; height=&quot;77&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnTrigger&lt;/code&gt; methods are called because there is a trigger involved in the collision.&lt;/p&gt;

&lt;p&gt;An important thing to note is that all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollision&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnTrigger&lt;/code&gt; methods receive the parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collision2D/Collider2D&lt;/code&gt;. This parameter can hold information about the collision itself, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Which other GameObject collides with the current GameObject&lt;/li&gt;
  &lt;li&gt;Which contact points are involved in the collision&lt;/li&gt;
  &lt;li&gt;The relative linear velocity of the two colliding objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we don’t need to use this information in our script, we can declare the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollision/OnTrigger&lt;/code&gt; methods without the logging parameter.&lt;/p&gt;

&lt;h2 id=&quot;collider-interactions&quot;&gt;Collider interactions&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/component-128-1eb69a9dc.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/component-128-1eb69a9dc.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/component-128-1eb69a9dc.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;You probably noticed in the last section that there is parity between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollision&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnTrigger&lt;/code&gt; methods the physics engine calls on the GameObjects involved in the collision. Knowing when each kind of interaction raises each kind of message/method in the involved GameObjects can be a little tricky; despite this apparent similarity, there are some rules for interaction possibilities between different collider setups.&lt;/p&gt;

&lt;p&gt;There are six different setups a collider can have that will differently affect how it interacts with other colliders. These setups can be done by a combination of the properties &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsTrigger&lt;/code&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collider2D&lt;/code&gt; and the property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Body Type&lt;/code&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rigidbody2D&lt;/code&gt; attached to the same GameObject. Below is a list of similar setups:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Static Collider
    &lt;ul&gt;
      &lt;li&gt;IsTrigger: false&lt;/li&gt;
      &lt;li&gt;Body Type: Static&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rigidbody Collider
    &lt;ul&gt;
      &lt;li&gt;IsTrigger: false&lt;/li&gt;
      &lt;li&gt;Body Type: Dynamic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Kinematic Rigidbody Collider
    &lt;ul&gt;
      &lt;li&gt;IsTrigger: false&lt;/li&gt;
      &lt;li&gt;Body Type: Kinematic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Static Trigger Collider
    &lt;ul&gt;
      &lt;li&gt;IsTrigger: true&lt;/li&gt;
      &lt;li&gt;Body Type: Static&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rigidbody Trigger Collider
    &lt;ul&gt;
      &lt;li&gt;IsTrigger: true&lt;/li&gt;
      &lt;li&gt;Body Type: Dynamic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Kinematic Rigidbody Trigger Collider
    &lt;ul&gt;
      &lt;li&gt;IsTrigger: true&lt;/li&gt;
      &lt;li&gt;Body Type: Kinematic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-do-these-setups-affect-collider-interactions&quot;&gt;How do these setups affect collider interactions?&lt;/h3&gt;
&lt;p&gt;The answer to this question is in the table below, which I took from the &lt;a href=&quot;https://docs.unity3d.com/Manual/CollidersOverview.html&quot;&gt;Unity documentation site&lt;/a&gt;. It shows us where the collisions happen and when the collision callbacks (the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnCollision&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnTrigger&lt;/code&gt; methods) are called.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/collider-interactions-table-200-0aaec8d8b.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/collider-interactions-table-400-0aaec8d8b.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/collider-interactions-table-800-0aaec8d8b.webp 800w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/collider-interactions-table-1517-0aaec8d8b.webp 1517w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/collider-interactions-table-200-0aaec8d8b.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/collider-interactions-table-400-0aaec8d8b.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/collider-interactions-table-800-0aaec8d8b.png 800w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/collider-interactions-table-1517-0aaec8d8b.png 1517w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/collider-interactions-table-800-0aaec8d8b.png&quot; alt=&quot;post image&quot; width=&quot;1517&quot; height=&quot;558&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;Source: &lt;a href=&quot;https://docs.unity3d.com/Manual/CollidersOverview.html&quot;&gt;Unity docs&lt;/a&gt;&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the table, we can figure out things like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Static collider only interacts with a Rigidbody collider&lt;/li&gt;
  &lt;li&gt;A Rigidbody collider can interact with a Static collider, Rigidbody Collider, and Kinematic Rigidbody Collider
These tables can be very useful during game development, when we get stuck with some sort of collider interaction that we expected to happen but it doesn’t.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To help us to better understand the colliders’ interactions, now and when we face the kind of problem mentioned above, I created a sample where we can move the GameObjects through each of the six possible interaction setups, see how they interact with each other, and what callbacks messages are sent.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Try it and move each collider setup to better understand what messages are sent for each interaction&lt;/p&gt;
&lt;/blockquote&gt;

&lt;iframe src=&quot;/apps/collider-interactions/index.html&quot; style=&quot;width: 100%;min-height: 700px;&quot;&gt;&lt;/iframe&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://diegogiacomelli.com.br/apps/collider-interactions&quot;&gt;https://diegogiacomelli.com.br/apps/collider-interactions&lt;/a&gt;&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;physics2d-settings&quot;&gt;Physics2D settings&lt;/h2&gt;
&lt;p&gt;For the last part of this tutorial, I would like to mention the Physics2D settings.&lt;/p&gt;

&lt;p&gt;These settings are not within the scope of this tutorial — talking about some of them could fill another whole tutorial — but I think it’s important to know that they exist, what their default values are, and that we can adjust them to the needs of our project.&lt;/p&gt;

&lt;p&gt;You can access these settings via Project Settings &amp;gt; Physics 2D.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/physics2d-settings-200-d4eb4d789.webp 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/physics2d-settings-400-d4eb4d789.webp 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/physics2d-settings-756-d4eb4d789.webp 756w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/physics2d-settings-200-d4eb4d789.png 200w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/physics2d-settings-400-d4eb4d789.png 400w, /assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/physics2d-settings-756-d4eb4d789.png 756w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2022/07/22/the-fundamentals-of-unity-2d-colliders/physics2d-settings-756-d4eb4d789.png&quot; alt=&quot;post image&quot; width=&quot;756&quot; height=&quot;938&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Settings like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gravity&lt;/code&gt; are pretty straightforward, but things like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Velocity Iterations&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Position Iterations&lt;/code&gt; can be a little obscure and can affect game behaviors a lot.&lt;/p&gt;

&lt;p&gt;Most of these settings are changed when we need to achieve some kind of non-conventional physics behavior or performance improvement, but you should be aware that you’ll need to retest gameplay after each change you make to these settings to ensure that you haven’t broken anything.&lt;/p&gt;

&lt;p&gt;The bottom line is: make sure to only change these settings after studying and understanding their impact.&lt;/p&gt;

&lt;h2 id=&quot;source-code-and-samples&quot;&gt;Source code and samples&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/giacomelli/the-fundamentals-of-unity-2d-collider-tutorial&quot;&gt;Tutorial source code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://diegogiacomelli.com.br/apps/collider-interactions&quot;&gt;Online Collision Interactions sample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;In this tutorial, we’ve explained the fundamentals of Unity 2D Colliders: what they are, what their common properties and behaviors are, how to add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BoxCollider2D&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CircleCollider2D&lt;/code&gt; to a GameObject, what a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rigidbody2D&lt;/code&gt; is and how to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PhysicsMaterial2D&lt;/code&gt;, what the collision callbacks are and how to use them on our scripts, and, finally, the kinds of collider setups and how they interact.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The sprites used on the WebGL sample are from &lt;a href=&quot;http://kenney.nl&quot;&gt;Kenney&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
</feed>