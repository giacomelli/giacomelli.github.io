<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Diego Giacomelli - database</title>
 <link href="//tags/database/index.xml" rel="self"/>
 <link href="/tag/database.html"/>
 <updated>2022-10-22T06:41:18-03:00</updated>
 <id>/tag/database.html</id>
 <author>
   <name>Diego Giacomelli</name>
 </author>
 
 <entry>
   <title>SqlAsFile</title>
   <link href="//sqlasfile/"/>
   <updated>2021-05-31T00:00:00-03:00</updated>
   <id>//sqlasfile</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;If you already worked in a project where the data access solution wore SQL commands, instead of some ORM solution, you probably saw some SQL commands inserted directly inside the C# code. I worked in projects with that approach too, but I saw a great &lt;strong&gt;problem with that: We were treating a complete language (SQL) as just a string inside our C# code. No intellisense, code completation, syntax validation, format, etc.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sometime ago, with that problem in mind, I created a small library to help us to use SQL commands in our project at that time. As we were using &lt;a href=&quot;https://github.com/DapperLib/Dapper&quot;&gt;Dapper&lt;/a&gt; as our facilitator to access the SQL Server database, we needed write SQL commands as our daily base activities.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That library, called SqlAsFile, helped us to write SQL commands in separated .sql files and use them inside the C# as typed string property of a static class (using T4 generator). This allowed us to write SQL with the whole help of IDE and with no chance to reference a invalid SQL file path.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Install the SqlAsFile on your Data project (where your .sql files will be created) using the Nuget package or using the source code from GitHub: &lt;a href=&quot;https://github.com/giacomelli/sqlasfile&quot;&gt;https://github.com/giacomelli/sqlasfile&lt;/a&gt;.
&lt;script src=&quot;https://gist.github.com/4dda230a09941b6300468a71ee3812ab.js?file=install-package.sh&quot;&gt; &lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Copy the &lt;a href=&quot;https://github.com/giacomelli/SqlAsFile/blob/master/src/Sample.Data/SqlInfoGenerator.tt&quot;&gt;SqlInfoGenerator.tt&lt;/a&gt; to your Data project.&lt;/li&gt;
  &lt;li&gt;Change the namespace of line bellow to the namespace of your Data project.
&lt;script src=&quot;https://gist.github.com/4dda230a09941b6300468a71ee3812ab.js?file=change-template.cs&quot;&gt; &lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Add your .sql files inside any folder or subfolder of your Data project.&lt;/li&gt;
  &lt;li&gt;The Build Action property of the .sql files should be changed to Embedded Resource.&lt;/li&gt;
  &lt;li&gt;Run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SqlInfoGenerator.tt&lt;/code&gt; (right click, Run Custom Tool)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;Now you can access the content of your .sql files in a strongly typed way directly from your C# code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4dda230a09941b6300468a71ee3812ab.js?file=usage.cs&quot;&gt; &lt;/script&gt;

&lt;center&gt;                
        &lt;img class=&quot;screenshot&quot; src=&quot;/assets/2021/05/31/sqlasfile/SqlAsFile-sample.gif &quot; alt=&quot;post image&quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tags&quot;&gt;Tags&lt;/h2&gt;
&lt;p&gt;You can use some tags to tell to SqlAsFile’s parser how to treat a portion of the file:&lt;/p&gt;

&lt;h3 id=&quot;test-args&quot;&gt;test-args&lt;/h3&gt;
&lt;p&gt;Anything inside of these tags will be strip off of the SQL that you can access on C#.&lt;/p&gt;

&lt;p&gt;This tag is useful when you want to test the .sql directly against the DB without need to define the arguments every time.
&lt;script src=&quot;https://gist.github.com/4dda230a09941b6300468a71ee3812ab.js?file=test-args.sql&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;cte&quot;&gt;cte&lt;/h3&gt;
&lt;p&gt;Use this tag if you want to read the CTE of your file in the Cte property on C#.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4dda230a09941b6300468a71ee3812ab.js?file=cte.sql&quot;&gt; &lt;/script&gt;

&lt;script&gt;
        $(document).ready(function() {
          $('.gist-meta').remove();
        });
      &lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Azure Pipelines - Generating DB Script with SqlPackage.exe</title>
   <link href="//azure-pipelines-generating-db-script/"/>
   <updated>2019-12-17T00:00:00-03:00</updated>
   <id>//azure-pipelines-generating-db-script</id>
   <content type="html">&lt;p&gt;Recently I needed to automate the generation of a database script deploy from a SQL Server Database Project on our Azure Pipelines continuous integration. Below I will describe the steps to achieve such thing.&lt;/p&gt;

&lt;h2 id=&quot;building-the-solution&quot;&gt;Building the solution&lt;/h2&gt;
&lt;p&gt;A SQL Server Database Project has a solution (.sln) as any other kind of Visual Studio projects and we need to build it to generate our &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/relational-databases/data-tier-applications/data-tier-applications?view=sql-server-ver15&quot;&gt;DACPAC&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A data-tier application (DAC) is a logical database management entity that defines all of the SQL Server objects - like tables, views, and instance objects, including logins - associated with a user’s database. A DAC is a self-contained unit of SQL Server database deployment that enables data-tier developers and database administrators to package SQL Server objects into a portable artifact called a DAC package, also known as a DACPAC&lt;/p&gt;
&lt;/blockquote&gt;

&lt;script src=&quot;https://gist.github.com/30d0b7c0a3e803cb71ce4b1680d2a584.js?file=solution-build.yml&quot;&gt; &lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;The variables used in the script portions are described in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Complete azure-pipelines.yml&lt;/code&gt; in the end of this post&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;generating-the-sql-script&quot;&gt;Generating the .sql script&lt;/h2&gt;
&lt;p&gt;With our .dacpac file built, now we need to generate our .sql database script. To perform this operation we need the &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/tools/sqlpackage?view=sql-server-ver15&quot;&gt;sqlpackage.exe&lt;/a&gt;, this command-line is available in some Azure Pipelines images, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vs2017-win2016&lt;/code&gt;, so you need to use it on your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;azure-pipelines.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/30d0b7c0a3e803cb71ce4b1680d2a584.js?file=image.yml&quot;&gt; &lt;/script&gt;

&lt;p&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CmdLine&lt;/code&gt; task below to generate the .sql database script:
&lt;script src=&quot;https://gist.github.com/30d0b7c0a3e803cb71ce4b1680d2a584.js?file=db-script-generate.yml&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;publishing-the-sql-script&quot;&gt;Publishing the .sql script&lt;/h2&gt;
&lt;p&gt;Now we need to publish the .sql file to the build artifacts:
&lt;script src=&quot;https://gist.github.com/30d0b7c0a3e803cb71ce4b1680d2a584.js?file=db-script-publish.yml&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;complete-azure-pipelinesyml&quot;&gt;Complete azure-pipelines.yml&lt;/h2&gt;
&lt;script src=&quot;https://gist.github.com/30d0b7c0a3e803cb71ce4b1680d2a584.js?file=azure-pipelines.yml&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;extra-points&quot;&gt;Extra points&lt;/h2&gt;
&lt;p&gt;In the approach described above the .sql files is not automatically applied to the database, so someone need to download, check and apply the file manually against the target database. If you want to apply the database script automatically you can change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CmdLine&lt;/code&gt; task that generate the .sql file to update the target database using the &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/tools/sqlpackage?view=sql-server-ver15#publish-parameters-properties-and-sqlcmd-variables&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;action:publish&lt;/code&gt; option of sqlpackage.exe&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
</feed>