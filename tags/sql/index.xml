<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Diego Giacomelli - sql</title>
 <link href="//tags/sql/index.xml" rel="self"/>
 <link href="/tag/sql.html"/>
 <updated>2022-09-13T14:04:53-03:00</updated>
 <id>/tag/sql.html</id>
 <author>
   <name>Diego Giacomelli</name>
 </author>
 
 <entry>
   <title>SqlAsFile</title>
   <link href="//sqlasfile/"/>
   <updated>2021-05-31T00:00:00-03:00</updated>
   <id>//sqlasfile</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;If you already worked in a project where the data access solution wore SQL commands, instead of some ORM solution, you probably saw some SQL commands inserted directly inside the C# code. I worked in projects with that approach too, but I saw a great &lt;strong&gt;problem with that: We were treating a complete language (SQL) as just a string inside our C# code. No intellisense, code completation, syntax validation, format, etc.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sometime ago, with that problem in mind, I created a small library to help us to use SQL commands in our project at that time. As we were using &lt;a href=&quot;https://github.com/DapperLib/Dapper&quot;&gt;Dapper&lt;/a&gt; as our facilitator to access the SQL Server database, we needed write SQL commands as our daily base activities.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That library, called SqlAsFile, helped us to write SQL commands in separated .sql files and use them inside the C# as typed string property of a static class (using T4 generator). This allowed us to write SQL with the whole help of IDE and with no chance to reference a invalid SQL file path.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Install the SqlAsFile on your Data project (where your .sql files will be created) using the Nuget package or using the source code from GitHub: &lt;a href=&quot;https://github.com/giacomelli/sqlasfile&quot;&gt;https://github.com/giacomelli/sqlasfile&lt;/a&gt;.
&lt;script src=&quot;https://gist.github.com/4dda230a09941b6300468a71ee3812ab.js?file=install-package.sh&quot;&gt; &lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Copy the &lt;a href=&quot;https://github.com/giacomelli/SqlAsFile/blob/master/src/Sample.Data/SqlInfoGenerator.tt&quot;&gt;SqlInfoGenerator.tt&lt;/a&gt; to your Data project.&lt;/li&gt;
  &lt;li&gt;Change the namespace of line bellow to the namespace of your Data project.
&lt;script src=&quot;https://gist.github.com/4dda230a09941b6300468a71ee3812ab.js?file=change-template.cs&quot;&gt; &lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Add your .sql files inside any folder or subfolder of your Data project.&lt;/li&gt;
  &lt;li&gt;The Build Action property of the .sql files should be changed to Embedded Resource.&lt;/li&gt;
  &lt;li&gt;Run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SqlInfoGenerator.tt&lt;/code&gt; (right click, Run Custom Tool)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;Now you can access the content of your .sql files in a strongly typed way directly from your C# code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4dda230a09941b6300468a71ee3812ab.js?file=usage.cs&quot;&gt; &lt;/script&gt;

&lt;center&gt;                
        &lt;img class=&quot;screenshot&quot; src=&quot;/assets/2021/05/31/sqlasfile/SqlAsFile-sample.gif &quot; alt=&quot;post image&quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tags&quot;&gt;Tags&lt;/h2&gt;
&lt;p&gt;You can use some tags to tell to SqlAsFileâ€™s parser how to treat a portion of the file:&lt;/p&gt;

&lt;h3 id=&quot;test-args&quot;&gt;test-args&lt;/h3&gt;
&lt;p&gt;Anything inside of these tags will be strip off of the SQL that you can access on C#.&lt;/p&gt;

&lt;p&gt;This tag is useful when you want to test the .sql directly against the DB without need to define the arguments every time.
&lt;script src=&quot;https://gist.github.com/4dda230a09941b6300468a71ee3812ab.js?file=test-args.sql&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;cte&quot;&gt;cte&lt;/h3&gt;
&lt;p&gt;Use this tag if you want to read the CTE of your file in the Cte property on C#.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4dda230a09941b6300468a71ee3812ab.js?file=cte.sql&quot;&gt; &lt;/script&gt;

&lt;script&gt;
        $(document).ready(function() {
          $('.gist-meta').remove();
        });
      &lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Dapper and the NVARCHAR(4000) arguments</title>
   <link href="//dapper-and-the-nvarchar-4000-arguments/"/>
   <updated>2019-08-14T00:00:00-03:00</updated>
   <id>//dapper-and-the-nvarchar-4000-arguments</id>
   <content type="html">&lt;p&gt;Performing a profiler in the queries sended to the database you can see that in some cases Dapper is sending the string arguments as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NVARCHAR (4000)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This happen because Dapper cannot infer what is the exactly type and length of the table column on database.&lt;/p&gt;

&lt;p&gt;The downside of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NVARCHAR (4000)&lt;/code&gt; in arguments is that the database can choose a bad execution plan for the query.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;To avoid this you can pass the type of the argument to Dapper:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/57f1f930ddd894eb8ab54fffed453842.js?file=dapper.sample1.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;To make this solution easier to use I made two extension methods &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToVarChar&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToNVarChar&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/57f1f930ddd894eb8ab54fffed453842.js?file=dapper.sample2.cs&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;extension-methods&quot;&gt;Extension methods&lt;/h2&gt;
&lt;script src=&quot;https://gist.github.com/57f1f930ddd894eb8ab54fffed453842.js?file=DapperArgumentExtensions.cs&quot;&gt; &lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Why we should avoid DateTime.UtcNow inside a Linq to Entities query?</title>
   <link href="//why-we-should-avoid-datetime-utcnow-inside-a-linq-to-entities-query/"/>
   <updated>2014-05-12T00:00:00-03:00</updated>
   <id>//why-we-should-avoid-datetime-utcnow-inside-a-linq-to-entities-query</id>
   <content type="html">&lt;p&gt;Why we should avoid &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime.UtcNow&lt;/code&gt; inside a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linq to Entities&lt;/code&gt; query?&lt;/p&gt;

&lt;p&gt;Because we can get unexpected results!&lt;br /&gt;
After read this tip, will be expected results ðŸ˜‰&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-diference-between-these-two-linq-queries&quot;&gt;What is the diference between these two Linq queries?&lt;/h2&gt;

&lt;h4 id=&quot;query-1&quot;&gt;Query 1&lt;/h4&gt;
&lt;script src=&quot;https://gist.github.com/9a3a88fac354f3af8294381b30552ade.js?file=sample1.cs&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;query-2&quot;&gt;Query 2&lt;/h4&gt;
&lt;script src=&quot;https://gist.github.com/9a3a88fac354f3af8294381b30552ade.js?file=sample2.cs&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;sql-generated&quot;&gt;SQL generated&lt;/h4&gt;
&lt;p&gt;The first one will generate a SQL with WHERE clause like this:
&lt;script src=&quot;https://gist.github.com/9a3a88fac354f3af8294381b30552ade.js?file=sample3.cs&quot;&gt; &lt;/script&gt;
Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@p__linq__1&lt;/code&gt; is the value of our filterDate variable.&lt;/p&gt;

&lt;p&gt;The second one will generate this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; clause:
&lt;script src=&quot;https://gist.github.com/9a3a88fac354f3af8294381b30552ade.js?file=sample4.cs&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-problem&quot;&gt;What is the problem?&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;Imagine that weâ€™re using the second query inside some sync algorithm in our C# code, this algorithm is very sensitive about time, now imagine that the server where our C# code is running has a difference about seconds or minutes with the database server?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;YES, UNEXPECTED RESULTS!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;Linq to Entities is very smart and it is able to translate our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime.Now&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime.UtcNow&lt;/code&gt; to a matching command on database side.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;The important here is: we should remember that it can do this and we should use features like these with parsimony.&lt;/p&gt;
&lt;/div&gt;

&lt;script&gt;
        $(document).ready(function() {
          $('.gist-meta').remove();
        });
      &lt;/script&gt;

</content>
 </entry>
 
</feed>