<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Diego Giacomelli - unity3d</title>
 <link href="//tags/unity3d/index.xml" rel="self"/>
 <link href="/tag/unity3d.html"/>
 <updated>2020-09-01T12:46:42-03:00</updated>
 <id>/tag/unity3d.html</id>
 <author>
   <name>Diego Giacomelli</name>
 </author>
 
 <entry>
   <title>Unity Distribution Portal (UDP) Journey&colon; Tips & Tricks</title>
   <link href="//unity-distribution-portal-udp-journey-tips-and-tricks/"/>
   <updated>2020-09-01T00:00:00-03:00</updated>
   <id>//unity-distribution-portal-udp-journey-tips-and-tricks</id>
   <content type="html">&lt;p&gt;In this post, I will list some tips and tricks that I learned in my journey using the &lt;a href=&quot;https://github.com/playgameservices/play-games-plugin-for-unity&quot;&gt;Unity Distribution Portal (UDP)&lt;/a&gt; to publish my game &lt;a href=&quot;https://play.google.com/store/apps/details?id=br.com.diegogiacomelli.puzzimals&quot;&gt;Puzzimals&lt;/a&gt; to 4 new stores, reaching millions new users, with a single build.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Unity has recently &lt;a href=&quot;https://blogs.unity3d.com/2020/08/28/unlock-access-to-over-a-billion-new-players-for-your-android-mobile-game/&quot;&gt;launch to everyone the Unity Distribution Portal (UDP)&lt;/a&gt; a platform that enable Unity developers to distribute Android games beyond Google Play, into stores like Samsung Galaxy Store, ONE Store, Mi GetApps, HUAWEI AppGallery, QooApp Game Store, SHAREit Game Store, TPAY MOBILE Stores, APPTUTTI, and VIVEPORT.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Unity Distribution Portal was created to help make publishing mobile games on alternative app stores faster and easier for developers. When you submit your game, UDP automatically creates specific builds with all required SDKs in the background, saving you a substantial amount of time when publishing to multiple stores.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unity Distribution Portal (UDP) lets you distribute your games to multiple app stores through a single hub. UDP repacks your Android build with each store’s dedicated In-App Purchase SDK. You can manage all your store submissions from the UDP console.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post is focused on games that have IAP and use Google Play Services, like leaderboards and achievements.
If your game does not have any of these features, publish to UDP is quite a more straightforward process and probably these tips here won’t be useful for you.&lt;/p&gt;

&lt;h2 id=&quot;available-stores&quot;&gt;Available Stores&lt;/h2&gt;
&lt;p&gt;As I write this post Unity is working to add even more stores to UDP.
From the 9 stores supported, 7 are fully integrated with UDP. What this meaning? You just need to create your account on each store, via UDP (in some cases fill some forms and send some ID and bank docs), and UDP will perform all the steps need to make your game available on the store.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;
&lt;p&gt;Is not the intent of this post cover everything about how to publish your game using UDP, I guess this quite well documented on &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.purchasing.udp@2.0/manual/index.html&quot;&gt;UDP package documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea of this post is to point out some tips and tricks that can help you, as helped me, to understand how to use UDP.&lt;/p&gt;

&lt;h2 id=&quot;read-the-docs&quot;&gt;Read the docs&lt;/h2&gt;
&lt;p&gt;Please, if you did not read the official documentation yet, go and &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.purchasing.udp@2.0/manual/index.html&quot;&gt;read it&lt;/a&gt;, then come back here. You’ll better understand this post and the whole UDP solution after educated yourself about it.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-journey.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;1-implement&quot;&gt;1. Implement&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;What docs says: Set up and configure UDP in the Unity Editor, implement UDP in your game project, and populate your IAP Catalog with your in-app purchase products (if any).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;11-create-a-new-game-on-udp&quot;&gt;1.1 Create a new game on UDP&lt;/h3&gt;
&lt;p&gt;Go to the UDP dashboard and just create a new game. 
At this moment just set the game tile.&lt;/p&gt;

&lt;h3 id=&quot;12-iap-and-target-udp&quot;&gt;1.2 IAP and Target UDP&lt;/h3&gt;
&lt;p&gt;There is two way to use UDP on your project: using the UDP package or using the Unity IAP.
In my case, I was using IAP already in the project.&lt;/p&gt;

&lt;p&gt;This tip is in the official &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.purchasing.udp@2.0/manual/games-with-iap.html&quot;&gt;documentation&lt;/a&gt;, but would like to reinforce it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the Unity Editor, to choose UDP as the Android build target, select Window &amp;gt; Unity IAP &amp;gt; Android &amp;gt; Target Unity Distribution Portal (UDP).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You’ll need this when you build to UDP and remember to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Target Google Play&lt;/code&gt; when you build to Google Play.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/target-udp.png &quot; /&gt;
      &lt;/center&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;2-build--deploy&quot;&gt;2. Build &amp;amp; deploy&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;What docs says: Build your UDP Android package (apk), test it in the UDP Sandbox environment, and deploy it to the UDP console where you’ll begin preparing your game for submission to the stores.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;21-sandbox-environment-test&quot;&gt;2.1 Sandbox environment test&lt;/h3&gt;
&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sandbox Testing&lt;/code&gt; section of your game page on UDP, you will find some instructions on how to test your game on the UDP sandbox.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;You will need to do this before repacking your game for the stores.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Just build your &lt;code class=&quot;highlighter-rouge&quot;&gt;.apk&lt;/code&gt; on Unity and open it on emulator (like &lt;a href=&quot;https://www.bluestacks.com/&quot;&gt;BlueStacks&lt;/a&gt;) or directly on your Android device.
If you setup UDP right, you should see a screen like below when the game starts.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-login.png &quot; /&gt;
      &lt;/center&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;To login in this screen, use the accounts in the setup on &lt;code class=&quot;highlighter-rouge&quot;&gt;Sandbox Test Account&lt;/code&gt;. Remember those e-mails don’t need to exist, they are just test accounts to validate UDP setup&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Perform the login on the UDP sandbox and test your IAP.&lt;/p&gt;

&lt;p&gt;After this, you can refresh your game page on UDP and you should see the result below on &lt;code class=&quot;highlighter-rouge&quot;&gt;Sandbox Testing&lt;/code&gt; section:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/sandbox-testing.png &quot; /&gt;
      &lt;/center&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;If you did not setup the UDP on your project, you should see a message like this on UDP dashboard notifications &lt;code class=&quot;highlighter-rouge&quot;&gt;apk analytics failed, caused by: analyse apk failed, caused by:Failed to find GameSettings.prop, please import udp sdk and generate GameSettings.&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;22-package-name-extensions-and-google-play-services&quot;&gt;2.2 Package name extensions and Google Play Services&lt;/h3&gt;
&lt;p&gt;When UDP repacks your game with store-specific SDK it will, most of the time, change the name of the package, adding a store-specific extension, like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.gs&lt;/code&gt; to Samsung Galaxy Store&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.unity.migc&lt;/code&gt; to Mi GetApps&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.qooapp&lt;/code&gt; QooApp to Game Store&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because of this extension, we will need to configure a new OAuth credential to each extension on &lt;a href=&quot;https://console.developers.google.com/apis&quot;&gt;Google API Console&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my case on the &lt;code class=&quot;highlighter-rouge&quot;&gt;App Signature&lt;/code&gt; section of the game info, a used the recommend option &lt;code class=&quot;highlighter-rouge&quot;&gt;Export and upload your own key and certificate&lt;/code&gt;. This is the same certificate used by Google Play Services and APIs.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/app-signature.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://console.developers.google.com/apis&quot;&gt;Google API Console&lt;/a&gt;, select your game project on the dropdown, then go to &lt;code class=&quot;highlighter-rouge&quot;&gt;Credentials&lt;/code&gt; section, then on the &lt;code class=&quot;highlighter-rouge&quot;&gt;OAuth 2.0 Client IDs&lt;/code&gt; section select the item with the name of your game, then copy the value of the field &lt;code class=&quot;highlighter-rouge&quot;&gt;SHA-1 certificate fingertip&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, go back to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Credentials&lt;/code&gt; section and click on the button &lt;code class=&quot;highlighter-rouge&quot;&gt;Create credentials&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;OAuth client ID&lt;/code&gt;.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/google-api-credentials.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;In the new page, select &lt;code class=&quot;highlighter-rouge&quot;&gt;Android&lt;/code&gt; on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Application type&lt;/code&gt; dropdown.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Name&lt;/code&gt; field you can write anything you want, but maybe use your game name following with the extension store can help to find it later.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Package name&lt;/code&gt; field you should add the exact package name for the specific store on UDP. For example, in my case for Mi GetApps store, the package name was &lt;code class=&quot;highlighter-rouge&quot;&gt;br.com.diegogiacomelli.puzzimals.unity.migc&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;If you have doubted what is the exact package name for your game on a specific store on UDP, you can click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Advanced&lt;/code&gt; link of that store on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Publish&lt;/code&gt; tab of UDP&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Now in the field &lt;code class=&quot;highlighter-rouge&quot;&gt;SHA-1 certificate fingertip&lt;/code&gt; you should paste the value you copy before from the original &lt;code class=&quot;highlighter-rouge&quot;&gt;OAuth 2.0 Client IDs&lt;/code&gt; configuration.&lt;/p&gt;

&lt;p&gt;Then click on the button &lt;code class=&quot;highlighter-rouge&quot;&gt;Create&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You will need to repeat those steps for each store that change your package name.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;3-game-info&quot;&gt;3. Game Info&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;What docs says: On the UDP console, provide app store listing information and resources for your game, such as multi-language descriptions, multi-currency price points, screenshots, video trailers, and create releases for distribution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;31-import-from-google-play&quot;&gt;3.1 Import from Google Play&lt;/h3&gt;
&lt;p&gt;As you follow the UDP documentation you will reach the point will need to create your game on the UDP dashboard.
If you already have the game published on Google Play, as was my case with &lt;a href=&quot;https://play.google.com/store/apps/details?id=br.com.diegogiacomelli.puzzimals&quot;&gt;Puzzimals&lt;/a&gt;, you can use the right-top button &lt;code class=&quot;highlighter-rouge&quot;&gt;IMPORT FROM GOOGLE PLAY&lt;/code&gt; in the game page.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/import-from-google.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;After the import, you can edit the information as well.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;You can add the argument &lt;code class=&quot;highlighter-rouge&quot;&gt;hl&lt;/code&gt; to your Google Play url to import a specific translation, like &lt;code class=&quot;highlighter-rouge&quot;&gt;https://play.google.com/store/apps/details?id=br.com.diegogiacomelli.puzzimals&amp;amp;hl=pt&lt;/code&gt; to import Portuguese translation&lt;/p&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;4-submission&quot;&gt;4. Submission&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;What docs says: Sign up with the stores using your UnityID, and register your game with the app stores directly from inside the UDP console.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Publish&lt;/code&gt; tab, select a store and click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Sign up to...&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Follow the needed steps for each store you would like to publish.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;5-publish&quot;&gt;5. Publish&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;What docs says: Select the stores you want to submit your game to. UDP automatically repacks your game into store-specific builds and submits them to the stores along with the relevant game descriptions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;51-upload&quot;&gt;5.1 Upload&lt;/h3&gt;
&lt;p&gt;Now that you have a valid UDP &lt;code class=&quot;highlighter-rouge&quot;&gt;.apk&lt;/code&gt; and game info filled, you can upload it on the UDP dashboard, inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;Binary&lt;/code&gt; section.&lt;/p&gt;

&lt;h3 id=&quot;52-testing-your-repack-apk&quot;&gt;5.2 Testing your repack .apk&lt;/h3&gt;
&lt;p&gt;Now the specific store should show a &lt;code class=&quot;highlighter-rouge&quot;&gt;Repack game&lt;/code&gt; dropdown on the UDP dashboard.&lt;/p&gt;

&lt;p&gt;Select &lt;code class=&quot;highlighter-rouge&quot;&gt;Repack game&lt;/code&gt; and UDP should generate a new &lt;code class=&quot;highlighter-rouge&quot;&gt;.apk&lt;/code&gt; of your game with the store SDK. This &lt;code class=&quot;highlighter-rouge&quot;&gt;.apk&lt;/code&gt; will be available to download on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Advanced&lt;/code&gt; link. Download it from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Download APK Certificate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For each store, you need to test your repack &lt;code class=&quot;highlighter-rouge&quot;&gt;.apk&lt;/code&gt; to certificate that everything in your game is running ok.&lt;/p&gt;

&lt;p&gt;Open the repack &lt;code class=&quot;highlighter-rouge&quot;&gt;.apk&lt;/code&gt; on an emulator or an Android device.&lt;/p&gt;

&lt;p&gt;Test your IAP and Google Play Services, they are working as expected?&lt;/p&gt;

&lt;p&gt;For each store, you will see different screens. For example, for QooApp you will see something like this:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/qooapp-login.png &quot; /&gt;
      &lt;/center&gt;

&lt;h3 id=&quot;53-send-it-to-review&quot;&gt;5.3 Send it to review&lt;/h3&gt;
&lt;p&gt;Now you can select &lt;code class=&quot;highlighter-rouge&quot;&gt;Submit to Store&lt;/code&gt; in the dropdown, then select the checkbox store on &lt;code class=&quot;highlighter-rouge&quot;&gt;Publish&lt;/code&gt; page and click on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Publish&lt;/code&gt; button.
UDP will send the game to store review and you can monitor the progress on the dashboard.
UDP will send to you an e-mail when the game is approved.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/publish-button.png &quot; /&gt;
      &lt;/center&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;6-performance&quot;&gt;6. Performance&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;What docs says: When your game is published, monitor its performance across the different stores from the UDP reporting dashboard.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wait the game been published on the store and will see the &lt;code class=&quot;highlighter-rouge&quot;&gt;Reporting Dashboard&lt;/code&gt; been populated with stats about the game.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With these tips and tricks that I learned while using UDP I hope I helped you to the UDP Journey:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Implement UDP in your Unity project&lt;/li&gt;
  &lt;li&gt;Build and deploy your game to UDP&lt;/li&gt;
  &lt;li&gt;Edit your game information&lt;/li&gt;
  &lt;li&gt;Prepare your game for submission&lt;/li&gt;
  &lt;li&gt;Publish to stores&lt;/li&gt;
  &lt;li&gt;Track game performance&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Drawing a Maurer Rose With Unity</title>
   <link href="//drawing-a-maurer-rose-with-unity/"/>
   <updated>2020-08-21T00:00:00-03:00</updated>
   <id>//drawing-a-maurer-rose-with-unity</id>
   <content type="html">&lt;p&gt;In this tutorial we will learn how to draw a &lt;a href=&quot;https://en.wikipedia.org/wiki/Maurer_rose&quot;&gt;Maurer Rose&lt;/a&gt; with a &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/LineRenderer.html&quot;&gt;LineRenderer&lt;/a&gt; in Unity.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recently, I was watching a video by &lt;a href=&quot;https://twitter.com/shiffman&quot;&gt;Daniel Shiffman&lt;/a&gt; about Maurer Rose that inspired me to try it out at Unity.&lt;/p&gt;

&lt;p&gt;Now you must be thinking “What the hell is a Maurer Rose?”, Well, I didn’t know it until I watched &lt;a href=&quot;https://youtu.be/4uU9lZ-HSqA&quot;&gt;that video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s see what Wikipedia says about:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Maurer rose of the rose r = sin(nθ) consists of the 360 lines successively connecting the above 361 points. Thus a Maurer rose is a polygonal curve with vertices on a rose.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The following gif shows the evolution of a Maurer Rose (n = 2, d = 29°) from 1 point to 361 points.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-sample.gif &quot; /&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;definition&quot;&gt;Definition&lt;/h1&gt;
&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/project.png &quot; style=&quot;max-height:200px&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;A Maurer Rose is always defined by two input parameters: &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; represents the number of petals. The rose has n petals if n is odd, and 2n petals if n is even (look to the gif above, n = 2, then 4 petals).&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; represents the angle in degrees for each line.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let r = sin(nθ) be a rose in the polar coordinate system, where n is a positive integer.&lt;/p&gt;

  &lt;p&gt;We then take 361 points on the rose:
(sin(nk), k) (k = 0, d, 2d, 3d, …, 360d),
where d is a positive integer and the angles are in degrees, not radians.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This definition talks about &lt;a href=&quot;https://en.wikipedia.org/wiki/Polar_coordinate_system&quot;&gt;polar coordinate system&lt;/a&gt;. The more important thing to know about it is this: &lt;code class=&quot;highlighter-rouge&quot;&gt;each point on a plane is determined by a distance from a reference point and an angle from a reference direction&lt;/code&gt;. So, if you want to draw a line from a point, we need to take that point, an angle, and distance to calculate the second point.&lt;/p&gt;

&lt;h1 id=&quot;the-formula&quot;&gt;The formula&lt;/h1&gt;
&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/math.png &quot; style=&quot;max-height:200px&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;The basic formula is: &lt;code class=&quot;highlighter-rouge&quot;&gt;r = sin(nθ)&lt;/code&gt; and we need to apply it to 361 points, where:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r = sin(n * (d * point))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In C# the code is something like this:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9dc5d4d408c00e92143827293a017936.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We calculate the angle for each point, then we get the &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; and find the &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; for the second point on the polar coordinate system.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Mathf.PI / 180f&lt;/code&gt; is to convert from degrees to radians to work properly with the Mathf functions.&lt;/p&gt;
&lt;/div&gt;

&lt;h1 id=&quot;maurerroselinerenderer&quot;&gt;MaurerRoseLineRenderer&lt;/h1&gt;
&lt;p&gt;Now the complete code for a MonoBehaviour that takes the formula we saw in the previous section and combine it with a LineRenderer to draw the Maurer Rose.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/f4aba5c5d7cbeb396ca784dff150e194.js&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h1 id=&quot;using-the-maurerroselinerenderer&quot;&gt;Using the MaurerRoseLineRenderer&lt;/h1&gt;
&lt;p&gt;To use it, just create a new GameObject and add the &lt;code class=&quot;highlighter-rouge&quot;&gt;MaurerRoseLineRenderer&lt;/code&gt; component to it.&lt;/p&gt;

&lt;p&gt;If you just hit play button, you will see something like this:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-first-try.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;&lt;br /&gt;
Go to the LineRenderer component and change the line width to &lt;code class=&quot;highlighter-rouge&quot;&gt;0.03&lt;/code&gt;, then hit play button again.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-second-try.png &quot; /&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;testing-new-inputs&quot;&gt;Testing new inputs&lt;/h1&gt;
&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/programmer.png &quot; style=&quot;max-height:200px&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;If you change the values of &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt; of the component in the inspector, you will see a new Maurer Rose been drawing.&lt;/p&gt;

&lt;p&gt;The image below shows the result of 6 different inputs (the same inputs used on &lt;a href=&quot;https://en.wikipedia.org/wiki/Maurer_rose&quot;&gt;Wikipedia&lt;/a&gt;):&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-roses.png &quot; /&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;going-beyond&quot;&gt;Going beyond&lt;/h1&gt;
&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/beyond.png &quot; style=&quot;max-height:200px&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;Now that you understand what is a Maurer Rose and how to code it inside Unity you can try to do some crazy things with it, like animate the input values or the number of points, or still using it to build a particle system.&lt;/p&gt;

&lt;p&gt;Below I show my realtime try on this matter:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/apps/maurer-rose/index.html&quot; target=&quot;_blank&quot;&gt;Open in a new window&lt;/a&gt;&lt;/p&gt;
&lt;iframe src=&quot;/apps/maurer-rose/index.html&quot; style=&quot;width: 960px;height: 700px;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this tutorial, we learned how to draw a Maurer Rose with a LineRenderer.
This simple formula show how math can be used to explore creativity and beauty.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The font used on the WebGL sample is from &lt;a href=&quot;http://kenney.nl&quot;&gt;Kenney&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Puzzimals&colon; Open beta</title>
   <link href="//puzzimals-open-beta/"/>
   <updated>2020-08-12T00:00:00-03:00</updated>
   <id>//puzzimals-open-beta</id>
   <content type="html">&lt;p&gt;After 4 months of work, I am finally starting the open beta of Puzzimals: &lt;a href=&quot;https://play.google.com/store/apps/details?id=br.com.diegogiacomelli.puzzimals&quot;&gt;https://play.google.com/store/apps/details?id=br.com.diegogiacomelli.puzzimals&lt;/a&gt;&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/RmLcK4Z7EUY &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;cute-but-challenging&quot;&gt;Cute, but challenging!&lt;/h2&gt;

&lt;p&gt;Don’t let the cute look or super fun animations fool you, Puzzimals is a cube-matching game challenging you to match identical tiles in 100 levels of thought-provoking puzzles in a world map.&lt;/p&gt;

&lt;p&gt;Packed with features and creative puzzles you can combine cubes of ice, wild cards, bombs and so much more!&lt;/p&gt;

&lt;p&gt;Each level unlocks and increases in difficulty and offers an almost infinite number of combos.&lt;/p&gt;

&lt;p&gt;Fans of casual puzzle games will enjoy the crisp, colorful graphics featuring cute animals and the compelling music offers great relaxation.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>unitytips&colon; SettingsProvider</title>
   <link href="//unitytips-settings-provider/"/>
   <updated>2020-07-21T00:00:00-03:00</updated>
   <id>//unitytips-settings-provider</id>
   <content type="html">&lt;p&gt;You can add a custom section to &lt;a href=&quot;https://docs.unity3d.com/Manual/comp-ManagerGroup.html&quot;&gt;Project Settings&lt;/a&gt; window that allows you to configure some global settings for your project using a &lt;a href=&quot;https://docs.unity3d.com/2018.3/Documentation/ScriptReference/SettingsProvider.html&quot;&gt;SettingsProvider&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/07/21/unitytips-settings-provider/settings-provider.jpg &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/623de59997fa6f2aaeeb231a2a789933.js?file=FrameworkSettings.cs&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/623de59997fa6f2aaeeb231a2a789933.js?file=FrameworkSettingsRegister.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>unitytips&colon; HelpBox Attribute (with docs button)</title>
   <link href="//unitytips-helpbox-attribute/"/>
   <updated>2020-07-14T00:00:00-03:00</updated>
   <id>//unitytips-helpbox-attribute</id>
   <content type="html">&lt;p&gt;You can create a &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/PropertyAttribute.html&quot;&gt;PropertyAttribute&lt;/a&gt; to display a help box on inspector showing a few lines of information, like &lt;a href=&quot;https://docs.unity3d.com/2020.1/Documentation/ScriptReference/EditorGUI.HelpBox.html&quot;&gt;EditorGUI.HelpBox&lt;/a&gt;, but with a &lt;code class=&quot;highlighter-rouge&quot;&gt;docs&lt;/code&gt; button to the documentation page.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/07/14/unitytips-helpbox-attribute/sample-component.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/be4850e86a0aacd3de4266830566b139.js?file=HelpBoxAttribute.cs&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/be4850e86a0aacd3de4266830566b139.js?file=HelpBoxDrawer.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/be4850e86a0aacd3de4266830566b139.js?file=SampleComponent.cs&quot;&gt; &lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>unitytips&colon; Social Share</title>
   <link href="//unitytips-social-share/"/>
   <updated>2020-07-07T00:00:00-03:00</updated>
   <id>//unitytips-social-share</id>
   <content type="html">&lt;p&gt;Using &lt;a href=&quot;https://github.com/yasirkula&quot;&gt;Süleyman Yasir KULA&lt;/a&gt; &lt;a href=&quot;https://github.com/yasirkula/UnityNativeShare&quot;&gt;Unity Native Share Plugin&lt;/a&gt; you can easily add native share to your Android/iOS games.&lt;/p&gt;

&lt;p&gt;I made the gist below that uses the plugin to add a social share component to any game object.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/07/07/unitytips-social-share/component.jpg &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/c03ec79fa0f0def94726f4b6914b4769.js?file=SocialShare.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>unitytips&colon; Dynamic Log</title>
   <link href="//unitytips-dynamic-log/"/>
   <updated>2020-06-30T00:00:00-03:00</updated>
   <id>//unitytips-dynamic-log</id>
   <content type="html">&lt;p&gt;You can create a simple logging component to record logs from any UnityEvent and configure them directly in the editor:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/HHcZeWjV7vY &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/bba329d772f4fb7c8e6c9a1d3047bae2.js?file=DynamicLog.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>unitytips&colon; Using ScriptableObject and EditorApplication.isPlaying to refresh the game view</title>
   <link href="//unitytips-using-scriptableobject-and-editorapplication-isplaying-to-refresh-the-game-view/"/>
   <updated>2020-04-28T00:00:00-03:00</updated>
   <id>//unitytips-using-scriptableobject-and-editorapplication-isplaying-to-refresh-the-game-view</id>
   <content type="html">&lt;p&gt;You can use &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/EditorApplication-isPlaying.html&quot;&gt;EditorApplication.isPlaying&lt;/a&gt; in your custom editor to update the game view when a &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/ScriptableObject.html&quot;&gt;ScriptableObject&lt;/a&gt; is updated and you need to restart the scene or do something more complex to see the result of ScriptableObject changed during the game’s playing in the editor.&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/oM5-RJU6g2I &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;
</content>
 </entry>
 
 <entry>
   <title>unitytips&colon; TimeSpan Box Drawer</title>
   <link href="//unitytips-timespan-box-drawer/"/>
   <updated>2020-04-21T00:00:00-03:00</updated>
   <id>//unitytips-timespan-box-drawer</id>
   <content type="html">&lt;p&gt;You can create a &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/PropertyDrawer.html&quot;&gt;PropertyDrawer&lt;/a&gt; to display a help box on inspector showing the time information in seconds fields using &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings&quot;&gt;TimeSpan format strings&lt;/a&gt;:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/21/unitytips-timespan-box-drawer/TimeSpanBox.gif &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/bb3b4bf52e560c3d673cd3d50f563cfb.js?file=TimeSpanBoxAttribute.cs&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/bb3b4bf52e560c3d673cd3d50f563cfb.js?file=TimeSpanBoxDrawer.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/bb3b4bf52e560c3d673cd3d50f563cfb.js?file=TimeSpanBoxDrawerUsage.cs&quot;&gt; &lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Google Play Games Plugin for Unity&colon; Tips & Tricks</title>
   <link href="//google-play-games-plugin-for-unity-tips-and-tricks/"/>
   <updated>2020-04-18T00:00:00-03:00</updated>
   <id>//google-play-games-plugin-for-unity-tips-and-tricks</id>
   <content type="html">&lt;p&gt;In this post I will list some tips and tricks that I learned while using the &lt;a href=&quot;https://github.com/playgameservices/play-games-plugin-for-unity&quot;&gt;Google Play Games Plugin for Unity&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The Unity3D has a code interface for questions regarding social features in games, these interfaces are called &lt;a href=&quot;https://docs.unity3d.com/Manual/net-SocialAPI.html&quot;&gt;Social API&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It provides a unified interface to different social back-ends, such as GameCenter, and is meant to be used primarily by programmers on the game project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you use it on a real platform, you will need to use some plugin that implement those interfaces, in the case of Android this job is done by the &lt;a href=&quot;https://github.com/playgameservices/play-games-plugin-for-unity&quot;&gt;Google Play Games Plugin for Unity&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configuring-the-game-on-google-play-console&quot;&gt;Configuring the game on Google Play Console&lt;/h2&gt;
&lt;p&gt;First of all you need to create the game on &lt;a href=&quot;https://play.google.com/publish&quot;&gt;Google Play Console&lt;/a&gt; as any other game and make an app release (an &lt;code class=&quot;highlighter-rouge&quot;&gt;Internal test track&lt;/code&gt; already works).&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/app-release.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Then go to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Services &amp;amp; APIS&lt;/code&gt; menu, after enter on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Google Play game services&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/services-and-apis.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Fill only the required information for test, then go to menu &lt;code class=&quot;highlighter-rouge&quot;&gt;Linked apps&lt;/code&gt; and link it to your game on with the app on Google Play Console.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/linked-apps.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-some-achievements-for-test&quot;&gt;Creating some achievements for test&lt;/h2&gt;
&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Game services section&lt;/code&gt; open the &lt;code class=&quot;highlighter-rouge&quot;&gt;Achievements&lt;/code&gt; menu and add some achievements.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/achievements.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I found empirically that test achievements that did not have an icon set on the Google Play Console did not show the standard Google Play Games UI when unlocked and were automatically locked again about 1 hour after they were unlocked.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;installing-the-plugin&quot;&gt;Installing the plugin&lt;/h2&gt;
&lt;p&gt;To install the &lt;code class=&quot;highlighter-rouge&quot;&gt;Google Play Games Plugin for Unity&lt;/code&gt;, you should follow the steps in &lt;a href=&quot;https://github.com/playgameservices/play-games-plugin-for-unity#plugin-installation&quot;&gt;Plugin Installation&lt;/a&gt; and &lt;a href=&quot;https://github.com/playgameservices/play-games-plugin-for-unity#android-setup&quot;&gt;Android Setup&lt;/a&gt; sections.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/android-setup.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;oauth-and-upload-certificate&quot;&gt;OAuth and Upload Certificate&lt;/h2&gt;
&lt;p&gt;One thing can be a little confusing is about the certificate fingerprints.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://play.google.com/publish&quot;&gt;Google Play Console&lt;/a&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;App Signing&lt;/code&gt;section and use the option &lt;code class=&quot;highlighter-rouge&quot;&gt;App Signing by Google Play&lt;/code&gt;&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/app-signing.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now you need to copy your &lt;code class=&quot;highlighter-rouge&quot;&gt;SHA-1&lt;/code&gt; fingerprint of your &lt;code class=&quot;highlighter-rouge&quot;&gt;Upload certificate&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;App signing&lt;/code&gt; section.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/upload-certificate.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Then go to your OAuth credentials on &lt;a href=&quot;https://console.developers.google.com/apis&quot;&gt;Google API console&lt;/a&gt;.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/google-api-console-credentials.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;the Google API console&lt;/code&gt;, select your game on the top dropdown, then go to &lt;code class=&quot;highlighter-rouge&quot;&gt;Credentials&lt;/code&gt; menu and edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;OAuth 2.0 Client IDs&lt;/code&gt;. Paste the fingertip on the field &lt;code class=&quot;highlighter-rouge&quot;&gt;SHA-1 certificate fingertip&lt;/code&gt; and save it.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/google-api-console-fingertip.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;remember to remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;SHA-1&lt;/code&gt; prefix, if you copied it together.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;testing-on-android&quot;&gt;Testing on Android&lt;/h2&gt;
&lt;p&gt;Now we have the basic setup done, we need to write some code to test it on an Android device:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/c8bff996de4473c201f010b17d42fd2b.js?file=AchievementsController.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Add the script above to a game object in the scene, build and run the game on a Android device.&lt;/p&gt;

&lt;p&gt;If everything was done correctly, you should see a screen like this:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/achievements-ui.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/conclusion.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;With this basic setup you can start to use the other features from Google Play Games Plugin for Unity plugin, as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;unlock/reveal/increment achievement&lt;/li&gt;
  &lt;li&gt;post score to leaderboard&lt;/li&gt;
  &lt;li&gt;cloud save read/write&lt;/li&gt;
  &lt;li&gt;show built-in achievement/leaderboards UI&lt;/li&gt;
  &lt;li&gt;events&lt;/li&gt;
  &lt;li&gt;video recording of gameplay&lt;/li&gt;
  &lt;li&gt;nearby connections&lt;/li&gt;
  &lt;li&gt;turn-based multiplayer&lt;/li&gt;
  &lt;li&gt;real-time multiplayer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more about then on &lt;a href=&quot;https://github.com/playgameservices/play-games-plugin-for-unity&quot;&gt;plugin GitHub page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;extra-tips-and-tricks&quot;&gt;Extra tips and tricks&lt;/h2&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/extra-tips-tricks.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;Below a list of tips and tricks for non-common scenarios.&lt;/p&gt;

&lt;h3 id=&quot;log-on-device&quot;&gt;Log on device&lt;/h3&gt;
&lt;p&gt;If anything goes wrong on Android device you will need to see it logs, to do so, you can use adb logcat:&lt;/p&gt;

&lt;p&gt;On MacOS, this shell do the job:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/Caskroom/android-platform-tools/29.0.5/platform-tools/

./adb logcat &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; Unity PackageManager dalvikvm DEBUG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;If you are using a different version of Android Platform Tools you will need to change the &lt;code class=&quot;highlighter-rouge&quot;&gt;29.0.5&lt;/code&gt; version.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;assembly-definition&quot;&gt;Assembly definition&lt;/h3&gt;
&lt;p&gt;If your game is using &lt;a href=&quot;https://docs.unity3d.com/Manual/ScriptCompilationAssemblyDefinitionFiles.html&quot;&gt;Assembly Definition&lt;/a&gt; you will need this step.&lt;/p&gt;

&lt;p&gt;The plugin code come without any assembly definition, so to use in our code you will need to create two assembly definitions to the plugin:&lt;/p&gt;

&lt;p&gt;Go to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/GooglePlayGames&lt;/code&gt; folder and create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;Assembly Definition&lt;/code&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;GooglePlayGames&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/assembly-definition-runtime.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Go to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/GooglePlayGames/Editor&lt;/code&gt; folder and create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;Assembly Definition&lt;/code&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;GooglePlayGames.Editor&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/assembly-definition-editor.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now, go to your game assembly definition and add a reference to the &lt;code class=&quot;highlighter-rouge&quot;&gt;GooglePlayGames&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;After this, if you receive some compilation error about &lt;code class=&quot;highlighter-rouge&quot;&gt;BasicApi.Nearby&lt;/code&gt; namespace, just close and open Unity again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;exception-class-not-found-comgoogleandroidgmsgamesgames&quot;&gt;Exception class not found com.google.android.gms.games.Games&lt;/h3&gt;
&lt;p&gt;If you see the the log message above on the adb logcat, you need to check on Unity &lt;code class=&quot;highlighter-rouge&quot;&gt;Player Settings / Publishing Settings&lt;/code&gt; if the minify settings are set up correctly as describe here: &lt;a href=&quot;https://github.com/playgameservices/play-games-plugin-for-unity/blob/master/README.md#play-games-services-proguard-configuration&quot;&gt;Play Games Services Proguard configuration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>unitytips&colon; String interpolation</title>
   <link href="//unitytips-string-interpolation/"/>
   <updated>2019-09-03T00:00:00-03:00</updated>
   <id>//unitytips-string-interpolation</id>
   <content type="html">&lt;p&gt;Since C# 6.0 you can use &lt;a href=&quot;https://docs.microsoft.com/pt-br/dotnet/csharp/language-reference/tokens/interpolated&quot;&gt;String interpolation&lt;/a&gt; to make code more readable:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/09/03/unitytips-string-interpolation/string-interpolation.gif &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;The sample lines will result in the same string&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The $ special character identifies a string literal as an interpolated string.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;String interpolation provides a more readable and convenient syntax to create formatted strings than a string composite formatting feature.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>unitytips&colon; Expression body definition</title>
   <link href="//unitytips-expression-body-definition/"/>
   <updated>2019-08-27T00:00:00-03:00</updated>
   <id>//unitytips-expression-body-definition</id>
   <content type="html">&lt;p&gt;When you have a single line method, you can use &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-operator#expression-body-definition&quot;&gt;expression body definition&lt;/a&gt; do simplify and reduce the lines of code:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/08/27/unitytips-expression-body-definition/expression-body-definition-methods.gif &quot; /&gt;
      &lt;/center&gt;

&lt;blockquote&gt;
  &lt;p&gt;Expression body definitions for methods and read-only properties are supported starting with C# 6. Expression body definitions for constructors, finalizers, property accessors, and indexers are supported starting with C# 7.0.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So you can use the expression body definition for other members, like properties:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/08/27/unitytips-expression-body-definition/expression-body-definition-properties.gif &quot; /&gt;
      &lt;/center&gt;

</content>
 </entry>
 
 <entry>
   <title>Unity and Game Development links (Aug 5th 2019)</title>
   <link href="//unity-and-gamedev-links-aug-5th-2019/"/>
   <updated>2019-08-05T00:00:00-03:00</updated>
   <id>//unity-and-gamedev-links-aug-5th-2019</id>
   <content type="html">
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Phi Dinh&lt;/strong&gt; remembered a Twitter moment with tips and tutorials about the shaders used on Recompile. (&lt;a href=&quot;https://twitter.com/i/moments/1122251136239570947&quot;&gt;Recompile Unity Tips and Tutorials&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Thomas Krogh-Jacobsen&lt;/strong&gt; wrote a blog post about Unity 2019.2 release. This version has more than 170 new features. (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/30/heres-whats-in-the-brand-new-unity-2019-2&quot;&gt;Here’s what’s in the brand-new Unity 2019.2&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Screen.cutouts for iOS/Android, Burst Compiler updates, TypeCache API in Editor code, PhysX Cloth Solver update, DSPGraph audio mixing/rendering engine, Intel® VTune™ Amplifier support, IDE support moving to packages, .NET 4.x is now default and Incremental Garbage Collection.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made a video about Unity 2019.2 features too (&lt;a href=&quot;https://www.youtube.com/watch?v=qoERAtLGq-8&quot;&gt;Unity 2019.2 is now available!&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/qoERAtLGq-8 &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Andy Touch&lt;/strong&gt; created a Twitter thread about the different 2D Light Types available in Unity 2019.2 (&lt;a href=&quot;https://twitter.com/andytouch/status/1156204606562738176&quot;&gt;2D Light Types&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dilmer Valecillos&lt;/strong&gt; made a video showing how to use low polly assets for VR (&lt;a href=&quot;https://www.youtube.com/watch?v=4SVUeuV6TpU&quot;&gt;Unity3d Oculus Quest Development - Adding A Low Poly Asset for VR Usage from the Asset Store&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Alex Lindman&lt;/strong&gt; wrote a blog post on custom lighting in Shader Graph (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/31/custom-lighting-in-shader-graph-expanding-your-graphs-in-2019&quot;&gt;Custom Lighting in Shader Graph: Expanding your graphs in 2019&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;With the release of Unity Editor 2019.1, the Shader Graph package officially came out of preview! Now, in 2019.2, we’re bringing even more features and functionality to Shader Graph.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kenney&lt;/strong&gt; has an incredible collection of free game assets that any game developer can use (&lt;a href=&quot;https://kenney.nl/assets&quot;&gt;Kenney Assets&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;License: (CC0 1.0 Universal) You’re free to use these game assets in any project, personal or commercial. There’s no need to ask permission before using these. Giving attribution is not required, but is greatly appreciated!&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lindsay Cox&lt;/strong&gt; made a peformance test comparing single thead, TPL and C# Job System (&lt;a href=&quot;http://lindsaycox.co.uk/blog/unity/single-thread-vs-tasks-vs-unity-c-jobs-simple-performance-test/&quot;&gt;Single Thread Vs Tasks Vs Unity C# Jobs – Simple Performance Test&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;In conclusion then, based on the above tests, if you are going to crunch through work without the Burst Compiler, maybe look at using something like Tasks first before opting for Jobs. If you are going to use the Burst Compiler, use the Job System.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kristin Stock&lt;/strong&gt; made a video on procedurally generated low-poly planets (&lt;a href=&quot;https://www.youtube.com/watch?v=2FfzEdALOGQ&quot;&gt;Procedurally Generated Low-Poly Planets in Unity&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/2FfzEdALOGQ &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Eduardo Oriz and Mike Geig&lt;/strong&gt; wrote a blog post about how to set up your Unity project for retro 16-bit games (&lt;a href=&quot;https://blogs.unity3d.com/2019/08/02/2d-pixel-perfect-how-to-set-up-your-unity-project-for-retro-16-bit-games&quot;&gt;2D Pixel Perfect: How to set up your Unity project for retro 16-bit games&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;In our first 2D Pixel Perfect guide for retro games, we showed you how to set up the 2D Pixel Perfect tool and how 8-bit graphics were made back in the day. In this post, we fast-forward to the 16-bit era. With the help of Mega Cat Studios, you’ll learn how to create authentic art for Sega Genesis (or Mega Drive) and Super NES-style games using Unity settings, graphics structures, and color palettes&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unity&lt;/strong&gt; released the &lt;code class=&quot;highlighter-rouge&quot;&gt;ML-Agents Beta 0.9.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/Unity-Technologies/ml-agents/releases/tag/0.9.0&quot;&gt;ML-Agents Beta 0.9.0&lt;/a&gt;)
    &lt;blockquote&gt;
      &lt;p&gt;Generative Adversarial Imitation Learning, pre-training for the PPO trainer, training generalized reinforcement learning agents, options for Nature and ResNet CNN architectures.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity Toasty Notification</title>
   <link href="//unity-toasty-notification/"/>
   <updated>2019-07-30T00:00:00-03:00</updated>
   <id>//unity-toasty-notification</id>
   <content type="html">&lt;p&gt;Last saturday I created the &lt;a href=&quot;https://github.com/giacomelli/Giacomelli.Unity.ToastyNotification&quot;&gt;ToastyNotification&lt;/a&gt; package, a fun editor log interceptor that play Mortal Kombat’s Toasty easter-egg every time an error is logged.&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/wwhz2wPN_wU &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;
&lt;p&gt;Just install the &lt;code class=&quot;highlighter-rouge&quot;&gt;ToastyNotification.package&lt;/code&gt; from the repository &lt;a href=&quot;https://github.com/giacomelli/Giacomelli.Unity.ToastyNotification/releases&quot;&gt;release page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now every time your game raise an error on Unity’s editor console log, the Toasty Notifcation will warning you 😉!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity and Game Development links (July 29th 2019)</title>
   <link href="//unity-and-gamedev-links-july-29th-2019/"/>
   <updated>2019-07-29T00:00:00-03:00</updated>
   <id>//unity-and-gamedev-links-july-29th-2019</id>
   <content type="html">
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Kristin Stock&lt;/strong&gt; published an amazing video about SPH (Smoothed Particle Hydrodynamics) in Unity. (&lt;a href=&quot;https://www.youtube.com/watch?v=NJBz8rMJ0ZU&quot;&gt;Fluid Simulation / Smoothed Particle Hydrodynamics in Unity&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/NJBz8rMJ0ZU &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SIGGRAPH 2019&lt;/strong&gt; is taking place in Los Angeles, between July 28 and August 1. Unity has made a page where you can see the Unity’s  presentations calendar (&lt;a href=&quot;https://unity.com/events/siggraph-2019&quot;&gt;Unity at SIGGRAPH 2019&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kin&lt;/strong&gt; is a currency for the digital world that just now caught my attention. There is an SDK for Unity. They are posing a challenge for Unity developers, the deadline is December 30, 2019 (&lt;a href=&quot;https://kin.org/developers/unityapply/gaming-challenge/&quot;&gt;Kin Gaming Challenge&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Kin enables the free and instant transfer of value between users, no matter how small the amount. This lets users give something more meaningful than a like, making your app even more fun and engaging.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lasse Jon Fuglsang Pedersen and Robert Cupisz&lt;/strong&gt; in the making of The Heretic, a real-time short film made with Unity. (&lt;a href=&quot;https://www.youtube.com/watch?v=5H9Jo2qjJXs&quot;&gt;Lasse Jon Fuglsang Pedersen, Robert Cupisz - Making of The Heretic&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/5H9Jo2qjJXs &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made two videos, one showing his top 5 assets for Unity in 2019 (&lt;a href=&quot;https://www.youtube.com/watch?v=s-4s9KhO_D0&quot;&gt;5 AWESOME ASSETS FOR UNITY 2019!&lt;/a&gt;) and a second one about the new Multiplayer system that Unity is working on (&lt;a href=&quot;https://www.youtube.com/watch?v=n3kcbUBuPpk&quot;&gt;NEW MULTIPLAYER in Unity 2019 – Connected Games (Overview)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tyler Hurd&lt;/strong&gt; presented to the world a tool that him have been working: Actuator leverages real-time physics and tracked VR devices for rigging, animating and puppeteering. (&lt;a href=&quot;http://tylerhurd.com/projects/actuator/&quot;&gt;Actuator)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/moYfppZzf2c &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

</content>
 </entry>
 
 <entry>
   <title>unitytips&colon; Scene Preview Window</title>
   <link href="//unitytips-scene-preview-window/"/>
   <updated>2019-07-23T00:00:00-03:00</updated>
   <id>//unitytips-scene-preview-window</id>
   <content type="html">&lt;p&gt;I created this window that extends the Unity 3D editor so you can preview the scenes by selecting them in the project window.&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/eh8nqfDCUVo &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt;
&lt;p&gt;As can be seen from the video above the extension can be used in two ways after adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene Preview&lt;/code&gt; window to the editor (via the&lt;code class=&quot;highlighter-rouge&quot;&gt; Window / Scene Preview&lt;/code&gt; menu):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Selects &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene&lt;/code&gt; and clicking the &lt;code class=&quot;highlighter-rouge&quot;&gt;Capture screenshot&lt;/code&gt; button in both edit mode and play mode.&lt;/li&gt;
  &lt;li&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene&lt;/code&gt; in play mode and if there is still no preview screenshot for the scene, a screenshot will be taken automatically after 10 seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Below you can see only the code of &lt;code class=&quot;highlighter-rouge&quot;&gt;ScenePreviewEditor.cs&lt;/code&gt;. There are 3 more files for this extension.&lt;/p&gt;

&lt;p&gt;Download the full &lt;a href=&quot;https://gist.github.com/giacomelli/ad9d4dcdb702d2d1edf0663628ca9608&quot;&gt;gist&lt;/a&gt; or use the &lt;a href=&quot;/unitytips-gist-importer&quot;&gt;Gist Importer&lt;/a&gt; to import the complete &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene Preview Window&lt;/code&gt; for your project.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ad9d4dcdb702d2d1edf0663628ca9608.js?file=ScenePreviewWindow.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Remember that you need to save the above .cs files inside any &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder&lt;/p&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity and Game Development links (July 22th 2019)</title>
   <link href="//unity-and-gamedev-links-july-22th-2019/"/>
   <updated>2019-07-22T00:00:00-03:00</updated>
   <id>//unity-and-gamedev-links-july-22th-2019</id>
   <content type="html">
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Stephen Palmer&lt;/strong&gt; presented the preview of Addressables, the Unity new system for editor and runtime asset management. (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/15/addressable-asset-system&quot;&gt;Addressable Asset System&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;What we found when talking to developers about their experience using Asset Bundles was that almost everyone doing so successfully were more or less writing the same high level systems a thousand slightly different ways. Addressables was born out of this obvious need for a framework to solve a set of common problems related to addressing, building, and loading assets.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cyan&lt;/strong&gt; made a blog post about Voronoi noise, a type of noise based on cells,  and shaders (&lt;a href=&quot;https://cyangamedev.wordpress.com/2019/07/16/voronoi/&quot;&gt;Voronoi&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kat Woolley&lt;/strong&gt; introduced the Creator Kits, a beginners kit to learn Unity basics without writing code. (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/17/creator-kits-get-creating-quickly&quot;&gt;Creator Kits – Get creating quickly&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;We’ve produced three kits: A puzzle game, an FPS and an RPG. Get a brief introduction to each game genre and learn the basics of Unity without writing code. The kits offer beginners a good way to create your own game in under an hour before embarking on something with a broader scope like the Game Kits.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unity&lt;/strong&gt; made a case study about Playkot, the creators of Age Of Magic (&lt;a href=&quot;https://unity.com/case-study/playkot-age-of-magic&quot;&gt;Playkot – A Unity developer case study&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;How do a businessman and a software developer working at an improvised kitchen table in St. Petersburg, Russia go on to produce sophisticated social games and mobile RPGs with some of the best graphics in the industry? Meet Sasha Pavlov and Oleg Sysoev, who started Playkot Games in 2009. Since then, they’ve grown their team to 150+ by carefully combining the right people, adopting Unity, and implementing the right strategies to capture significant market share around the world.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Anna Lee&lt;/strong&gt; wrote a blog post on the series &lt;code class=&quot;highlighter-rouge&quot;&gt;Faces of Unity&lt;/code&gt;, now presenting Dave Hunt, Lead Technical Artist in Copenhagen (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/19/faces-of-unity-dave-hunt&quot;&gt;Faces of Unity – Dave Hunt)&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Learn more about Dave as he shares about his career journey and work-life balance as a parent here at Unity!&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Brackeys&lt;/strong&gt; published a video about learnings in 10 years of game development! (&lt;a href=&quot;https://youtu.be/T18X1HuawRc&quot;&gt;What I learned after 10 Years of Game Development!&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made a video showing how to make explosions and shockwave effects in Unity (&lt;a href=&quot;https://youtu.be/u7lwL7ubwKA&quot;&gt;SHOCKWAVE &amp;amp; EXPLOSION IN UNITY 2019! (Tutorial)&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>unitytips&colon; Hierarchy Window GameObject Icon</title>
   <link href="//unitytips-hierarchy-window-gameobject-icon/"/>
   <updated>2019-07-16T00:00:00-03:00</updated>
   <id>//unitytips-hierarchy-window-gameobject-icon</id>
   <content type="html">&lt;p&gt;You can show the game objects icons in hierarchy window using &lt;code class=&quot;highlighter-rouge&quot;&gt;EditorGUIUtility.ObjectContent&lt;/code&gt;&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/fwtQ51ybHpc &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/a73c947508ee0b32eef7c422620ec6b6.js?file=HierarchyWindowGameObjectIcon.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;p&gt;The icons used in the video are &lt;a href=&quot;https://fontawesome.com/icons&quot;&gt;Font Awesome&lt;/a&gt; icons and I used &lt;a href=&quot;http://fa2png.io/&quot;&gt;fa2png.io&lt;/a&gt; to convert them to .png.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Remember that you need to save the above .cs inside any &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder&lt;/p&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity and Game Development links (July 15th 2019)</title>
   <link href="//unity-and-gamedev-links-july-15th-2019/"/>
   <updated>2019-07-15T00:00:00-03:00</updated>
   <id>//unity-and-gamedev-links-july-15th-2019</id>
   <content type="html">
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Alexander Ameye&lt;/strong&gt; made a tutorial about edge detection shaders with Shader Graph and how to use some Lightweight Rendering Pipeline customization to generate DepthNormals (&lt;a href=&quot;https://alexanderameye.github.io/edgedetection&quot;&gt;Edge Detection Shader&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cyan&lt;/strong&gt; made a blog post about Render Textures and how to read them  in a C# script (&lt;a href=&quot;https://cyangamedev.wordpress.com/2019/07/08/render-textures/&quot;&gt;Render Textures&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Render Textures are stored and handled on the GPU, which means we can’t access the data from them in a C# script which runs on the CPU – and you shouldn’t really need to for most effects. However, I wanted my player to be able to interact with water which was based on a Render Texture and only spawn particles if the player was in the water, along with some other effects.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Frank Manley&lt;/strong&gt; wrote about the Unity Hackweek 2019 (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/08/unity-hackweek-2019-tackling-hard-problems-building-team-skills&quot;&gt;Unity Hackweek 2019: Tackling hard problems, building team skills&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;What happens when you put 700+ people from Unity and our ecosystem in a secluded location once a year and tell them to solve hard tech, coding, and process problems? Their instructions? Unleash your creativity, collaborate like crazy, and embrace diverse perspectives.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tracy Joseph and Brittany Edmond,&lt;/strong&gt; wrote a blog post about their experience on Cannes Lions 2019 (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/09/cannes-lions-2019-celebrating-creativity-innovation-storytelling&quot;&gt;Cannes Lions 2019: Celebrating creativity, innovation &amp;amp; storytelling&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;This year at the Cannes Lions International Festival of Creativity, Unity showed up as the leading real-time 3D creation platform.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Garrexus&lt;/strong&gt; made a breakdown on the Screen space Cosmic shader (&lt;a href=&quot;https://realtimevfx.com/t/screen-space-cosmic-shader-breakdown-unity-ase-shaders-textures-included/9753&quot;&gt;Screen space Cosmic shader breakdown (Unity/ASE, Shaders/Textures included)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Alexander Ameye&lt;/strong&gt; again, now with a tutorial about collision effect (&lt;a href=&quot;https://alexanderameye.github.io/collision.html&quot;&gt;Collision Effect&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tenzin W. and Eduardo Oriz,&lt;/strong&gt; wrote about the results of the latest Asset Store challenge (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/11/the-winners-inside-the-vault-3d-environment-art-contest&quot;&gt;The Winners! Inside the Vault: 3D Environment Art Contest&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;A number of judges evaluated all of the impressive submissions to pick the winners of the latest Asset Store challenge: Use Substance Painter to texture stunning assets that expand the futuristic world of Buried Memories: Yggdrasil.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Anis Benyoub&lt;/strong&gt; made a speech about ray tracing hardware acceleration (&lt;a href=&quot;https://www.youtube.com/watch?v=wbuvrAdNtmQ&quot;&gt;Anis Benyoub - Leveraging Ray Tracing Hardware Acceleration In The Unity Game Engine&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Ray tracing hardware acceleration (RTX) is a newly available feature that allows graphics developers to increase their image quality. While solving complex problems, properly integrating this new set of APIs (DXR and Vulkan ray tracing) in a game engine is tricky, especially so when the engine supports anything from mobile to virtual production.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Brackeys&lt;/strong&gt; published a video about gamepad input (&lt;a href=&quot;https://www.youtube.com/watch?v=p-3S73MaDP8&quot;&gt;CONTROLLER INPUT in Unity!&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made a video showing how to make terrains (&lt;a href=&quot;https://www.youtube.com/watch?v=2Vvwjfp-hg8&quot;&gt;How to make Terrains with Unity 2019! (Tutorial)&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>unitytips&colon; Hierarchy Window Layer Info</title>
   <link href="//unitytips-hierarchy-window-layer-info/"/>
   <updated>2019-07-09T00:00:00-03:00</updated>
   <id>//unitytips-hierarchy-window-layer-info</id>
   <content type="html">&lt;p&gt;You can create a visual layer info to any component on your hierarchy window using &lt;code class=&quot;highlighter-rouge&quot;&gt;EditorApplication.hierarchyWindowItemOnGUI&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/JxvOshwNdfE &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/096005d0d0df79b94321f950138220a3.js?file=HierarchyWindowLayerInfo.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity and Game Development links (July 8th 2019)</title>
   <link href="//unity-and-gamedev-links-july-8th-2019/"/>
   <updated>2019-07-08T00:00:00-03:00</updated>
   <id>//unity-and-gamedev-links-july-8th-2019</id>
   <content type="html">
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; released a YouTube video about the new Unity Terrain Tools package (&lt;a href=&quot;https://www.youtube.com/watch?v=aExdxF4OKBo&quot;&gt;Build Beautiful Terrains with Unity 2019! – New Terrain Tools Package&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stacey Haffner&lt;/strong&gt; made a blog post about the new experience for Collaborate that they are designing, like new UI and Git command-line support (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/01/collaborate-developer-diary-1-exploring-the-new-design&quot;&gt;Collaborate Developer Diary #1: Exploring the New Design&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Based on a set of guiding principles focused on delivering value to teams with diverse skill sets, we are designing a brand new experience for Collaborate.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Matthew Crosby&lt;/strong&gt; released the Animal-AI Olympics, a AI competition with $32,000 in prizes. (&lt;a href=&quot;https://www.mdcrosby.com/blog/animalailaunch.html&quot;&gt;Animal-AI Olympics now released into the wild!&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;The Animal-AI Olympics is an AI competition with tests inspired by animal cognition. Participants are given a small environment with just seven different classes of objects that can be placed inside. In each test, the agent needs to retrieve the food in the environment, but to do so there are obstacles to overcome, ramps to climb, boxes to push, and areas that must be avoided.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unity&lt;/strong&gt; published the IAP Playbook: 12 strategies to help you monetize your game (&lt;a href=&quot;https://create.unity3d.com/iap-playbook&quot;&gt;The IAP playbook&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;In-app purchases are an important part of your monetization strategy, but implementing them correctly can be challenging. Understanding how to create, surface, and optimize them without disrupting the game experience takes hard work.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; published a YouTube video about how to make NPCs for your games (&lt;a href=&quot;https://www.youtube.com/watch?v=FRFjggLMXFU&quot;&gt;How to Make AWESOME NPCs for Your Game!&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Brackeys&lt;/strong&gt; made a video about how to add physics to ragdolls in Unity (&lt;a href=&quot;https://www.youtube.com/watch?v=DInV-jHm9rk&quot;&gt;RAGDOLL PHYSICS in Unity!&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Pierre Bosset&lt;/strong&gt; interviewed &lt;strong&gt;Mirko Vescio&lt;/strong&gt; about how to use Substance and Unity combined for realistic architectural visualization  (&lt;a href=&quot;https://www.substance3d.com/blog/creating-realistic-archviz-experiences-oneiros-using-unity&quot;&gt;Creating Realistic Archviz Experiences by Oneiros using Unity&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;It is important not to forget that one advantage of using Unity in architectural visualization is that you can get different types of output from the same scene. For example, it is possible to make a video in cinematic mode, as well as in virtual reality mode.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Alexandre Mutel&lt;/strong&gt; released the the first preview version of &lt;code class=&quot;highlighter-rouge&quot;&gt;UnityNuGet&lt;/code&gt; providing a service to install NuGet packages into an Unity project via the Unity Package Manager (&lt;a href=&quot;https://github.com/xoofx/UnityNuGet&quot;&gt;UnityNuGet&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made another video, this time about realistic lighting in Unity (&lt;a href=&quot;https://www.youtube.com/watch?v=zmF29YGEMUU&quot;&gt;REALISTIC LIGHTING in Unity! (Tutorial)&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>unitytips Museum</title>
   <link href="//unitytips-museum/"/>
   <updated>2019-07-02T00:00:00-03:00</updated>
   <id>//unitytips-museum</id>
   <content type="html">&lt;p&gt;I &lt;a href=&quot;https://twitter.com/ogiacomelli/status/1144379461317648384&quot;&gt;recently&lt;/a&gt; started studying &lt;a href=&quot;https://dotnet.microsoft.com/apps/aspnet/web-apps/client&quot;&gt;Blazor&lt;/a&gt; and last weekend I created this simple app that I called: &lt;code class=&quot;highlighter-rouge&quot;&gt;#unitytips Museum&lt;/code&gt;, a collection of best #unitytips.&lt;/p&gt;

&lt;p&gt;You can access it directly in my site, in this url: &lt;a href=&quot;http://diegogiacomelli.com.br/apps/unitytips-museum&quot;&gt;http://diegogiacomelli.com.br/apps/unitytips-museum&lt;/a&gt;&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/B9eTNZWhojI &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;the-unitytips-collection&quot;&gt;The #unitytips collection&lt;/h1&gt;
&lt;p&gt;Every week all #unitytips retweeted by &lt;a href=&quot;https://twitter.com/unity3d&quot;&gt;@unity3d&lt;/a&gt; will be included to the collection.&lt;/p&gt;

&lt;p&gt;If you know a really good #unitytips (at least 50 retweets) that should be added to the collection, please follow one of options above:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Contact me on Twitter &lt;a href=&quot;https://twitter.com/ogiacomelli&quot;&gt;@ogiacomelli&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/giacomelli/unitytips-museum&quot;&gt;Fork it on GitHub&lt;/a&gt;, add the #unitytips to the wwwroot/data/tips.json file and create a pull-request.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;about-blazor&quot;&gt;About Blazor&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Blazor can run your client-side C# code directly in the browser, using WebAssembly. Because it’s real .NET running on WebAssembly, you can re-use code and libraries from server-side parts of your application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a future post I will discuss what I learned about Blazor while developing the #unitytips Museum, but I can give a spoiler: I really liked it!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity and Game Development links (July 1st 2019)</title>
   <link href="//unity-and-gamedev-links-july-1st-2019/"/>
   <updated>2019-07-01T00:00:00-03:00</updated>
   <id>//unity-and-gamedev-links-july-1st-2019</id>
   <content type="html">
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Unity&lt;/strong&gt; released a YouTube tutorial about how to create a portal effect in Lightweight Render Pipeline with Shader Graph (&lt;a href=&quot;https://www.youtube.com/watch?v=TkzASwVgnj8&quot;&gt;Making Portals with Shader Graph in Unity! (Tutorial)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dilmer Valecillos&lt;/strong&gt; posted a video on augmented reality while implementing a dragging feature with ray-casting (&lt;a href=&quot;https://www.youtube.com/watch?v=nBftG-gXUE8&quot;&gt;AR Foundation with Unity3d and Adding Dragging Functionality with AR Raycast and Physics Raycast&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Felipe Lira&lt;/strong&gt; created a GitHub repository with a bare bones Scriptable Render Pipeline. (&lt;a href=&quot;https://github.com/phi-lira/HelloSRP&quot;&gt;HelloSRP&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Bare Bones Scriptable Render Pipeline. Use it as a base to create your own.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sebastian Lague&lt;/strong&gt; made some updates to his path creation tool (&lt;a href=&quot;https://github.com/SebLague/Path-Creator&quot;&gt;Bézier Path Creator&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;An intuitive and lightweight editor for quickly creating smooth paths in the editor.
You can easily make objects move along these paths, or use them as a guide for spawning objects and generating meshes.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Unity&lt;/strong&gt;, started its annual survey asking for community feedback (&lt;a href=&quot;https://on.unity.com/2xdSRmX&quot;&gt;survey&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; published a YouTube video showing what he learned after making more than 100 game levels (&lt;a href=&quot;https://www.youtube.com/watch?v=WPimiBP8d6o&quot;&gt;What I Learned after Making 100+ GAME LEVELS! (Unity Level Design)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Nichole Wong&lt;/strong&gt; wrote about the new &lt;code class=&quot;highlighter-rouge&quot;&gt;Unity Learn Premium&lt;/code&gt; (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/27/introducing-unity-learn-premium/&quot;&gt;Introducing Unity Learn Premium: Get direct guidance from experts&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;We’ve heard your requests for more advanced and in-depth content, and resources for specific industries like automotive, architecture, or media and entertainment. And we’ve also heard that you want access to experts who can give you immediate guidance and feedback on specific challenges or questions&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Eduardo Oriz and Alitt Khaliq&lt;/strong&gt; made a post showing the behind the scenes and dive further into the creative process behind Buried Memories Volume 2: Serekh (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/28/the-creative-process-behind-serekh/&quot;&gt;The creative process behind Serekh&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Developing a strong game, large or small, depends on having a dedicated team of skilled and specialized people who share a vision and care deeply about what they are making. The development of Serekh was a combined effort by Edvige Faini, the Concept Artist, and the Unity Icon Collective. Some of the most significant challenges on this project were conceptual rather than technical.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; again, with a video on tips, tricks, and list of features in Unity for making 2D games (&lt;a href=&quot;https://www.youtube.com/watch?v=-MuWAydTjY0&quot;&gt;How to make 2D Games with Unity 2019!&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Starting an Unity3D project with GeneticSharp using dotnet new</title>
   <link href="//starting-an-unity3d-project-with-geneticsharp-using-dotnet-new/"/>
   <updated>2019-06-27T00:00:00-03:00</updated>
   <id>//starting-an-unity3d-project-with-geneticsharp-using-dotnet-new</id>
   <content type="html">&lt;p&gt;In this post I will show how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet new&lt;/code&gt; command to start an Unity3D project with GeneticSharp.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Sometime ago I created a NuGet package called &lt;a href=&quot;/dotnet-new-templates-for-GeneticSharp&quot;&gt;GeneticSharp.Templates&lt;/a&gt;, this package allows developers to install &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp&quot;&gt;GeneticSharp&lt;/a&gt; templates using the dotnet new command.&lt;/p&gt;

&lt;p&gt;Among the availables templates in &lt;code class=&quot;highlighter-rouge&quot;&gt;GeneticSharp.Templates&lt;/code&gt;, there is one specific to create an Unity3D project with GeneticSharp. Besides this, the project has a sample of Travelling Salesman Problem (TSP) using GeneticSharp and can be used as a scaffold to starting use genetic algorithms in your games.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;Create an Unity3D project using dotnet new is fast and simple, depending of your machine performance, you’ll have the sample running in less than a minute.&lt;/p&gt;

&lt;p&gt;Open a terminal/prompt and type:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; GeneticSharp.Templates
dotnet new GeneticSharpTspUnity3d &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; GeneticSharpSample
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;The argument &lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt; is the the output folder of the Unity3D project&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now you can open the &lt;code class=&quot;highlighter-rouge&quot;&gt;GeneticSharpSample&lt;/code&gt; in Unity3D editor.
Open the &lt;code class=&quot;highlighter-rouge&quot;&gt;MainScene&lt;/code&gt; scene and hit the play button, you should see something like this:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/06/27/starting-an-unity3d-project-with-geneticsharp-using-dotnet-new/geneticsharp-ts-template.gif &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Thats it, now you can use this sample to understand how to use GeneticSharp in your game.&lt;/p&gt;

&lt;p&gt;If you want more details about the code and the sample itself, please, take a look on this tutorial &lt;a href=&quot;/tsp-with-GeneticSharp-and-Unity3d/&quot;&gt;TSP with GeneticSharp and Unity3D&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you need an introduction to genetic algorithms, this tutorial could help you &lt;a href=&quot;/function-optimization-with-geneticsharp/&quot;&gt;Function optimization with GeneticSharp&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s evolve!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>unitytips&colon; Gist Importer</title>
   <link href="//unitytips-gist-importer/"/>
   <updated>2019-06-25T00:00:00-03:00</updated>
   <id>//unitytips-gist-importer</id>
   <content type="html">&lt;p&gt;Using the Gist below you can easily import other Gists to your Unity project just copying the URL from browser:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/YljjAkebxiE &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9a248eecf5c1ffc477b59524f63264d3.js&quot;&gt; &lt;/script&gt;

&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;All Gists are imported to folder &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/Gists&lt;/code&gt;&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity and Game Development links (June 24th 2019)</title>
   <link href="//unity-and-gamedev-links-june-24th-2019/"/>
   <updated>2019-06-24T00:00:00-03:00</updated>
   <id>//unity-and-gamedev-links-june-24th-2019</id>
   <content type="html">
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made a video about the Buried Memories Volume 2: Serekh (&lt;a href=&quot;https://www.youtube.com/watch?v=5CTAVFOrbsM&quot;&gt;Buried Memories: Serekh – New HDRP Asset Pack for Unity! (Overview)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jean-Christophe Cimetiere&lt;/strong&gt; wrote a post about how to use Unity as a library inside other apps (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/17/add-features-powered-by-unity-to-native-mobile-apps&quot;&gt;Add features powered by Unity to native mobile apps&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Unity 2019.3 will add support for using Unity as a library controlled by native Android/Java and iOS/Objective C apps so you can easily insert AR and other Unity features.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Egor Bogatov&lt;/strong&gt; created a GitHub repository with a sample Xamarin app using Unity as a library (&lt;a href=&quot;https://github.com/EgorBo/XamarinWithUnityApp&quot;&gt;XamarinWithUnityApp&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;You can now easily add a Unity scene (e.g. ARCore scene) to any native or Xamarin app via .aar file.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jacob Shriar&lt;/strong&gt; posted about a survey that Unity made with 1000 creatives within advertising and marketing about AR (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/18/creative-professionals-are-struggling-to-implement-augmented-reality&quot;&gt;Creative professionals are struggling to implement augmented reality&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;In anticipation for Cannes this year, we surveyed 1000 creatives within advertising and marketing to gauge a better understanding on their comfort level, technical competency, and enthusiasm towards AR, including what it means for the future of storytelling. And what we found was very telling&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Harry Alisavakis&lt;/strong&gt;, released another tutorial in his series &lt;code class=&quot;highlighter-rouge&quot;&gt;VFX Master Shader&lt;/code&gt; (&lt;a href=&quot;https://halisavakis.com/my-take-on-shaders-vfx-master-shader-part-ii/&quot;&gt;My take on shaders: VFX Master Shader (Part II)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Nick Davis&lt;/strong&gt; wrote about how automotive companies are leveraging real-time 3D to reduce costs and accelerate development (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/19/how-real-time-3d-is-changing-every-industry&quot;&gt;How real-time 3D is changing every industry&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Real-time 3D is changing everything, in much deeper ways than most people realize. Forged in gaming, this technology continues to transform the way games are created, operated and monetized. Its impact now also extends to industries of all kinds, from film to automotive.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Seth Barton&lt;/strong&gt; made a post about how HDRP is taking next-gen graphics to a new level (&lt;a href=&quot;https://www.mcvuk.com/in-the-pipeline-unitys-hdrp-brings-next-gen-graphics-to-the-worlds-most-used-game-engine/&quot;&gt;In the pipeline: Unity’s HDRP brings next-gen graphics to the world’s most-used game engine&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;What do System Shock 3, Oddworld: Soulstorm and Harold Halibut have in common? Well, all of these incredible-looking upcoming titles are built on Unity, and more specifically will utilise Unity’s upcoming High Definition Render Pipeline or HDRP for short.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Caitlin W and Macy Mills&lt;/strong&gt; wrote a post about the new Unity’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Verified Solutions Partners&lt;/code&gt; (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/20/unitys-new-partnerships-bring-verified-solutions-to-developers-across-industries&quot;&gt;Unity’s new partnerships bring verified solutions to developers across industries&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Verified Solutions Partners represent a collection of 3rd-party SDKs, plugins, editor applications, cloud services, and more that enable the success of your project while ensuring deeper technical alignment with partners’ products and services to ensure 0% developer downtime. Partners accepted into the program go through a verification process to ensure their SDK or software is optimized for the latest version of Unity.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Elena Nizhnik&lt;/strong&gt; released a new &lt;code class=&quot;highlighter-rouge&quot;&gt;Community Component&lt;/code&gt; post, highlighting some games, posts, videos and tools (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/22/community-component-audio-design-pixel-games-custom-tools-and-best-of-made-with-unity-on-youtube&quot;&gt;Community Component – audio design, pixel games, custom tools and Best of Made with Unity on YouTube&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; again, now with a timelapse level design video (&lt;a href=&quot;https://www.youtube.com/watch?v=f3vNNUC1tnE&quot;&gt;LEVEL DESIGN IN UNITY! - Village &amp;amp; Castle Scene (Timelapse)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Brackeys&lt;/strong&gt; made a video about the new Terrain System in Unity (&lt;a href=&quot;https://www.youtube.com/watch?v=MWQv2Bagwgk&quot;&gt;How to make Terrain in Unity!&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>unitytips&colon; Changing the style of the Hierarchy Window Group Header</title>
   <link href="//unitytips-changing-the-style-of-the-hierarchy-window-group-header/"/>
   <updated>2019-06-20T00:00:00-03:00</updated>
   <id>//unitytips-changing-the-style-of-the-hierarchy-window-group-header</id>
   <content type="html">&lt;p&gt;In my last &lt;a href=&quot;/tags/unitytips/&quot;&gt;#unitytips&lt;/a&gt; I demonstrated how you could create a visual header to any group of components on your hierarchy window using &lt;code class=&quot;highlighter-rouge&quot;&gt;EditorApplication.hierarchyWindowItemOnGUI&lt;/code&gt;. Now I’m improving it allowing you to &lt;strong&gt;customize its style&lt;/strong&gt;.&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/g2lq0lIJzh8 &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;To change the style, you just need to edit the values of the HierarchyWindowGroupHeaderSettings in the inspector&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/bb6a9932e5f49a072c57a7c17135bf6b.js?file=HierarchyWindowGroupHeader.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Remember that you need to save the above .cs inside any &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;It’s a good practice add the tag &lt;code class=&quot;highlighter-rouge&quot;&gt;EditorOnly&lt;/code&gt; to your group header game objects&lt;/p&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>unitytips&colon; Hierarchy Window Group Header</title>
   <link href="//unitytips-hierarchy-window-group-header/"/>
   <updated>2019-06-18T00:00:00-03:00</updated>
   <id>//unitytips-hierarchy-window-group-header</id>
   <content type="html">&lt;p&gt;You can create a visual header to any group of components on your hierarchy window using &lt;code class=&quot;highlighter-rouge&quot;&gt;EditorApplication.hierarchyWindowItemOnGUI&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/YS5H8Y2Ytww &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/35410d682e41a504c7869a464a96c30a.js?file=HierarchyWindowGroupHeader.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;Any GameObject with name that starts with “—” will be considered a group header&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;You can set tag of the headers game objects as &lt;code class=&quot;highlighter-rouge&quot;&gt;EditorOnly&lt;/code&gt; to avoid them on runtime&lt;/p&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity and Game Development links (June 17th 2019)</title>
   <link href="//unity-and-gamedev-links-june-17th-2019/"/>
   <updated>2019-06-17T00:00:00-03:00</updated>
   <id>//unity-and-gamedev-links-june-17th-2019</id>
   <content type="html">
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sebastian Lague&lt;/strong&gt; made an ecosystem simulation with foxes and rabbits in Unity3d (&lt;a href=&quot;https://www.youtube.com/watch?v=r_It_X7v-1E&quot;&gt;Coding Adventure: Simulating an Ecosystem&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Marius Horga&lt;/strong&gt; wrote an overview about Metal 3 (&lt;a href=&quot;http://metalkit.org/2019/06/10/introducing-metal-3.html&quot;&gt;Introducing Metal 3&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Metal 3 was announced last week at WWDC 2019. Apple presented it along with relevant numbers:&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;Metal can now make 100 times more draw calls than OpenGL.&lt;/li&gt;
        &lt;li&gt;Metal runs on roughly 1.4 billion devices currently.&lt;/li&gt;
        &lt;li&gt;Metal can drive up to 56 TFLOPS of single precision.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mike Wuetherick&lt;/strong&gt;, Head of Tech for Unity’s Innovation Group, posted about “Sherman”, the new short film made in real-time using Unity (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/11/introducing-sherman-part-1&quot;&gt;Introducing Sherman (Part 1) – a Unity project featuring Real time fur, HDRP and Visual FX Graph for animators&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Created by the Emmy-winning team that brought you Baymax Dreams, Sherman is a new real time Unity short that delivers the most advanced real time fur ever!&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Brandi House&lt;/strong&gt; posted a guidance to transition the games between UNet and the new connected games stack (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/13/navigating-unitys-multiplayer-netcode-transition&quot;&gt;Navigating Unity’s multiplayer Netcode transition&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;As many of you know, we put UNet into maintenance mode because we believe there is a better way forward with our new connected games stack&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;War Robots case study&lt;/strong&gt; shows how Pixonic used Unity to lift up their revenue from War Robots without negatively impacting user experience (&lt;a href=&quot;https://unity.com/case-study/pixonic-war-robots&quot;&gt;Pixonic - War Robots case study&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;How do you find new revenue opportunities in a free-to-play game that’s been going strong for over five years? Moscow-based Pixonic, a Top 100-grossing game developer in the CIS, has driven War Robots’ monthly players’ spending to over $5M.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Keijiro Takahashi&lt;/strong&gt;, an Unity evangelist, released the first version of &lt;code class=&quot;highlighter-rouge&quot;&gt;MidiAnimationTrack&lt;/code&gt; that imports .mid files into Unity Timeline. It allows creating musically synchronized animation (&lt;a href=&quot;https://github.com/keijiro/MidiAnimationTrack&quot;&gt;MIDI Animation Track&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Is a custom timeline/playables package that provides functionality to control object properties based on sequence data contained in a standard MIDI file&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made a new video about his 5 favorite assets from Unity Asset Store (&lt;a href=&quot;https://www.youtube.com/watch?v=LLlJzQNYsAI&quot;&gt;5 AMAZING ASSETS for Unity 2019&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Brackeys&lt;/strong&gt; released a video about new 2D renderer in Unity (&lt;a href=&quot;https://www.youtube.com/watch?v=nkgGyO9VG54&quot;&gt;2D Lights in Unity!&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>unitytips&colon; MenuItem "CONTEXT/component"</title>
   <link href="//unitytips-menuitem-context-component/"/>
   <updated>2019-06-11T00:00:00-03:00</updated>
   <id>//unitytips-menuitem-context-component</id>
   <content type="html">&lt;p&gt;You can create a context menu for any component using the &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;CONTEXT/&amp;lt;component&amp;gt;/&amp;lt;menu name&amp;gt;&quot;&lt;/code&gt; on a MenuItem attribute:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/ZCGsunoO-TA &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/3c05b37b9af2ec6cfef0db58a2e5e3a7.js?file=TransformContextMenu.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity and Game Development links (June 10th 2019)</title>
   <link href="//unity-and-gamedev-links-june-10th-2019/"/>
   <updated>2019-06-10T00:00:00-03:00</updated>
   <id>//unity-and-gamedev-links-june-10th-2019</id>
   <content type="html">
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Toulouse de Margerie&lt;/strong&gt; wrote a post about how Unity natively maintains frame rates an how to make Unity follow a precise frame rate (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/03/precise-framerates-in-unity/&quot;&gt;Precise frame rates in Unity&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Normally, out of the box, a Unity project will attempt to run your project as fast as possible. Frames will be rendered as quickly as they can while generally being limited by your display device’s refresh rate.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jean-Christophe Cimetiere&lt;/strong&gt;, Sr. Technical Product Manager for Mobile Plaftorms at Unity, made a forum post  about the first preview of the new Project Tiny that uses C# as the programming language (&lt;a href=&quot;https://forum.unity.com/threads/project-tiny-c-preview-available.688969/&quot;&gt;Project Tiny C# Preview available&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;We’ve been hard at work changing most of the underlying technology powering Project Tiny in response to your feedback, and in order to bring it closer to the Unity ecosystem. This preview is fully integrated with Unity’s Data-Oriented Tech Stack (DOTS) and sets up a foundation for bringing advanced features for both tiny and big use cases.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Claudia L.&lt;/strong&gt; posted about the Unity Asset Store partnership with Kochava to bring the Kochava SDK for free (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/04/bringing-the-power-of-marketing-data-to-indie-devs/&quot;&gt;Bringing the power of marketing data to indie devs&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jeff Campbell&lt;/strong&gt; wrote an article covering his experience of porting an existing game system to Unity’s DOTS (&lt;a href=&quot;https://www.jeffcampbellmakes.games/blog/2019/5/26/diving-in-headfirst-unitys-job-system-and-jtween&quot;&gt;Porting Existing Systems to Unity’s DOTS: JTween&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Profile early and often as a DOTS implementation develops.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Alexey Zakharov&lt;/strong&gt; wrote a forum post about the UnityEditor.TypeCache API available on Unity 2019.2 or later (&lt;a href=&quot;https://forum.unity.com/threads/unityeditor-typecache-api-for-fast-extraction-of-type-attributes-in-the-editor-tooling.687682&quot;&gt;UnityEditor.TypeCache API for fast extraction of type attributes in the Editor tooling&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;For 2019.2 we optimized and extended the native cache and exposed it as a public UnityEditor.TypeCache API. It can extract information very quickly, allowing iteration over the smaller number of types we are interested in (10–100). That significantly reduces the time required to fetch types by Editor tooling.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Harry Alisavakis&lt;/strong&gt; started a series of tutorials about shaders called &lt;code class=&quot;highlighter-rouge&quot;&gt;VFX Master Shader&lt;/code&gt; (&lt;a href=&quot;https://halisavakis.com/my-take-on-shaders-vfx-master-shader-part-i/&quot;&gt;My take on shaders: VFX Master Shader (Part I)&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;While I experimented with different VFX concepts, I noticed that I was using a bunch of common shader techniques to create new shaders again and again, and I thought to myself: “Why not have one shader to rule them all?”&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made a new video tutorial about the Terrain Tools Package preview  in Unity 2019.1 (&lt;a href=&quot;https://www.youtube.com/watch?v=tazRinr6nRg&quot;&gt;NEW TERRAIN TOOLS in Unity! (Tutorial)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Unity&lt;/strong&gt; published a video tutorial to show how to create a toon outiline effect using the new Scriptable Render pass feature (&lt;a href=&quot;https://www.youtube.com/watch?v=joG_tmXUX4M&quot;&gt;How to Make a Toon Outline Effect in Unity 2019 LWRP! (Tutorial)&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;William Todd Stinson&lt;/strong&gt; wrote a blog post about how to access ARKit 3 functionality with AR foundation 2.2 and Unity 2019.1 (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/06/ar-foundation-support-for-arkit-3&quot;&gt;AR Foundation support for ARKit 3&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Unity has been working closely with Apple throughout the development of ARKit 3, and we are excited to bring these new features to Unity developers.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Kristin Stock&lt;/strong&gt; made a video showing how to create a simple build system with a circular UI (&lt;a href=&quot;https://www.youtube.com/watch?v=tKmsMfoPTC0&quot;&gt;Building System and Circular UI in Unity&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sirawat Pitaksarit&lt;/strong&gt; wrote a article about Unity Timeline, Playables and the undocumented new feature &lt;code class=&quot;highlighter-rouge&quot;&gt;Marker&lt;/code&gt; (&lt;a href=&quot;https://gametorrahod.com/timeline-marker-and-everything-leading-up-to-it/&quot;&gt;Timeline marker and everything leading up to it&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;New in Unity 2019.1, you can now create a duration-less object on the timeline, the marker.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Eduardo Oriz and Alitt Khaliq&lt;/strong&gt; made a post about the high-end asset pack &lt;code class=&quot;highlighter-rouge&quot;&gt;Buried Memories Vollume 2: Sereckh&lt;/code&gt; (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/07/introducing-serekh-new-asset-pack-buried-memories-volume-2&quot;&gt;Introducing Serekh: New asset pack, Buried Memories Volume 2&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;The Unity Icon Collective strives to democratize high-end asset production. With Buried Memories, starting with Volume 1: Yggdrasil, we hope to inspire creators to extend their own universe but especially to guide aspiring artists and others to observe, analyze and learn from the techniques of industry veterans.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Easing2Curve&colon; An editor window to create animation curve from easing functions</title>
   <link href="//easing-2-curve-an-editor-window-to-create-animation-curve-from-easing-functions/"/>
   <updated>2019-06-07T00:00:00-03:00</updated>
   <id>//easing-2-curve-an-editor-window-to-create-animation-curve-from-easing-functions</id>
   <content type="html">&lt;p&gt;I’ve coded an &lt;a href=&quot;https://docs.unity3d.com/Manual/editor-EditorWindows.html&quot;&gt;EditorWindow&lt;/a&gt; to create an &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/AnimationCurve.html&quot;&gt;AnimationCurve&lt;/a&gt; using easing functions that define how much a value changes over time.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;There are many classic easing functions, such as: InQuad, OutElastic, InOutSin, and InOutBounce. All of these are functions that have a &lt;code class=&quot;highlighter-rouge&quot;&gt;time&lt;/code&gt; input parameter and a return value between 0 and 1.&lt;/p&gt;

&lt;p&gt;For example, the easing function &lt;code class=&quot;highlighter-rouge&quot;&gt;OutCirc&lt;/code&gt; is coded like:&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Easing2Curve&lt;/code&gt; editor window you can see 31 easing function availables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Linear&lt;/li&gt;
  &lt;li&gt;InQuad, OutQuad, InOutQuad&lt;/li&gt;
  &lt;li&gt;InCubic, OutCubic, InOutCubic&lt;/li&gt;
  &lt;li&gt;InQuart, OutQuart, InOutQuart&lt;/li&gt;
  &lt;li&gt;InQuint, OutQuint, InOutQuint&lt;/li&gt;
  &lt;li&gt;InElastic, OutElastic, InOutElastic&lt;/li&gt;
  &lt;li&gt;InSin, OutSin, InOutSin&lt;/li&gt;
  &lt;li&gt;InExpo, OutExpo, InOutExpo&lt;/li&gt;
  &lt;li&gt;InCirc, OutCirc, InOutCirc&lt;/li&gt;
  &lt;li&gt;InBack, OutBack, InOutBack&lt;/li&gt;
  &lt;li&gt;InBounce, OutBounce and InOutBounce.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, you can add new easing functions just implementing the &lt;code class=&quot;highlighter-rouge&quot;&gt;IEasing&lt;/code&gt; interface.&lt;/p&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;
&lt;p&gt;To setup the &lt;code class=&quot;highlighter-rouge&quot;&gt;Easing2Curve&lt;/code&gt; just download this &lt;a href=&quot;https://gist.github.com/giacomelli/7324d63679c11529e1710a5470d9ee7f&quot;&gt;gist&lt;/a&gt; and unzip it on an &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder inside your Unity project.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/7324d63679c11529e1710a5470d9ee7f.js?file=Easing2CurveEditorWindow.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;using&quot;&gt;Using&lt;/h2&gt;
&lt;p&gt;You can open the window through the context menu on any &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationCurve&lt;/code&gt; property on &lt;code class=&quot;highlighter-rouge&quot;&gt;Inspector&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the video below you can see how to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Easing2Curve&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/2W-g6-k74nc &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

</content>
 </entry>
 
 <entry>
   <title>Using a Sprite Mask to create a flashlight effect</title>
   <link href="//using-a-sprite-mask-to-create-a-flashlight-effect/"/>
   <updated>2019-06-04T00:00:00-03:00</updated>
   <id>//using-a-sprite-mask-to-create-a-flashlight-effect</id>
   <content type="html">&lt;p&gt;When I was reading about the &lt;a href=&quot;https://docs.unity3d.com/Manual/class-SpriteMask.html&quot;&gt;Sprite Mask&lt;/a&gt; on Unity Manual, I questioned my self &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;How long does it take to create a flashlight effect using the Sprite Mask?&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The answer is: &lt;code class=&quot;highlighter-rouge&quot;&gt;less than 2 minutes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can check this by watching the video tutorial that I made showing how to add the a flashlight effect to the &lt;a href=&quot;https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-roguelike-29825&quot;&gt;Unity 2D Roguelike sample project&lt;/a&gt;:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/EfXLi6AWc_4 &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

</content>
 </entry>
 
 <entry>
   <title>Unity and Game Development links (June 3th 2019)</title>
   <link href="//unity-and-gamedev-links-june-3th-2019/"/>
   <updated>2019-06-03T00:00:00-03:00</updated>
   <id>//unity-and-gamedev-links-june-3th-2019</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Nick Davis&lt;/strong&gt; wrote a post about how Unity recently teamed up with Autodesk and Texel Logic to create a mixed-reality experience to illustrate and understand the complex nature of airflow passing over and around an IndyCar (&lt;a href=&quot;https://blogs.unity3d.com/2019/05/24/simulating-high-speed-indycars-in-ar/&quot;&gt;Simulating high-speed IndyCars in AR&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sykoo&lt;/strong&gt;, online evangelist for Unity, published a video showing his techniques during the level design process (&lt;a href=&quot;https://www.youtube.com/watch?v=oKzX-wS4_so&quot;&gt;How I made a Village in Unity in 1 Hour!&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Joyce[MinionsArt]&lt;/strong&gt; released another shader tutorial on Twitter (&lt;a href=&quot;https://twitter.com/minionsart/status/1132593681452683264&quot;&gt;Using particle lifetime to create a fire system&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Keen Claassen&lt;/strong&gt; celebrated the enter of &lt;code class=&quot;highlighter-rouge&quot;&gt;Motion Matching for Unity&lt;/code&gt; on Asset Store (&lt;a href=&quot;https://www.youtube.com/watch?v=hiWvExOyBgQ&quot;&gt;Motion Matching for Unity (MxM) - Trailer&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;can produce highly fluid and responsive animations with the need for state machines or complex logic.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Chandra Foxglove&lt;/strong&gt; introduced the Terrain Tools package (preview) for Unity 2019.1 (&lt;a href=&quot;https://blogs.unity3d.com/2019/05/28/speed-up-your-work-with-the-new-terrain-tools-package&quot;&gt;Speed up your work with the new Terrain Tools Package&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;This package contains over 15 new sculpting tools, as well as a utility toolbox to streamline terrain workflow.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Making of The Heretic: Digital Humans and VFX Characters&lt;/strong&gt; is available through a &lt;a href=&quot;https://docs.google.com/presentation/d/1aiBXsNu-D9ZfpBNqcs08w7ToNJ2e7jgyoyfNUXSCWW8/edit#slide=id.g552bb7139f_6_1117&quot;&gt;Google Docs presentation&lt;/a&gt;.
    &lt;blockquote&gt;
      &lt;p&gt;Now the HD Render Pipeline and Post Processing are quite solid, and we were able to put much more effort into building on top of that foundation. Among other things, we put some effort into human faces and vfx-heavy characters.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The evangelist &lt;strong&gt;Keijiro Takahashi&lt;/strong&gt; released a GitHub repository with an example that shows how to connect RealSense depth camera to Unity VFX Graph (&lt;a href=&quot;https://github.com/keijiro/Rsvfx&quot;&gt;Rsvfx&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Martin Best&lt;/strong&gt; posted about the official Unity Editor for Linux (&lt;a href=&quot;&quot;&gt;Announcing the Unity Editor for Linux&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;We expect it to be fully supported by Unity 2019.3.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Anis Benyoub&lt;/strong&gt; wrote about &lt;a href=&quot;https://auzaiffe.files.wordpress.com/2019/05/digital-dragons-leveraging-ray-tracing-hardware-acceleration-in-unity.pdf&quot;&gt;Leveraging Ray Tracing
Hardware Acceleration
In Unity&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Elena Nizhnik&lt;/strong&gt; made a post listing the most outstanding #madewithunity projects from last days (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/01/community-component-soft-body-physics-shaders-that-deform-space-normans-island-and-our-steam-wishlist&quot;&gt;Community Component – Soft body physics, shaders that deform space, Norman’s Island and our Steam wishlist&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; again, now with a video tutorial about the new 2D lights in Unity  2019.2 (&lt;a href=&quot;https://www.youtube.com/watch?v=ZJvCphxCGJU&quot;&gt;NEW 2D LIGHTS IN UNITY 2019.2&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Using an AssetPostprocessor + EditorWindow to keep assets organized on Unity projects</title>
   <link href="//using-an-assetpostprocessor-editorwindow-to-keep-assets-organized-on-unity-projects/"/>
   <updated>2019-05-31T00:00:00-03:00</updated>
   <id>//using-an-assetpostprocessor-editorwindow-to-keep-assets-organized-on-unity-projects</id>
   <content type="html">&lt;p&gt;I created an AssetPostProcessor and an EditorWindow to validate if assets are in the right folder and help the Unity projects to keep organized.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;There are many ways to structure folders in a Unity project, but most common ones are cited by the Unity Learn tutorial: &lt;a href=&quot;https://unity3d.com/pt/learn/tutorials/topics/tips/large-project-organisation&quot;&gt;Large Project Organisation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To keep the project easy to navigate, avoid placing files in the root Assets folder. Use subfolders. How you organize those subfolders is generally decided by your projects but the two main ways to do it are:&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;A folder for each type of asset and subfolders in them per objects&lt;/strong&gt;, zones (For example Assets/Materials, Assets/Prefabs, with subfolders Assets/Material/Level1 or Assets/Prefabs/Enemies)&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;A folder per objects or zones&lt;/strong&gt; (Such as Assets/Level1/Enemies/Archer, Assets/Shared/UI, Assets/Forest/Trees) with all assets related to those in the folders (Assets/Forest/Trees/BigTree.fbx, Assets/Forest/Trees/Tree.mat, Assets/Forest/Trees/Tree_Bark.jpg).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With big teams or even with the small ones is easy that some assets will be placed in wrong folders. To help to identify and keep those projects folders organized I coded a couple of editor scripts that I called &lt;code class=&quot;highlighter-rouge&quot;&gt;Folder organizer&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Another advantage of keeping assets organized in their proper folders is that you can &lt;a href=&quot;https://docs.unity3d.com/Manual/DefaultPresetsByFolder.html&quot;&gt;apply defaults presets to assets by folder&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;
&lt;p&gt;To setup the &lt;code class=&quot;highlighter-rouge&quot;&gt;Folder organizer&lt;/code&gt; just download this &lt;a href=&quot;https://gist.github.com/giacomelli/2d561e29beadab641a4f8b56954f53f7&quot;&gt;gist&lt;/a&gt; and unzip it on an &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder inside your Unity project.&lt;/p&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;using&quot;&gt;Using&lt;/h2&gt;
&lt;p&gt;You can open the window through the menu &lt;code class=&quot;highlighter-rouge&quot;&gt;Window / Folder organizer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Just configure the folders to ignore, if should run the validation every time an asset is imported and defined a regular expression to find the assets and what is the expected folder.&lt;/p&gt;

&lt;p&gt;In the video below you can see in more details how to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Folder organizer&lt;/code&gt; to validate if your assets are in the right folders:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/GU6jWl6MpdM &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

</content>
 </entry>
 
 <entry>
   <title>Coding an EditorWindow to create default animations from sprites</title>
   <link href="//coding-an-editorwindow-to-create-default-animations-from-sprites/"/>
   <updated>2019-05-30T00:00:00-03:00</updated>
   <id>//coding-an-editorwindow-to-create-default-animations-from-sprites</id>
   <content type="html">&lt;p&gt;In this tutorial, we will learn how to coding an &lt;a href=&quot;https://docs.unity3d.com/Manual/editor-EditorWindows.html&quot;&gt;EditorWindow&lt;/a&gt; that creates &lt;a href=&quot;https://docs.unity3d.com/Manual/AnimationClips.html&quot;&gt;Animation Clips&lt;/a&gt; and &lt;a href=&quot;https://docs.unity3d.com/Manual/AnimatorOverrideController.html&quot;&gt;Animator Override Controller&lt;/a&gt; from &lt;a href=&quot;https://docs.unity3d.com/Manual/Sprites.html&quot;&gt;Sprites&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Create animation clips from sprites is quite a simple operation to perform on Unity:&lt;/p&gt;
&lt;center&gt;&lt;video width=&quot;640&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot;&gt;
          &lt;source src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/create-animation-clip-from-sprite.mp4 &quot; type=&quot;video/mp4&quot; /&gt;
          Your browser does not support the video tag.
       &lt;/video&gt;&lt;/center&gt;

&lt;p&gt;But in many cases, you need to repeat this operation over and over again to create other animations to the same character, like clips for idle, walk up, walk down and walk horizontal animations.&lt;/p&gt;

&lt;p&gt;When you need to this for only one character, there is no problem, but imagine you need to create the same 4 animation clip for dozens (maybe hundreds) of characters. Besides being a boring operation, you probably will make some mistake and creating some wrong clip. In cases like that, could be a good option to create your own EditorWindow to automate those operations.&lt;/p&gt;

&lt;h2 id=&quot;editorwindow&quot;&gt;EditorWindow&lt;/h2&gt;
&lt;p&gt;To start, let’s see what Unity Manual says about &lt;a href=&quot;https://docs.unity3d.com/Manual/editor-EditorWindows.html&quot;&gt;EditorWindow&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can create any number of custom windows in your app. These behave just like the Inspector, Scene or any other built-in ones. This is a great way to add a user interface to a sub-system for your game.&lt;/p&gt;

  &lt;p&gt;Making a custom Editor Window involves the following simple steps:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Create a script that derives from EditorWindow.&lt;/li&gt;
    &lt;li&gt;Use code to trigger the window to display itself.&lt;/li&gt;
    &lt;li&gt;Implement the GUI code for your tool.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;During this tutorial we will create a class called DefaultAnimationsEditorWindow that derives from EditorWindow, we will add a menu item to Unity Editor to allow call our EditorWindow and we will implement the GUI for the window.&lt;/p&gt;

&lt;p&gt;Furthermore, we will implement the code that allows us to create Animation Clips and Animation Override Controller from sprites.&lt;/p&gt;

&lt;p&gt;The idea behind DefaultAnimationsEditorWindow is that when you have a bunch o characters using the same kind of animations, they used the same structure of sprite sheets, so you can create the animations based on the sprites indexes on sprite sheet texture.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/similar-spritesheets.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;similar sprites sheets from Phantasy Star IV (Alys, Chaz and Demi). Sprites ripped by Ultimecia from &lt;a href=&quot;https://www.spriters-resource.com/genesis_32x_scd/ps4&quot;&gt;The Spriters Resource&lt;/a&gt;&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Starting with sprite to walk down and ending with the last sprite of walk horizontal, we have 9 sprites and in all sprite sheets the sprites indexes are the same:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/alys-walking-spritesheet.png &quot; /&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;Idle: index 1&lt;/li&gt;
  &lt;li&gt;Walk down: indexes 0, 1 and 2.&lt;/li&gt;
  &lt;li&gt;Walk up: indexes 3, 4 and 5.&lt;/li&gt;
  &lt;li&gt;Walk horizontal: indexes 6, 7 and 9.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;starter-project&quot;&gt;Starter project&lt;/h2&gt;
&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/project.png &quot; style=&quot;max-height:200px&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;All the source code and assets for this tutorial are available on this GitHub repository: &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites&quot;&gt;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites&lt;/a&gt;. To start the tutorial you need to fork, clone or download the repository.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;default-animations-editor-window-starter&lt;/code&gt; on Unity.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;This starter project has an initial setup and assets to allow us to focus on the learning about how to code the EditorWindow.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Open the scene &lt;code class=&quot;highlighter-rouge&quot;&gt;_Tutorial/Scenes/TutorialScene&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Play&lt;/code&gt; button. You should see a screen like this:&lt;/p&gt;

&lt;center&gt;&lt;video width=&quot;640&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot;&gt;
          &lt;source src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/starter-project-play-mode.mp4 &quot; type=&quot;video/mp4&quot; /&gt;
          Your browser does not support the video tag.
       &lt;/video&gt;&lt;/center&gt;

&lt;h2 id=&quot;the-editor-window-code-organization&quot;&gt;The editor window code organization&lt;/h2&gt;

&lt;p&gt;We will organize our DefaultAnimationsEditorWindow in 3 main classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DefaultAnimationsEditorWindow&lt;/strong&gt;: where is the menu and GUI for our editor window.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DefaultAnimationsSettings&lt;/strong&gt;: this is our &lt;a href=&quot;https://docs.unity3d.com/Manual/class-ScriptableObject.html&quot;&gt;ScriptableObject&lt;/a&gt; to save our settings defined on DefaultAnimationsEditorWindow.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DefaultAnimationsUtility&lt;/strong&gt;: here we will implement the code used by our DefaultAnimationsEditorWindow to perform an operation. Put the operation code in a separated class not bounded by the GUI allow us to use these operations in any other script. This way to work is similar to what Unity itself use in some editor operations, like: &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/AnimationUtility.html&quot;&gt;AnimationUtility&lt;/a&gt;, &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/PrefabUtility.html&quot;&gt;PrefabUtility&lt;/a&gt; and &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Sprites.SpriteUtility.html&quot;&gt;SpriteUtility&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Besides the above classes, there are some other extension method classes on the folder &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites/tree/master/default-animations-editor-window-complete/Assets/_Tutorial/Editor/DefaultAnimations/Extensions&quot;&gt;Extensions&lt;/a&gt; that are self-explanatory and I won’t talk in details, but you can check them and read their code documentation to a better understanding.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;defaultanimationseditorwindow&quot;&gt;DefaultAnimationsEditorWindow&lt;/h2&gt;
&lt;p&gt;In the code bellow, we define the menu for the window through the method &lt;code class=&quot;highlighter-rouge&quot;&gt;ShowWindow&lt;/code&gt; and the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;MenuItem&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/menu-item.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;Default Animations menu item&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;At the &lt;code class=&quot;highlighter-rouge&quot;&gt;OnEnable&lt;/code&gt; we read the settings from our ScriptableObject DefaultAnimationsSettings.&lt;/p&gt;

&lt;p&gt;The next 3 methods just draw the components to the editor window GUI.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/editor-window-empty.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;editor window&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;Open &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites/blob/master/default-animations-editor-window-complete/Assets/_Tutorial/Editor/DefaultAnimations/DefaultAnimationsEditorWindow.cs &quot;&gt;DefaultAnimationsEditorWindow.cs &lt;/a&gt;hosted with ❤ by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;defaultanimationssettings&quot;&gt;DefaultAnimationsSettings&lt;/h2&gt;
&lt;p&gt;There are few things to talk about this class because it is just an ordinary ScriptableObject with a couple of properties that will be serialized and used by the DefaultAnimationsUtility class, a singleton to make easier to access the settings, two methods to load/create the asset and a subclass to sprite mappings.&lt;/p&gt;

&lt;p&gt;The most important code of this class is the property &lt;code class=&quot;highlighter-rouge&quot;&gt;SpriteIndexes&lt;/code&gt; that figure out what are the sprite indexes from the sprite sheet that ClipToOverride is using.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;SpriteIndexes will be used by DefaultAnimationsUtility.CreateAnimationClips to know what sprites should be used to create the new animations based on the DefaultAnimationsSettings.AnimationsMapping.&lt;/p&gt;
&lt;/div&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;Open &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites/blob/master/default-animations-editor-window-complete/Assets/_Tutorial/Editor/DefaultAnimations/DefaultAnimationsSettings.cs &quot;&gt;DefaultAnimationsSettings.cs &lt;/a&gt;hosted with ❤ by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;defaultanimationsutility&quot;&gt;DefaultAnimationsUtility&lt;/h2&gt;
&lt;p&gt;In this class is where the heart of our editor window resides.&lt;/p&gt;

&lt;p&gt;There are 2 important methods here: CreateAnimationClips and CreateAnimatorOverride.&lt;/p&gt;

&lt;h3 id=&quot;createanimationclips&quot;&gt;CreateAnimationClips&lt;/h3&gt;
&lt;p&gt;It iterates through the &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationsMappings&lt;/code&gt; defined in the editor window (saved on DefaultAnimationsSettings.AnimationsMapping), for each mapping it will call the method &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateAnimationClip&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateAnimationClip&lt;/code&gt; creates a new &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationClip&lt;/code&gt; (or load if already exists one with the same name), copying the frame rate and wrap mode from the &lt;code class=&quot;highlighter-rouge&quot;&gt;ClipToOverride&lt;/code&gt; defined in the mapping. After, if wrap mode is a loop, it uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationUtility&lt;/code&gt; to set the loop time to the clip settings (through the extension methods).&lt;/p&gt;

&lt;p&gt;Now is the most tricky part of this class, we need to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;EditorCurveBinding&lt;/code&gt; for the sprite and get the &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectReferenceKeyframe&lt;/code&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;ClipToOverride&lt;/code&gt; and create new &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectReferenceKeyframe&lt;/code&gt; to our new keyframes (&lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationClipExtensions&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;createanimatoroverride&quot;&gt;CreateAnimatorOverride&lt;/h2&gt;
&lt;p&gt;In this method we create &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimatorOverrideController&lt;/code&gt; that will override each clip from the &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultAnimationsSettings.AnimatorController&lt;/code&gt; by the ClipToOverride of each mapping defined on &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultAnimationsSettings.AnimationsMapping&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;AnimatorOverrideControllerExtensions&lt;/code&gt;).&lt;/p&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;Open &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites/blob/master/default-animations-editor-window-complete/Assets/_Tutorial/Editor/DefaultAnimations/DefaultAnimationsUtility.cs &quot;&gt;DefaultAnimationsUtility.cs &lt;/a&gt;hosted with ❤ by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Copy &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites/tree/master/default-animations-editor-window-complete/Assets/_Tutorial/Editor&quot;&gt;this whole Editor folder&lt;/a&gt; to your &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/_Tutorial&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;this folder is available on your local clone of the repository inside the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;default-animations-editor-window-complete/Assets/_Tutorial&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Delete the DefaultAnimationsSettings scriptable object instance.&lt;/p&gt;

&lt;p&gt;Open the editor window on menu &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows / Default Animations&lt;/code&gt; and configure it as showing in the video below:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/5Hk8awWCtSs &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;creating-and-using-the-default-animations&quot;&gt;Creating and using the default animations&lt;/h2&gt;
&lt;p&gt;Drag all the sprite sheets (textures) from folder &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/_Tutorial/Sprites&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Spritesheets&lt;/code&gt; field and click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Create animations&lt;/code&gt; button:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/49KKfR081Po &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;challenge&quot;&gt;Challenge&lt;/h2&gt;
&lt;p&gt;Try to change de editor window to allow more the one set of default animations. One way to this is by creating another ScriptableObject to save the current selected &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultAnimationsSettings&lt;/code&gt; asset.&lt;/p&gt;

&lt;p&gt;If you have any doubt how to implement any part of this challenge, feel free to ask on this post comments or &lt;a href=&quot;about&quot;&gt;send me a message&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites&quot;&gt;tutorial repository&lt;/a&gt; has two main folders:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;default-animations-editor-window-starter&lt;/strong&gt;: the one you used to make this tutorial.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;default-animations-editor-window-complete&lt;/strong&gt;: the whole solution with all scripts and assets implemented. Use this one, in case you get stuck in any item on the challenge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this tutorial, we learned how to coding a custom editor window to create a set of default animation clips and animator override controller.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Sorting Layer Debugger for Unity</title>
   <link href="//a-sorting-layer-debugger-for-unity/"/>
   <updated>2019-05-28T00:00:00-03:00</updated>
   <id>//a-sorting-layer-debugger-for-unity</id>
   <content type="html">&lt;p&gt;While I was reading about &lt;a href=&quot;https://docs.unity3d.com/Manual/2DSorting.html&quot;&gt;2D Sorting&lt;/a&gt; and &lt;a href=&quot;https://docs.unity3d.com/Manual/class-TagManager.html#SortingLayers&quot;&gt;Sorting Layers&lt;/a&gt; on Unity Manual I came up with the idea of creating a custom editor window to see which sorting layer the sprites on the scene are using.&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/e_WaZrGMPdM &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;In the video above you can see the Sorting Layer Debugger been used in the &lt;a href=&quot;https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-platformer-11228&quot;&gt;Unity 2D Platformer&lt;/a&gt; sample project&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Just download the gist bellow to your Unity3D project and add it inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/141742c3175476f03ca2437c7b35fd88.js?file=SortingLayerDebugger.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;You can open the debugger window through the menu &lt;code class=&quot;highlighter-rouge&quot;&gt;Window / Sorting Layer Debugger&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The debugger can be enabled in the edit or the play mode and it will list the Sorting Layers and the number of game objects using each layer. You can hide/show the game objects of each layer by clicking on its check box.&lt;/p&gt;

&lt;p&gt;The name of Sorting Layer been used is showing in the top of each game object in the scene view.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/28/a-sorting-layer-debugger-for-unity/SortingLayerDebugger.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;Scene view with Sorting Layer Debugger enabled&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity and Game Development links (May 24th 2019)</title>
   <link href="//unity-and-gamedev-links-may-24th-2019/"/>
   <updated>2019-05-24T00:00:00-03:00</updated>
   <id>//unity-and-gamedev-links-may-24th-2019</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Kristin Stock&lt;/strong&gt; posted a video about how she is &lt;a href=&quot;https://www.youtube.com/watch?v=zBDrH3lg4YY&quot;&gt;procedurally generating cities using Subdivsion in Unity&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dave Hunt and Yang-Hai Eakes&lt;/strong&gt; made an &lt;a href=&quot;https://blogs.unity3d.com/2019/05/14/introducing-the-animation-rigging-preview-package-for-unity-2019-1/&quot;&gt;introduction for the Animation Rigging preview package for Unity 2019.1&lt;/a&gt;.
    &lt;blockquote&gt;
      &lt;p&gt;Set up procedural motion on animated skeletons at runtime. You can use a set of predefined animation constraints to manually build a control rig hierarchy for a character or develop your own custom constraints in C#.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Alexander Ameye&lt;/strong&gt; launched a &lt;a href=&quot;https://alexanderameye.github.io/&quot;&gt;site with many Unity tutorials&lt;/a&gt;, like &lt;code class=&quot;highlighter-rouge&quot;&gt;Water 1: Tessellated Plane&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Toon Shading&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Shahriar Shahrabi&lt;/strong&gt; made a post showing how use &lt;a href=&quot;https://medium.com/realities-io/making-the-inception-effect-in-unity-3d-with-few-lines-of-code-fb9667d4786f&quot;&gt;deformation matrices to achieve the &lt;code class=&quot;highlighter-rouge&quot;&gt;Inception effect&lt;/code&gt;&lt;/a&gt;.
    &lt;blockquote&gt;
      &lt;p&gt;Have you ever wondered how your brain would react if you bend the space around you in VR? Or change the field of view and do a vertigo? Well I did, so I started writing a series of shaders which deformed the space around me, using matrices and ended up with an Inception looking effect.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Steve Cavanagh and Lyndon Homewood&lt;/strong&gt; wrote a post about the &lt;a href=&quot;https://blogs.unity3d.com/2019/05/13/introducing-the-profile-analyzer/&quot;&gt;Unity Profile Analyzer (preview)&lt;/a&gt;.
    &lt;blockquote&gt;
      &lt;p&gt;Have you ever needed to compare the difference in performance between two versions of your project? See the impact of an asset or code change, optimization work, settings change or Unity version upgrade?&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Unity 2019.2 beta&lt;/strong&gt; released an &lt;a href=&quot;https://forum.unity.com/threads/experimental-2d-renderer-in-lwrp.683623&quot;&gt;experimental 2D Renderer in LWRP&lt;/a&gt; with 2D lights, Lit and Unlit Sprite Masternode in Shader Graph, and Pixel Perfect Camera.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Julien Blais&lt;/strong&gt; wrote a post about &lt;a href=&quot;https://blogs.unity3d.com/2019/05/21/how-to-use-timeline-signals&quot;&gt;new feature Signals&lt;/a&gt; added to Timeline in Unity 2019.1.
    &lt;blockquote&gt;
      &lt;p&gt;We’ve built Signals to establish a communication channel between Timeline and outside systems. But what does that mean? Why did we decide on this approach?&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity Avatar Mask and Animation Layers</title>
   <link href="//unity-avatar-mask-and-animation-layers/"/>
   <updated>2019-05-21T00:00:00-03:00</updated>
   <id>//unity-avatar-mask-and-animation-layers</id>
   <content type="html">&lt;p&gt;In this tutorial we will learn how to use &lt;a href=&quot;https://docs.unity3d.com/Manual/AnimationMaskOnImportedClips.html&quot;&gt;Avatar Mask&lt;/a&gt; and &lt;a href=&quot;https://docs.unity3d.com/Manual/AnimationLayers.html&quot;&gt;Animation Layers&lt;/a&gt; to combine multiple animations.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Imagine we imported an animated 3D model from Asset Store, in our sample, we will use the incredible robot from the free package &lt;a href=&quot;https://assetstore.unity.com/packages/3d/characters/humanoids/sci-fi-warrior-pbr-hp-106154&quot;&gt;Sci Fi Warrior PBR HP&lt;/a&gt; by &lt;a href=&quot;https://assetstore.unity.com/publishers/23554&quot;&gt;Dungeon Mason&lt;/a&gt;.
In this package, there are 10 animation clips:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/animation-clips.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;animation clips available on Sci Fi Warrior PBR HP&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;All those clips are animations for full body. So, when you play them:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Idle_GunMiddle&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/Idle_GunMiddle.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;the robot stands idle with the gun in the middle of his body&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WalkForward_Shoot&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/WalkForward_Shoot.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;the robot walk forward and shoot&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;externalref&quot;&gt;&lt;p&gt;You can see all the animations available on the Sci Fi Warrior PBR HP package in this video &lt;a href=&quot;https://www.youtube.com/watch?v=fNzBdYhm3Gk&quot;&gt;https://www.youtube.com/watch?v=fNzBdYhm3Gk&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;These are great animations, although if &lt;strong&gt;we want to make the robot stands idle, but instead of keeping the gun in the middle of his body, he aims the gun or shoot?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Or &lt;strong&gt;if we want that robot walk forward but holding the gun in the middle of his body?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Of course, we can ask to the artist to create all those animation combinations, but there is a smarter approach for this case…&lt;/p&gt;

&lt;h2 id=&quot;avatar-masks-and-animation-layers-goes-to-the-rescue&quot;&gt;Avatar Masks and Animation Layers goes to the rescue&lt;/h2&gt;
&lt;p&gt;To start, lets see what Unity Manual says about Avatar Masks and Animation Layers:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.unity3d.com/Manual/AnimationMaskOnImportedClips.html&quot;&gt;Avatar Masks&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Masking allows you to discard some of the animation data within a clip, &lt;strong&gt;allowing the clip to animate only parts of the object or character rather than the entire thing&lt;/strong&gt;. For example, if you had a character with a throwing animation. If you wanted to be able to &lt;strong&gt;use the throwing animation in conjunction with various other body movements such as running, crouching and jumping&lt;/strong&gt;, you could create a mask for the throwing animation limiting it to just the right arm, upper body and head. This portion of the animation can then be played in a layer over the top of the base running or jumping animations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.unity3d.com/Manual/AnimationLayers.html&quot;&gt;Animation Layers&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Unity uses Animation Layers for managing complex state machines for different body parts. An example of this is if you have a lower-body layer for walking-jumping, and an upper-body layer for throwing objects / shooting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By reading those two sections is quite clear that we need to use avatar masks and animation layers together to combine our animations of different body parts. So, in the next sections, I will demonstrate how to combine three animations (Idle_GunMiddle, WalkForward_Shoot, and Shoot_single) to make the robot shoot while stands idle and walk forward with a gun in middle body. After that, I will propose you a challenge for the other animations available.&lt;/p&gt;

&lt;h2 id=&quot;starter-project&quot;&gt;Starter project&lt;/h2&gt;
&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/project.png &quot; style=&quot;max-height:200px&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;All the source code and assets for this tutorial are available on this GitHub repository: &lt;a href=&quot;https://github.com/giacomelli/unity-avatar-mask-and-animation-layers&quot;&gt;https://github.com/giacomelli/unity-avatar-mask-and-animation-layers&lt;/a&gt;. To start this tutorial you need to fork, clone or download the repository.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/giacomelli/unity-avatar-mask-and-animation-layers.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;avatar-mask-starter&lt;/code&gt; on Unity.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;This starter project has an initial setup and assets to allow us to focus in the learning about Avatar Masks and Animations Layers.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Open the scene &lt;code class=&quot;highlighter-rouge&quot;&gt;_Tutorial/Scenes/TutorialScene&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;If you see a popup called &lt;code class=&quot;highlighter-rouge&quot;&gt;TMP importer&lt;/code&gt;, hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Import TPM Essentials&lt;/code&gt; button to import the TextMesh Pro’s assets.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Play&lt;/code&gt; button. You should see a screen like this:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/starter-project.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;Starter project running: just HUD&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-the-animation-controller&quot;&gt;Creating the Animation Controller&lt;/h2&gt;

&lt;p&gt;Create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;Animation Controller&lt;/code&gt; (menu &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/Create/Animation Controller&lt;/code&gt;) and open it:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/animator-window-empty.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;Animator window showing the animation controller created&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;All animation layers, nodes and transitions for this tutorial will be created inside this animation controller.&lt;/p&gt;

&lt;p&gt;In the hierarchy, select the SciFiWarriorHP and in the Animator component set the &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt; property to our Animation Controller.&lt;/p&gt;

&lt;h2 id=&quot;making-the-robot-walk-forward&quot;&gt;Making the robot walk forward&lt;/h2&gt;
&lt;p&gt;To get something running right now, we will make the robot walk forward when the button &lt;code class=&quot;highlighter-rouge&quot;&gt;WALK / FORWARD&lt;/code&gt; became checked.&lt;/p&gt;

&lt;p&gt;In the Animator opening with our Animation Controller drag the animation clip &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle_GunMiddle&lt;/code&gt; from folder &lt;code class=&quot;highlighter-rouge&quot;&gt;SciFiWarrior/Animations&lt;/code&gt;. Do the same with the clip &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward_Shoot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a &lt;a href=&quot;https://docs.unity3d.com/Manual/class-Transition.html&quot;&gt;transition&lt;/a&gt; (right click on the node and  &lt;code class=&quot;highlighter-rouge&quot;&gt;Make transition&lt;/code&gt;) from &lt;code class=&quot;highlighter-rouge&quot;&gt;Any state&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward_Shoot&lt;/code&gt; and create another transition from &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward_Shoot&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle_GunMiddle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we need to tell to the animation controller when it should activate the two transitions, for this we will create a bool &lt;a href=&quot;https://docs.unity3d.com/Manual/AnimationParameters.html&quot;&gt;animation parameter&lt;/a&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/animation-parameter.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;WalkForward parameter created&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We want to activate the transition from &lt;code class=&quot;highlighter-rouge&quot;&gt;Any state&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward_Shoot&lt;/code&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward&lt;/code&gt; is true, so select this transition (click on the arrow connecting the state &lt;code class=&quot;highlighter-rouge&quot;&gt;Any State&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward_Shoot&lt;/code&gt;) and in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Conditions&lt;/code&gt; list on inspector add the &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward&lt;/code&gt; equals &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/walk-forward-condition.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;WalkForward condition defined&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;code class=&quot;highlighter-rouge&quot;&gt;reset&lt;/code&gt; to auto fit the exit and transition time:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/reset-transition.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;reseting the transition settings&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Repeat the same steps as above for the transition from &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward_Shoot&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle_GunMiddle&lt;/code&gt;, but use &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; as the value for &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/animator-base-layer.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;animation base layer&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Play&lt;/code&gt; button to test the animation states. When you click on &lt;code class=&quot;highlighter-rouge&quot;&gt;WALK / FORWARD&lt;/code&gt; the robot starts to walk, when you click it again the robot stops to walk.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-upper-body-avatar-mask&quot;&gt;Creating the upper body avatar mask&lt;/h3&gt;
&lt;p&gt;The animation for walk forward works pretty well, the robot walks forward while it’s aiming the gun. This is the whole movement animated inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward_Shoot&lt;/code&gt; clip.&lt;/p&gt;

&lt;p&gt;Now we want that robot walk forward without aiming the gun, instead of this, we want it keeps the gun in the middle as it does when &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle_GunMiddle&lt;/code&gt; is active. To get this done, first, we need to create an avatar mask to the upper body.&lt;/p&gt;

&lt;p&gt;Create a new Avatar Mask (&lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/Create/Avatar Mask&lt;/code&gt;) called &lt;code class=&quot;highlighter-rouge&quot;&gt;UpperBody&lt;/code&gt;. In the inspector, uncheck all lower body parties, as the image below:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/upper-body-avatar-mask.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;only upper body&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;creating-a-upper-body-animation-layer&quot;&gt;Creating a upper body animation layer&lt;/h3&gt;
&lt;p&gt;With the UpperBody Avatar Mask created, we will need to create a new animation layer that will use the mask. Go to the animator window and create a new layer using the &lt;code class=&quot;highlighter-rouge&quot;&gt;+ button&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/upperbody-animation-layer.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;the new layer created with the mask&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Change the &lt;code class=&quot;highlighter-rouge&quot;&gt;Weight&lt;/code&gt; property to 1 and set the Mask to the UpperBody Avatar Mask. Keep the &lt;code class=&quot;highlighter-rouge&quot;&gt;Blending&lt;/code&gt; as override.&lt;/p&gt;

&lt;p&gt;Drag the animation clip &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle_GunMiddle&lt;/code&gt; from folder &lt;code class=&quot;highlighter-rouge&quot;&gt;SciFiWarrior/Animations&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;UpperBody&lt;/code&gt; layer.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/upperbody-animation-layer-fsm.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;upper body animation layer&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;testing-the-animations&quot;&gt;Testing the animations&lt;/h4&gt;
&lt;p&gt;Hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Play&lt;/code&gt; button to test the animation states. When you click on &lt;code class=&quot;highlighter-rouge&quot;&gt;WALK / FORWARD&lt;/code&gt; the robot starts to walk, but now it’s not aiming the gun, instead it keeps the gun in the middle.&lt;/p&gt;

&lt;h4 id=&quot;why-does-this-happen&quot;&gt;Why does this happen?&lt;/h4&gt;
&lt;p&gt;So, this is done by the UpperBody Animation Layer that we added to our animation controller, as it’s mask was defined with our UpperBody Avatar Mask that only consider upper body parts of the humanoid, Unity overrides the base layer animation with the upper body part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle_GunMiddle&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;making-the-robot-shoot&quot;&gt;Making the robot shoot&lt;/h2&gt;
&lt;p&gt;We will make the robot shoot when the button &lt;code class=&quot;highlighter-rouge&quot;&gt;SHOOT / SINGLE&lt;/code&gt; became checked, this will help us to better understand how the Avatar Mask and Animation Layer works to override the animations from the base layer with the animations from UpperBody layer.&lt;/p&gt;

&lt;p&gt;In the Animator Window with our Animation Controller opened, select the UpperBody layer and drag the animation clip &lt;code class=&quot;highlighter-rouge&quot;&gt;Shoot_single&lt;/code&gt; from folder &lt;code class=&quot;highlighter-rouge&quot;&gt;SciFiWarrior/Animations&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a &lt;a href=&quot;https://docs.unity3d.com/Manual/class-Transition.html&quot;&gt;transition&lt;/a&gt; (right click on node and  &lt;code class=&quot;highlighter-rouge&quot;&gt;Make transition&lt;/code&gt;) from &lt;code class=&quot;highlighter-rouge&quot;&gt;Any state&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Shoot_single&lt;/code&gt; and create another transition from &lt;code class=&quot;highlighter-rouge&quot;&gt;Shoot_single&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle_GunMiddle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we need to tell to the animation controller when it should activate the two transitions, for this we will create a bool &lt;a href=&quot;https://docs.unity3d.com/Manual/AnimationParameters.html&quot;&gt;animation parameter&lt;/a&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;ShootSingle&lt;/code&gt;.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/shoot-single-parameter.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;ShootSingle parameter created&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We want to activate the transition from &lt;code class=&quot;highlighter-rouge&quot;&gt;Any state&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Shoot_single&lt;/code&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;ShootSingle&lt;/code&gt; is true, so select this transition (click on the arrow connecting the state &lt;code class=&quot;highlighter-rouge&quot;&gt;Any State&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Shoot_single&lt;/code&gt;) and in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Conditions&lt;/code&gt; list on inspector add the &lt;code class=&quot;highlighter-rouge&quot;&gt;ShootSingle&lt;/code&gt; equals  &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Click the &lt;code class=&quot;highlighter-rouge&quot;&gt;reset&lt;/code&gt; to auto fit the exit and transition time.&lt;/p&gt;

&lt;p&gt;Repeat the same steps as above for the transition from &lt;code class=&quot;highlighter-rouge&quot;&gt;ShootSingle&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle_GunMiddle&lt;/code&gt;, but use &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; as the value for &lt;code class=&quot;highlighter-rouge&quot;&gt;ShootSingle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Play&lt;/code&gt; button to test the animation states. When you click on &lt;code class=&quot;highlighter-rouge&quot;&gt;SHOOT / SINGLE&lt;/code&gt; the robot shoot.&lt;/p&gt;

&lt;p&gt;Now you can combine the two buttons &lt;code class=&quot;highlighter-rouge&quot;&gt;WALK / FORWARD&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SHOOT / SINGLE&lt;/code&gt; and see how the animations combine.&lt;/p&gt;

&lt;h2 id=&quot;challenge&quot;&gt;Challenge&lt;/h2&gt;
&lt;p&gt;Do something is better to learn than just reading and following someone instructions because this I will challenge you to try to implement other actions:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/challenge.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;the remaining actions to the challenge&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt; 	 	 
To implement these actions you need to do almost the same thing we did in this tutorial so far, just using another animation clips, transitions and parameters.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;The challenger items are the legs because you will need to create new Avatar Masks with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Transform&lt;/code&gt; option of the avatar configuration to get the right animation. New Animation Layers will be needed as well.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;If you have any doubt how to implement any part of this challenge, feel free to ask on this post comments or &lt;a href=&quot;about&quot;&gt;send me a message&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;The whole source code and assets for this tutorial are available on: &lt;a href=&quot;https://github.com/giacomelli/unity-avatar-mask-and-animation-layers&quot;&gt;https://github.com/giacomelli/unity-avatar-mask-and-animation-layers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository has two main folders:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;avatar-mask-starter&lt;/strong&gt;: the one you used to make this tutorial.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;avatar-mask-complete&lt;/strong&gt;: the whole solution with all actions implemented. Use this one, in case you get stuck in any item on the challenge.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The video below shows the complete solution running:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/sl9EheTbmhE &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this tutorial, we learn how to use Avatar Masks and Animation Layers to animate a robot with different masks and layers.
These techniques allowing us to use already existent animations and combine them.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GeneticSharp Unity3d Samples released on Google Play</title>
   <link href="//GeneticSharp-Unity3d-Samples-released-on-Google-Play/"/>
   <updated>2018-09-22T00:00:00-03:00</updated>
   <id>//GeneticSharp-Unity3d-Samples-released-on-Google-Play</id>
   <content type="html">&lt;p&gt;I published on Google Play the &lt;strong&gt;GeneticSharp Unity3d Samples&lt;/strong&gt;.&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/pJpZwCW2m4s &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;center&gt;
	&lt;a href=&quot;https://play.google.com/store/apps/details?id=br.com.diegogiacomelli.geneticsharprunnersunityapp&quot;&gt;
		
	&lt;/a&gt;
&lt;/center&gt;

&lt;p&gt;In this app you can see GeneticSharp running on Unity3d in three different samples:&lt;/p&gt;

&lt;h2 id=&quot;car2d&quot;&gt;Car2D&lt;/h2&gt;
&lt;p&gt;Based on famous BoxCar2D, this sample uses a genetic algorithm to create car designs to overcome road challenges, like gaps, hills, and obstacles.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/09/22/GeneticSharp-Unity3d-Samples-released-on-Google-Play/GeneticSharp-Unity3d-Samples-Car2d.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;tsp&quot;&gt;TSP&lt;/h2&gt;
&lt;p&gt;The classic TSP sample, but in this, we can change the cities positions while the genetic algorithm is running and see how it finds the best route.&lt;/p&gt;

&lt;p&gt;This sample inspired this post &lt;a href=&quot;/tsp-with-GeneticSharp-and-Unity3d/&quot;&gt;TSP with GeneticSharp and Unity3D&lt;/a&gt;.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/09/22/GeneticSharp-Unity3d-Samples-released-on-Google-Play/GeneticSharp-Unity3d-Samples-TSP.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;wall-builder&quot;&gt;Wall builder&lt;/h2&gt;
&lt;p&gt;This sample tries to build a higher wall using random initial bricks positions.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/09/22/GeneticSharp-Unity3d-Samples-released-on-Google-Play/GeneticSharp-Unity3d-Samples-Wall-Builder.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;You can get the full source code here: &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/tree/master/src/GeneticSharp.Runner.UnityApp&quot;&gt;https://github.com/giacomelli/GeneticSharp/tree/master/src/GeneticSharp.Runner.UnityApp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s evolve!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GeneticSharp Car2D</title>
   <link href="//GeneticSharp-Car2D/"/>
   <updated>2018-06-01T00:00:00-03:00</updated>
   <id>//GeneticSharp-Car2D</id>
   <content type="html">&lt;p&gt;I made an Unity3D sample for &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp&quot;&gt;GeneticSharp&lt;/a&gt; inspired by amazing &lt;a href=&quot;http://boxcar2d.com/about.html&quot;&gt;BoxCar2D&lt;/a&gt; where a genetic algorithm tries to design 2D cars to overcome roads challenges.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/06/01/GeneticSharp-Car2D/car.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;I was always amazed by the 2D cars designed by &lt;a href=&quot;http://boxcar2d.com/about.html&quot;&gt;BoxCar2D&lt;/a&gt;  and see how genetic algorithm make new and (probably) better cars each new generation and I always wanted make a sample inspired by it using GeneticSharp.&lt;/p&gt;

&lt;p&gt;The sample that I will talk about is available on the GeneticSharp repository at GeneticSharp.Runner.UnityApp. You can fork GeneticSharp and open it on Unity3D editor, then run the MenuScene.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you need some introduction to genetic algorithms or GeneticSharp:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Introduction to genetic algorithms: &lt;a href=&quot;/function-optimization-with-geneticsharp/&quot;&gt;Function optimization with GeneticSharp&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;Using GeneticSharp on Unity3D: &lt;a href=&quot;/tsp-with-GeneticSharp-and-Unity3d/&quot;&gt;TSP with GeneticSharp and Unity3D&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-is-our-2d-car&quot;&gt;What is our 2D car?&lt;/h2&gt;
&lt;p&gt;In GeneticSharp Car2D, a car is composed of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;8 vectors with 64 meters max size and an angle that will be calculate from the car center.&lt;/li&gt;
  &lt;li&gt;0 to 8 wheels
    &lt;ul&gt;
      &lt;li&gt;Radius from 0 to 3&lt;/li&gt;
      &lt;li&gt;Vector index (a vector can have more than one wheel)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The vectors and wheels have mass, so bigger ones will made a slower car.&lt;/p&gt;

&lt;h2 id=&quot;the-chromosome&quot;&gt;The chromosome&lt;/h2&gt;
&lt;p&gt;To represent the phenotype described above the car chromosome will be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A float to represent the vector size (7 bits)&lt;/li&gt;
  &lt;li&gt;A float to represent the vector angle (9 bits)&lt;/li&gt;
  &lt;li&gt;An integer to represent the wheel vector index (7 bits)&lt;/li&gt;
  &lt;li&gt;A float to represent the wheel radius (4 bits)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This structure will take 27 bits, then we will repeat it 8 times, that is the number of the car vectors. This give us a chromosome with 216 bits.&lt;/p&gt;

&lt;p&gt;The bit string chromosome will look like this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;001101110101110100001000010010100100111000100000010101010100000111100100001110010010010101010111100000000011011100000001110000001110010000110101011111100000100011011101101011101000001110000011011000110111000000000011
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-roads&quot;&gt;The roads&lt;/h2&gt;
&lt;p&gt;The roads and cars can be configured using the scriptable object CarSampleConfig. The GeneticSharp Car2D allows create any number of different roads and car configs, but for this post, I will show 3 roads configurations with the same car configuration mentioned above.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you want to add new roads, just create a new CarSampleConfig in “Assets / Create / GeneticSharp / Car / CarSampleConfig”. The new road will automatically appear on Car2D menu when you run the sample.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A road is defined by its points quantity and distance, height, rotation, gaps, and obstacles. The gravity and everything about physics is automatically simulated by Unity3d itself.&lt;/p&gt;

&lt;h2 id=&quot;the-fitness-function&quot;&gt;The fitness function&lt;/h2&gt;
&lt;p&gt;The fitness of each car (chromosome) to the road will be the &lt;strong&gt;sum of the max distance&lt;/strong&gt; reach by it &lt;strong&gt;plus the average velocity&lt;/strong&gt; at that moment.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/06/01/GeneticSharp-Car2D/FitnessFunction.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;genetic-algorithm-and-the-simulation&quot;&gt;Genetic algorithm and the simulation&lt;/h2&gt;
&lt;p&gt;The genetic algorithm to evaluate the simulation is configured with this operators:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Population: 16 chromosomes per generation&lt;/li&gt;
  &lt;li&gt;Crossover: Uniform&lt;/li&gt;
  &lt;li&gt;Mutation: Flip Bit&lt;/li&gt;
  &lt;li&gt;Selection: Elite&lt;/li&gt;
  &lt;li&gt;Termination: Time evolving&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides that, the chromosomes are evaluated in parallel using the GeneticSharp’s ParallelTaskExecutor and you can see all them in 4x4 grid:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/06/01/GeneticSharp-Car2D/SimulationGrid.png &quot; /&gt;
      &lt;/center&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are running the sample inside Unity3D editor you can change the size of the simulation grid in the SampleController game object from CarScene.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;designing-the-cars&quot;&gt;Designing the cars&lt;/h2&gt;
&lt;p&gt;Now that we have our Car2D and roads defining, we can put the genetic algorithm to run and see how it design the cars for each road.&lt;/p&gt;

&lt;p&gt;Besides the roads that are different, the car setup is the same. This way we can compare how genetic algorithm will reach different car designs to different challenges (roads).&lt;/p&gt;

&lt;h3 id=&quot;gap-road&quot;&gt;Gap road&lt;/h3&gt;
&lt;p&gt;The first is a road with gaps that getting greater. 
The next video resumes how GeneticSharp designs the car for the gap road.&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/hxt2E3QGZw4 &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;blockquote&gt;
  &lt;p&gt;All videos are recording running the GeneticSharp Car2D on my Android. I used the &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.duapps.recorder&amp;amp;hl=en_US&quot;&gt;DU Recorder&lt;/a&gt; to record them. Amazing app BTW.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;About 100 generations, GeneticSharp generate a car that has a front wheel suspend in the air that allows it to reach the other side of the gap without fall on it.&lt;/p&gt;

&lt;h3 id=&quot;hill-road&quot;&gt;Hill road&lt;/h3&gt;
&lt;p&gt;This road has some hills that increase as the car travels.&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/x0zCDyGc80s &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;p&gt;For hill road, the genetic algorithm creates a car with enough length to touch the two sides of the downhills at the same time, this allows the car to keep the velocity needed to overcome the hill part. The middle wheel is what allows the car to pass the hill part of the road.&lt;/p&gt;

&lt;h3 id=&quot;obstacle-road&quot;&gt;Obstacle road&lt;/h3&gt;
&lt;p&gt;Some fixed obstacles are placed on the road and force the cars to pass over them&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/gJCz79xdCFY &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;p&gt;This is probably the most curious design because the genetic algorithm found out that to overcome the obstacle, the car needed to reach it at high velocity and needs to have a back support to avoid car rollover.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;A think two things are quite clear after I build this sample:&lt;/p&gt;

&lt;h3 id=&quot;incremental-challenges&quot;&gt;Incremental challenges&lt;/h3&gt;
&lt;p&gt;All the challenges in the roads are incremental, the gaps start small and get bigger by the extension of the road. The same was did to the hills and the obstacle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do the challenges need to be incremental?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;During first tests with the gap road I realized if I just put an 8 meters gap in front of first-generation cars, the genetic algorithm cannot choose better designs, because most of them just fall in the first gap. The challenge was too much for the initial generations, but if I just increased the size of the gaps from small size until it gets to 8 meters, the genetic algorithm could choose better and better designs each generation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It’s how we learn&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The same happens on how we learn many things, like math: first basic operations, then simple equations and in some years we are calculating integrals (or trying at least).&lt;/p&gt;

&lt;p&gt;It’s easy to spot this behavior on evolution itself, where the genetic algorithms are based. In the book “Guns, Germs and Steel” Jared Diamond says:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“The near-simultaneous disappearance of so many large species raises an
obvious question: what caused it? An obvious possible answer is that they
were killed off or else eliminated indirectly by the first arriving humans.
Recall that Australian / New Guinean animals had evolved for millions of
years in the absence of human hunters. We know that Galapagos and Antarctic
birds and mammals, which similarly evolved in the absence of
humans and did not see humans until modern times, are still incurably
tame today.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Australian / New Guinean animals got a challenge that was too much to them in that time, different of the other animals from other continents that evolved together with humans (or proto-humans) and learn to survive this predator.&lt;/p&gt;

&lt;h3 id=&quot;different-design&quot;&gt;Different design&lt;/h3&gt;
&lt;p&gt;Different challenges lead to different car designs. 
It’s quite clear that the best cars design to each of the 3 roads are different between them and only works in its specific road.&lt;/p&gt;

&lt;p&gt;Now, it’s up to you, fork &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/fork&quot;&gt;GeneticSharp&lt;/a&gt; and run the GeneticSharp Car2D on your Unity3D editor. &lt;a href=&quot;http://twitter.com/ogiacomelli&quot;&gt;Let me know&lt;/a&gt; what roads and results you created.&lt;/p&gt;

&lt;p&gt;Let’s evolve!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GeneticSharp - Unity3d sample</title>
   <link href="//GeneticSharp-Unity3d-sample/"/>
   <updated>2018-05-31T00:00:00-03:00</updated>
   <id>//GeneticSharp-Unity3d-sample</id>
   <content type="html">&lt;p&gt;I just pushed to GeneticSharp master branch the &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/tree/master/src/GeneticSharp.Runner.UnityApp&quot;&gt;GeneticSharp.Runners.UnityApp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this Unity3d project there are 3 samples:&lt;/p&gt;

&lt;h2 id=&quot;car2d&quot;&gt;Car2D&lt;/h2&gt;
&lt;p&gt;Based on famous BoxCar2D, this sample uses a genetic algorithm to create car designs to overcome road challenges, like gaps, hills, and obstacles.&lt;/p&gt;

&lt;p&gt;A post explaining this sample in detail will be published tomorrow.&lt;/p&gt;

&lt;h2 id=&quot;tsp&quot;&gt;TSP&lt;/h2&gt;
&lt;p&gt;The classic TSP sample, but in this, we can change the cities positions while the genetic algorithm is running and see how it finds the best route.&lt;/p&gt;

&lt;p&gt;This sample inspired this post &lt;a href=&quot;/tsp-with-GeneticSharp-and-Unity3d/&quot;&gt;TSP with GeneticSharp and Unity3D&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;wall-builder&quot;&gt;Wall builder&lt;/h2&gt;
&lt;p&gt;This sample tries to build a higher wall using random initial bricks positions.&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/xXqNcgeOU_g &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;experimental-components&quot;&gt;Experimental components&lt;/h2&gt;
&lt;p&gt;In the folder _runner/Commons there are the BitStringChromosome class and some phenotype implementations. At the moment they are experimental, but I will wait for the community feedback to see if they can be promoted to GeneticSharp library code.&lt;/p&gt;

&lt;p&gt;Let’s evolve!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>TSP with GeneticSharp and Unity3D</title>
   <link href="//tsp-with-GeneticSharp-and-Unity3d/"/>
   <updated>2018-05-16T00:00:00-03:00</updated>
   <id>//tsp-with-GeneticSharp-and-Unity3d</id>
   <content type="html">&lt;style&gt;
div.gist-meta { display:none; }
&lt;/style&gt;

&lt;p&gt;In this post I will show how to use GeneticSharp and Unity3D to solve the TSP (Travelling salesman problem).&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;According to Wikipedia &lt;em&gt;&lt;strong&gt;“The travelling salesman problem (TSP) asks the following question: “Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city and returns to the origin city?”&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;TSP is a classic sample to test some optimization techniques, as well it’s fairly used to demonstrate how to implement a genetic algorithm. For these reasons I will use it to show you how to implement a basic genetic algorithm in Unity3D using GeneticSharp.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;To better understand this tutorial, you need to have some experiences/knowledges in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unity3D (beginner)&lt;/li&gt;
  &lt;li&gt;Genetic algorithms (beginner).&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you need an introduction to genetic algorithms, take a look at this tutorial  &lt;a href=&quot;/function-optimization-with-geneticsharp/&quot;&gt;Function optimization with GeneticSharp&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;creating-the-unity3d-project&quot;&gt;Creating the Unity3D project&lt;/h2&gt;
&lt;p&gt;Using Unity 2018.1+, create a new project called TspSample.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/05/16/tsp-with-GeneticSharp-and-Unity3d/creating-project.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;using-net-standard-20&quot;&gt;Using .NET Standard 2.0&lt;/h2&gt;
&lt;p&gt;Go to “Player settings” / “Other settings” / “Configuration”, select “.NET 4.x Equivalent” on “Scripting Runtime Version”. Unity will ask to restart, you can confirm.&lt;/p&gt;

&lt;p&gt;After restart, go back to “Player settings”, select “.NET Standard 2.0” on “Api Compability Level”.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/05/16/tsp-with-GeneticSharp-and-Unity3d/player-settings.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;installing-geneticsharp&quot;&gt;Installing GeneticSharp&lt;/h2&gt;
&lt;p&gt;Install GeneticSharp using the .unitypackage available on &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/releases&quot;&gt;GeneticSharp release page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;defining-the-tsp-chromosome&quot;&gt;Defining the TSP chromosome&lt;/h2&gt;
&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/route.png &quot; style=&quot;max-height:200px&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;The chromosome represents a solution of the problem we are trying to solve. In our case the TSP chromosome should represent &lt;em&gt;&lt;strong&gt;“the shortest possible route that visits each city and returns to the origin city”&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To represent the cities route each gene of our chromosome will represent an index of a city in the route.&lt;/p&gt;

&lt;p&gt;Create a C# script called “TspChromosome.cs”:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/94721a46d33c6bcb1f3ae11117b7f888.js?file=TspChromosome.cs&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;representing-a-city&quot;&gt;Representing a city&lt;/h2&gt;
&lt;p&gt;The next step is define our genetic algorithm fitness function, but first we need to create a simple class to represent a city on a 2D space.&lt;/p&gt;

&lt;p&gt;Create a C# script called “City.cs”:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/94721a46d33c6bcb1f3ae11117b7f888.js?file=City.cs&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;the-fitness-function&quot;&gt;The fitness function&lt;/h2&gt;
&lt;p&gt;Now we need to evaluate the TspChromosome.&lt;/p&gt;

&lt;p&gt;Our fitness function will evaluate the TspChromosome fitness based on the total distance to reach all cities in the route represented by the chromosome. The shorter the distance, the better the chromosome.&lt;/p&gt;

&lt;p&gt;Create a C# script called “TspFitness.cs”: &lt;noscript&gt;&amp;lt;pre&amp;gt;400: Invalid request&amp;lt;/pre&amp;gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/94721a46d33c6bcb1f3ae11117b7f888.js?file=TspFitness.cs&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;running-the-genetic-algorithm&quot;&gt;Running the Genetic Algorithm&lt;/h2&gt;
&lt;p&gt;In this step we need to configure our genetic algorithm using the TspChromosome, TspFitness and some classic GA operators already built in GeneticSharp.&lt;/p&gt;

&lt;p&gt;Create a C# script called “GAController.cs”: &lt;noscript&gt;&amp;lt;pre&amp;gt;400: Invalid request&amp;lt;/pre&amp;gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/94721a46d33c6bcb1f3ae11117b7f888.js?file=GAController.v1.cs&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Create a GameObject called “GAController” in the scene and add the GAController.cs to it.&lt;/p&gt;

&lt;p&gt;Save the scene.&lt;/p&gt;

&lt;p&gt;Run the scene on editor and take a look on the console window, you will see the distance to reach all cities getting smaller as the generations ran.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/05/16/tsp-with-GeneticSharp-and-Unity3d/console-window.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;drawing-the-cities&quot;&gt;Drawing the cities&lt;/h2&gt;
&lt;p&gt;Now our GA is running inside Unity3D, but it need to display the cities route better.
We need to create a visual representation to the cities.&lt;/p&gt;

&lt;h3 id=&quot;city-prefab&quot;&gt;City prefab&lt;/h3&gt;
&lt;p&gt;We will create a prefab based on a sprite of a pin. You can use an icon as this one from &lt;a href=&quot;https://www.flaticon.com/free-icon/maps-and-flags_447031#term=pin&amp;amp;page=1&amp;amp;position=6&quot;&gt;www.flaticon.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Download it to inside your Unity3D project.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Maybe you will need to change the ‘Pixels Per Unit’ to 1000 to get a good pin size on screen.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Drag it to the hierarchy panel, rename the new GameObject to CityPrefab and drag it back to your Assets folder on Project panel. Now our CityPrefab is created.&lt;/p&gt;

&lt;p&gt;Delete the CityPrefab game object from the current scene.&lt;/p&gt;

&lt;h3 id=&quot;instantiating-the-cities-prefabs&quot;&gt;Instantiating the cities prefabs&lt;/h3&gt;
&lt;p&gt;Add the following field to the GAController.cs&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/94721a46d33c6bcb1f3ae11117b7f888.js?file=GAController.change1.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Then, create the method DrawCities:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/94721a46d33c6bcb1f3ae11117b7f888.js?file=GAController.change2.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;And then call it from Start method:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/94721a46d33c6bcb1f3ae11117b7f888.js?file=GAController.change3.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now, select the GAController game object on hierarchy and set the CityPrefab property.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/05/16/tsp-with-GeneticSharp-and-Unity3d/setting-cityprefab.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;Try to run the scene, you should see something like this:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/05/16/tsp-with-GeneticSharp-and-Unity3d/draw-cities.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;drawing-the-route&quot;&gt;Drawing the route&lt;/h2&gt;
&lt;p&gt;In the previous step we drawn the cities and we have the visual of the problem: the cities.&lt;/p&gt;

&lt;p&gt;Now we need to draw the solution: the route represented by the best chromosome of each generation.&lt;/p&gt;

&lt;p&gt;One of the simplest ways to draw some lines in Unity3D is using the LineRenderer component.&lt;/p&gt;

&lt;p&gt;Add the following code to the GAController.cs:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/94721a46d33c6bcb1f3ae11117b7f888.js?file=GAController.change4.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Create the method DrawRoute:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/94721a46d33c6bcb1f3ae11117b7f888.js?file=GAController.change5.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Then call it from Update method:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/94721a46d33c6bcb1f3ae11117b7f888.js?file=GAController.change6.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Before run the scene, we need to add a LineRenderer component to our GAController game object.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Change the width property of the LineRenderer from 1 to 0.1.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run the scene again, now you should see the route been optimizing as the generations are ran:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/05/16/tsp-with-GeneticSharp-and-Unity3d/draw-route.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;changing-the-cities-positions&quot;&gt;Changing the cities positions&lt;/h2&gt;
&lt;p&gt;Our sample could be considered done, but would it be nice if we you could change the cities positions while the genetic algorithm are running and see how it manages these cities positions changes.&lt;/p&gt;

&lt;h3 id=&quot;citycontroller&quot;&gt;CityController&lt;/h3&gt;
&lt;p&gt;Create a C# script called “CityController.cs”: &lt;noscript&gt;&amp;lt;pre&amp;gt;400: Invalid request&amp;lt;/pre&amp;gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/94721a46d33c6bcb1f3ae11117b7f888.js?file=CityController.cs&quot;&gt; &lt;/script&gt;
I won’t getting in details about how this is script works, but it’s allow the user to drag the cities’ pin using the mouse or the finger touch if build it to mobile.&lt;/p&gt;

&lt;p&gt;Add the CityController.cs to the CityPrefab.&lt;/p&gt;

&lt;p&gt;Change the GAController.cs script adding the line below to the end of the for loop of DrawCities method:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/94721a46d33c6bcb1f3ae11117b7f888.js?file=GAController.change7.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Finally, our sample is really done and you should be capable to change the cities positions, by dragging the pins around, and genetic algorithm will try to figure out the best route in real time.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/05/16/tsp-with-GeneticSharp-and-Unity3d/tsp-sample.gif &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With only 5 C# scripts and 1 prefab we built a pretty nice sample of genetic algorithms using in Unity3D with GeneticSharp. Now you can improve it with your own ideas or use some of mine ;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How about make it 3D and using a Vector3 instead of Vector2 on City.Position?&lt;/li&gt;
  &lt;li&gt;Maybe let user change the number of cities or change the genetic algorithm operators?&lt;/li&gt;
  &lt;li&gt;Move the DrawCities and DrawRoutes methods to a script responsible to only draw the GA.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The full source code used in this post can be download or fork from this Gist: &lt;a href=&quot;https://gist.github.com/giacomelli/94721a46d33c6bcb1f3ae11117b7f888&quot;&gt;https://gist.github.com/giacomelli/94721a46d33c6bcb1f3ae11117b7f888&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s evolve!&lt;/p&gt;

&lt;div&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot; title=&quot;Freepik&quot;&gt;Freepik&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot; title=&quot;Flaticon&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot; title=&quot;Creative Commons BY 3.0&quot; target=&quot;_blank&quot;&gt;CC 3.0 BY&lt;/a&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D ScenePreview inspector</title>
   <link href="//unity3d-scenepreview-inspector/"/>
   <updated>2017-11-26T00:00:00-02:00</updated>
   <id>//unity3d-scenepreview-inspector</id>
   <content type="html">&lt;p&gt;I’m working in a new game prototype and in this process I was creating some experimental levels to test the mechanics, but by the name of scene I was having dificult to remember which mechanic the level was about and I had to open each level to discover that one was looking for, so I thought: it will be cool have an image preview of the scene when we select the file in hierarchy.&lt;/p&gt;

&lt;p&gt;I google and didn’t find any project or asset in Asset Store that already did something like this (please, let me know if you know a similar tool) and, well, I prefer code something, than google something, then I coded a little inspector, that I named as ScenePreview:&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;UPDATED: I created a new Scene Preview solution, now using its own window editor: &lt;a href=&quot;/unitytips-scene-preview-window/&quot;&gt;Scene Preview Window&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2017/11/26/unity3d-scenepreview-inspector/ScenePreview.gif &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Just download the gist bellow to your Unity3D project and add it inside a “Editor” folder.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/f74a23107fe862ae7501002ac856f932.js?file=ScenePreview.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;p&gt;After this, open it and edit the line below:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Change this to a folder in your project. &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Maybe the folder where your scenes are located. Remember to create a subfolder called &quot;Resources&quot; inside of it.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PreviewFolders&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;_scenes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;If you select any scene in the hierarchy you will see a message like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“There is no image preview for scene ‘’ at ‘’. Please play the scene on editor and image preview will be captured automatically.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, play the scene on editor and the image preview will be taken, when you select the scene file again you see the preview.&lt;/p&gt;

&lt;p&gt;That’s it! I hope this inspector can be useful to you too.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Buildron 2.0.0</title>
   <link href="//buildron.2.0.0/"/>
   <updated>2016-09-24T00:00:00-03:00</updated>
   <id>//buildron.2.0.0</id>
   <content type="html">&lt;p&gt;After some months to test the &lt;a href=&quot;https://github.com/skahal/Buildron/releases/tag/v2.0.0-RC1&quot;&gt;v2.0.0-RC1&lt;/a&gt; we are releasing the final version of &lt;a href=&quot;https://github.com/skahal/Buildron/&quot;&gt;Buildron&lt;/a&gt; mods support with this &lt;a href=&quot;https://github.com/skahal/Buildron/releases/tag/v2.0.0&quot;&gt;2.0.0 version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mods supports represents a great change in Buildron code structure, because we built a mods support that allow any developer add his own mods to Buildron.&lt;/p&gt;

&lt;h2 id=&quot;mods-available&quot;&gt;Mods available&lt;/h2&gt;
&lt;p&gt;The classic visual and behavior that you already know at Buildron was moved to mods, you can see them at &lt;a href=&quot;https://github.com/skahal/Buildron-Classic-Mods&quot;&gt;Buildron Classic Mods repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Right now we have 9 mods developed to Buildron:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/giacomelli/Buildron-ConsoleMod/releases&quot;&gt;ConsoleMod&lt;/a&gt;: adds a console window to Buildron and let you monitor his events.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Classic Mods
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/skahal/Buildron-Classic-Mods&quot;&gt;BuildMod&lt;/a&gt;: represents each build as part of totem.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/skahal/Buildron-Classic-Mods&quot;&gt;CameraMod&lt;/a&gt;: auto position of camera to show all builds and users.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/skahal/Buildron-Classic-Mods&quot;&gt;EasterEggMod&lt;/a&gt;: surprise.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/skahal/Buildron-Classic-Mods&quot;&gt;EnvironmentMod&lt;/a&gt;: the classic Tron style floor.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/skahal/Buildron-Classic-Mods&quot;&gt;SoundMod&lt;/a&gt;: the classic explosion sounds and allow change the sounds for each user.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/skahal/Buildron-Classic-Mods&quot;&gt;UserMod&lt;/a&gt;: each user is represented by a robot and an avatar.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/giacomelli/Buildron.SlackBotMod/releases&quot;&gt;SlackBotMod&lt;/a&gt;: adds a bot to your Slack that acts as Buildron and your team can interact with it, like filter builds, sort builds, move camera, receive build status change notifications and taking screenshots.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/skahal/Buildron-Mod-Samples&quot;&gt;ToastyMod&lt;/a&gt;: the Mortal Kombat “Toasty!” easter egg that can be configured to show on build success, running or failed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;developing-new-mods&quot;&gt;Developing new mods&lt;/h2&gt;
&lt;p&gt;Do you want to develop your own mod to Buildron? Take a look on our wiki pages about mods and start to build your mod now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/skahal/buildron/wiki/mods-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/starting-a-buildron-mod-with-a-mod-template/&quot;&gt;Starting a Buildron mod with a mod template&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/skahal/buildron/wiki/mods-getting-started&quot;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/skahal/buildron/wiki/mods-ModSdk&quot;&gt;ModSdk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/skahal/buildron/wiki/mods-tutorial-creating-a-mod&quot;&gt;Tutorial “Creating a mod”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/08/28/buildron.2.0.0-rc1-mods-support/BuildronBuildMod.gif &quot; /&gt;
      &lt;/center&gt;

&lt;blockquote&gt;
  &lt;p&gt;BuildMod running inside Buildron.ModSdk simulator&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Buildron SlackBotMod</title>
   <link href="//buildron-slackbotmod/"/>
   <updated>2016-09-22T00:00:00-03:00</updated>
   <id>//buildron-slackbotmod</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/skahal/buildron&quot;&gt;Buildron&lt;/a&gt; is a build radiator to help software development teams to see the current status of their continous integration server and &lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt; is the omnipresent communication app for almost every developer in the world.&lt;/p&gt;

&lt;p&gt;For these reasons, I made a mod called &lt;a href=&quot;https://github.com/giacomelli/Buildron.SlackBotMod&quot;&gt;Buildron.SlackBotMod&lt;/a&gt; that let you interact with Buildron through the Slack.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/22/buildron-slackbotmod/Buildron.SlackBotMod-2016-09-18.gif &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;
&lt;p&gt;Currently Buildron SlackBotMod has the follow features:&lt;/p&gt;

&lt;h3 id=&quot;status-changed-notifications&quot;&gt;Status changed notifications&lt;/h3&gt;
&lt;p&gt;Your team can be notified by Buildron about builds status changed. In the mod preferences you can choose what status you want to receive notifications (running|succes|failed).&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/22/buildron-slackbotmod/Buildron-SlackBotMod-build-status-change-notifications.png &quot; /&gt;
      &lt;/center&gt;

&lt;h3 id=&quot;filter-builds&quot;&gt;Filter builds&lt;/h3&gt;
&lt;p&gt;Filter buils by status or text.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/22/buildron-slackbotmod/Buildron-SlackBotMod-filter-by.png &quot; /&gt;
      &lt;/center&gt;

&lt;h3 id=&quot;reset-filter&quot;&gt;Reset filter&lt;/h3&gt;
&lt;p&gt;Reset previous builds filter (no filter).&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/22/buildron-slackbotmod/Buildron-SlackBotMod-reset-filter.png &quot; /&gt;
      &lt;/center&gt;

&lt;h3 id=&quot;sort-builds&quot;&gt;Sort builds&lt;/h3&gt;
&lt;p&gt;Sort buils by status, text or date.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/22/buildron-slackbotmod/Buildron-SlackBotMod-sort-by.png &quot; /&gt;
      &lt;/center&gt;

&lt;h3 id=&quot;move-camera&quot;&gt;Move camera&lt;/h3&gt;
&lt;p&gt;Move the camera the amount of pixels define in the x,y,z coordinates.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/22/buildron-slackbotmod/Buildron-SlackBotMod-move-camera.png &quot; /&gt;
      &lt;/center&gt;

&lt;h3 id=&quot;reset-camera&quot;&gt;Reset camera&lt;/h3&gt;
&lt;p&gt;Reset the camera position.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/22/buildron-slackbotmod/Buildron-SlackBotMod-reset-camera.png &quot; /&gt;
      &lt;/center&gt;

&lt;h3 id=&quot;take-a-screenshot&quot;&gt;Take a screenshot&lt;/h3&gt;
&lt;p&gt;Take a screenshot of current Buildron state.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/22/buildron-slackbotmod/Buildron-SlackBotMod-take-screenshot.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you are not using Buildron yet, &lt;a href=&quot;https://github.com/skahal/buildron&quot;&gt;give it a try&lt;/a&gt;.
If you are already using Buildron and Slack, try my &lt;a href=&quot;https://github.com/giacomelli/Buildron.SlackBotMod&quot;&gt;Buildron.SlackBotMod&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sending a Slackbot message from Unity3d</title>
   <link href="//sending-a-slackbot-message-from-unity3d/"/>
   <updated>2016-09-17T00:00:00-03:00</updated>
   <id>//sending-a-slackbot-message-from-unity3d</id>
   <content type="html">&lt;p&gt;I was looking for a way to send a message to a Slack channel using the Slackbot API.&lt;/p&gt;

&lt;p&gt;This is a pretty easy task to perform in C#, because there are some great client libraries implementations to the Slack API, like: &lt;a href=&quot;https://github.com/Inumedia/SlackAPI&quot;&gt;SlackApi&lt;/a&gt;, &lt;a href=&quot;https://github.com/jammerware/margiebot&quot;&gt;MargieBot&lt;/a&gt; and &lt;a href=&quot;https://github.com/noobot/SlackConnector&quot;&gt;SlackConnector&lt;/a&gt;. However, in the Unity3d world the story is a little different, because Unity3d uses an older .NET version and those mentioned client libraries are implemented using newer .NET framework versions that are incompatible with Unity3d.&lt;/p&gt;

&lt;p&gt;I could have tried to compile those client libraries projects using a older .NET version, what I really tried to do, but almost all are using things like Task and async, that are really not supported by Unity3d .NET version right now.&lt;/p&gt;

&lt;p&gt;Then I decided to try a very raw solution using the Unity3d WWWForm and it worked well, very simple, but can be useful to someone. The result is the code bellow:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/17/sending-a-slackbot-message-from-unity3d/SlackBotMessage.png &quot; /&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;botcontroller&quot;&gt;BotController&lt;/h1&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/1c8e405116e1b48a7d25dec9b36edbea.js&quot;&gt; &lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Creating a ConsoleMod to Buildron</title>
   <link href="//creating-a-consolemod-to-buildron/"/>
   <updated>2016-09-15T00:00:00-03:00</updated>
   <id>//creating-a-consolemod-to-buildron</id>
   <content type="html">&lt;p&gt;In this post we’ll create a mod that adds a console window to Buildron and let you monitor its events. Our ConsoleMod will have 2 classes: ModController and Mod.&lt;/p&gt;

&lt;h1 id=&quot;modcontroller-class&quot;&gt;ModController class&lt;/h1&gt;
&lt;p&gt;ModController class will be a MonoBehaviour responsible to showing to the user a window where the Buildron events will be logged. It’s a very simple Unity3d MonoBehaviour that use some GUILayout stuffs to build its UI.&lt;/p&gt;

&lt;h1 id=&quot;mod-class&quot;&gt;Mod class&lt;/h1&gt;
&lt;p&gt;Mod class is the basic class for every Buildron mod and it will be responsible to creating the ModController GameObject and attach to listen a lot of the Buildron events.&lt;/p&gt;

&lt;h2 id=&quot;download-buildron-mod-template&quot;&gt;Download Buildron-Mod-Template&lt;/h2&gt;
&lt;p&gt;Go to Buildron &lt;a href=&quot;https://github.com/skahal/Buildron/releases&quot;&gt;release page&lt;/a&gt; and download Buildron-Mod-Template.zip&lt;/p&gt;

&lt;h2 id=&quot;create-your-mod-solution&quot;&gt;Create your mod solution&lt;/h2&gt;
&lt;p&gt;Unzip the Buildron-Mod-Template.zip.&lt;/p&gt;

&lt;p&gt;Open a prompt/terminal and go to the folder of unzip Buildron-Mod-Template.&lt;/p&gt;

&lt;p&gt;Type:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jumpstart.exe &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; ConsoleMod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are using jumpstart in Mac/Linux, remember to call it with “mono “ prefix.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A folder called ConsoleMod should be created. Open the src/Code/ConsoleMod.sln.&lt;/p&gt;

&lt;h2 id=&quot;creating-modcontroller-class&quot;&gt;Creating ModController class&lt;/h2&gt;
&lt;p&gt;Delete the sample file BoxController.cs&lt;/p&gt;

&lt;p&gt;Create a new class called ModController and add the code below to it:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MonoBehaviour&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fields&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_windowRect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_msgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endregion&lt;/span&gt;

   &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Constructors&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ModController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;m_title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Console mod (v.{0})&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;With&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endregion&lt;/span&gt;

   &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Methods&lt;/span&gt;    
   &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;/// Adds the message to the console window.&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&quot;message&quot;&amp;gt;The message.&amp;lt;/param&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&quot;args&quot;&amp;gt;The arguments.&amp;lt;/param&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formattedMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;With&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;m_msgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[{0:HH:mm:ss}] {1}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;With&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formattedMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_msgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;m_msgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RemoveAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnGUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;GUILayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_windowRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandleWindowFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GUILayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MinWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GUILayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MinHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HandleWindowFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;GUILayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;BeginVertical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_msgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;GUILayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;GUILayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;EndVertical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endregion&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;creating-the-mod-class&quot;&gt;Creating the Mod class&lt;/h2&gt;
&lt;p&gt;Replace the content of Mod.cs with the code below:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Buildron.Domain.Mods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;UnityEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ConsoleMod&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;/// Responsible to create the ModController GameObject and attach to listen a lot of the Buildron events.&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mod&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMod&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;/// Initialize the mod with the context.&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&quot;context&quot;&amp;gt;The mod context.&amp;lt;/param&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IModContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateModController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;ListenEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;            
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModController&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateModController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		    	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ConsoleController&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ListenEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IModContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildFound&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				        &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Build found: {0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

			    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildRemoved&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Build removed: {0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

			    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildsRefreshed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Build refreshed: {0} builds found, {1} builds removed, {2} builds status changed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildsFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildsRemoved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildsStatusChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

			    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildStatusChanged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Build status changed: {0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

			    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildTriggeredByChanged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Build triggered by changed: {0}/{1}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TriggeredBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

			    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildUpdated&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Build updated: {0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

			    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CIServerStatusChanged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CI server status changed: {0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

			    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoteControlChanged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RC changed: {0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoteControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

			    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserAuthenticationCompleted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;User authentication completed: {0}:{1}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Success&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;success&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

			    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserFound&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;User found: {0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

			    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserRemoved&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;User remoed: {0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

			    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserTriggeredBuild&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;User triggered build: {0}/{1}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

			    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserUpdated&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;User updated: {0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Compile the project.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;testing-on-mod-simulator&quot;&gt;Testing on mod simulator&lt;/h2&gt;
&lt;p&gt;Open the project src/Unity/ConsoleMod inside Unity3d editor.&lt;/p&gt;

&lt;p&gt;Open SimulatorScene.&lt;/p&gt;

&lt;p&gt;Hit the “Play” button.&lt;/p&gt;

&lt;p&gt;You should see a scene like this:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/15/creating-a-consolemod-to-buildron/ConsoleMod-SimulationScene-opened.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;In the menu “Buildron”, click on “Show Simulator”.&lt;/p&gt;

&lt;p&gt;Click on “BuildFound”, “BuildStatusChanged” and “BuildRemoved” buttons, you should see these events been registered on ConsoledMod window.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/15/creating-a-consolemod-to-buildron/ConsoleMod-SimulationScene-events-registered.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;Hit the “Play” button again to stop playing the scene.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are two folders inside your Unity3d project called “Materials” and “Prefabs”. They are created from Buildron-Mod-Template, but ConsoleMod don’t need them. You can remove them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;building-the-mod&quot;&gt;Building the mod&lt;/h2&gt;
&lt;p&gt;ConsoleMod has no Unity3d assets, in this case you don’t need to use the menu “Buildron / BuildMod”, you just need to compile your project inside your IDE, as we did on section “Creating the Mod class” to get your mod inside Buildron.&lt;/p&gt;

&lt;h2 id=&quot;testing-on-buildron&quot;&gt;Testing on Buildron&lt;/h2&gt;
&lt;p&gt;Go to folder ConsoleMod/build and open the Buildron of your platform.&lt;/p&gt;

&lt;p&gt;Hit the play button on Buildron.&lt;/p&gt;

&lt;p&gt;You should see the ConsoleMod window registering a lot of Buildron events.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/15/creating-a-consolemod-to-buildron/ConsoleMod-Buildron.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That’s it! We created a Buildron mod that can help to debug what is happening in Buildron and mods in runtime.&lt;/p&gt;

&lt;p&gt;So, why you don’t try to &lt;strong&gt;create your own Buildron mod now&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;You can see the full source code of this post on &lt;a href=&quot;https://github.com/giacomelli/Buildron-ConsoleMod&quot;&gt;https://github.com/giacomelli/Buildron-ConsoledMod&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Starting a Buildron mod with a mod template</title>
   <link href="//starting-a-buildron-mod-with-a-mod-template/"/>
   <updated>2016-09-04T00:00:00-03:00</updated>
   <id>//starting-a-buildron-mod-with-a-mod-template</id>
   <content type="html">&lt;p&gt;In this post I will show how to start building a mod to Buildron using a mod template.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/04/starting-a-buildron-mod-with-a-mod-template/BuildronModTemplateSimulation.gif &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;
&lt;p&gt;Download the Buildron-Mod-Template.zip from &lt;a href=&quot;https://github.com/skahal/Buildron/releases&quot;&gt;releases page&lt;/a&gt;.
Unzip it in any folder.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-solution&quot;&gt;Creating the solution&lt;/h2&gt;
&lt;p&gt;Open a prompt (win) or a terminal (linux/mac).&lt;/p&gt;

&lt;p&gt;Go to the folder where you unzip Buildron-Mod-Template.zip.&lt;/p&gt;

&lt;p&gt;Type:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jumpstart-exe &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &amp;lt;the name of your mod&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are in Linux/Mac andfix commands with “mono “.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, if your mod name is “MyAmazingMod”, you should type:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jumpstart.exe &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; MyAmazingMod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://github.com/giacomelli/jumpstart&quot;&gt;jumpstart&lt;/a&gt; is a tool that I made to help create solutions from pre built templates. I will talk about of it in an future post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/04/starting-a-buildron-mod-with-a-mod-template/BuildronModTemplateJumpstart.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;After jumpstart is done you will see a new folder called MyAmazingMod, inside of it there are the following folders:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;build: full Buildron executable with the classic mods to all platforms (linux, mac and win).&lt;/li&gt;
  &lt;li&gt;src
    &lt;ul&gt;
      &lt;li&gt;Code: the C# class library of your mod&lt;/li&gt;
      &lt;li&gt;Unity: the Unity3d project of your mod.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/04/starting-a-buildron-mod-with-a-mod-template/BuildronModTemplateFolders.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;the-c-project&quot;&gt;The C# project&lt;/h2&gt;
&lt;p&gt;Open the MyAmazingMod/src/Code/MyAmazingMod.sln.&lt;/p&gt;

&lt;p&gt;Select the configuration of your platform.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/04/starting-a-buildron-mod-with-a-mod-template/BuildronModTemplatePlatformConfiguration.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;Inside of it you can see the Mod.cs and ModController.cs.&lt;/p&gt;

&lt;p&gt;Compile the whole solution.&lt;/p&gt;

&lt;h2 id=&quot;the-unity3d-project&quot;&gt;The Unity3d project&lt;/h2&gt;
&lt;p&gt;Open the MyAmazingMod/src/Unity/MyAmazingMod on Unity3d.&lt;/p&gt;

&lt;p&gt;Open the scene Assets/SimulatorScene and click on play button.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/04/starting-a-buildron-mod-with-a-mod-template/BuildronModTemplateSimulatorScene.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;Click on the menu “Buildron/Show Simulator”.&lt;/p&gt;

&lt;p&gt;In the simulator click on button “BuildStatusChanged”.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/04/starting-a-buildron-mod-with-a-mod-template/BuildronModTemplateSimulator.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;You will see a box falling down every time you hit the button. This behavior is made by Mod.cs and ModController.cs on C# project. If you are curious about it, take a look on the classes implementations.&lt;/p&gt;

&lt;h2 id=&quot;testing-on-buildron&quot;&gt;Testing on Buildron&lt;/h2&gt;
&lt;p&gt;In the Unity3d editor click on menu “Buildron / Build mod”.&lt;/p&gt;

&lt;p&gt;Select your platform: Mac, Linux or Windows.&lt;/p&gt;

&lt;p&gt;Type your Buildron mods folder:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Linux: ../../../build/linux/Mods&lt;/li&gt;
  &lt;li&gt;Mac: ../../../build/mac/Buildron.app/Mods&lt;/li&gt;
  &lt;li&gt;Win: ../../../build/win/Mods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Click on “Build” button.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/04/starting-a-buildron-mod-with-a-mod-template/BuildronModTemplateBuildMod.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;Go to folder MyAmazingMod/build and open the Buildron of your platform.&lt;/p&gt;

&lt;p&gt;Hit the play button on Buildron.&lt;/p&gt;

&lt;p&gt;You should see the same falling down box that you see on simulator falling down inside Buildron every time a build changed status.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/09/04/starting-a-buildron-mod-with-a-mod-template/BuildronModTemplateBuildronTest.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With this post you learned how you can starting to create your own mod from mod template.&lt;/p&gt;

&lt;p&gt;If you want to build more sofisticated mods, please take a look on our tutorial &lt;a href=&quot;https://github.com/skahal/buildron/wiki/mods-tutorial-creating-a-mod&quot;&gt;“Creating a mod”&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Buildron 2.0.0-RC1 - Mods support</title>
   <link href="//buildron.2.0.0-rc1-mods-support/"/>
   <updated>2016-08-28T00:00:00-03:00</updated>
   <id>//buildron.2.0.0-rc1-mods-support</id>
   <content type="html">&lt;p&gt;After some months of hard work I finally released the Buildron mods support.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://github.com/skahal/Buildron/releases/tag/v2.0.0-RC1&quot;&gt;Buildron 2.0.0-RC1&lt;/a&gt; represents a great change in Buildron code structure, because we built a mods support that allow any developer add his own mods to Buildron.&lt;/p&gt;

&lt;p&gt;Hope to see you building some mods to Buildron. We’re curious about what crazy mods ideas you could have ;).&lt;/p&gt;

&lt;p&gt;We really appreciate your opinion about the mods support, &lt;a href=&quot;https://github.com/skahal/Buildron/wiki/Mods-introduction&quot;&gt;documentation&lt;/a&gt;, &lt;a href=&quot;https://github.com/skahal/Buildron/wiki/Mods-tutorial-creating-a-mod&quot;&gt;tutorial&lt;/a&gt; and &lt;a href=&quot;https://github.com/skahal/Buildron/wiki/Mods-ModSdk&quot;&gt;ModSdk&lt;/a&gt;. Please, get in touch at &lt;a href=&quot;http://twitter.com/ogiacomelli&quot;&gt;@ogiacomelli&lt;/a&gt;.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2016/08/28/buildron.2.0.0-rc1-mods-support/BuildronBuildMod.gif &quot; /&gt;
      &lt;/center&gt;

&lt;blockquote&gt;
  &lt;p&gt;BuildMod running inside Buildron.ModSdk simulator&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mods&quot;&gt;Mods&lt;/h3&gt;
&lt;p&gt;The classic visual and behavior that you already know at Buildron was moved to mods too, you can see them at &lt;a href=&quot;http://github.com/skahal/Buildron-Classic-Mods&quot;&gt;Buildron Classic Mods&lt;/a&gt; repository.&lt;/p&gt;

&lt;p&gt;The full list of mods is available here: &lt;a href=&quot;https://github.com/skahal/Buildron/wiki/Mods-Mods-list&quot;&gt;Mods list&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;i-wanna-build-a-mod&quot;&gt;I wanna build a mod&lt;/h3&gt;
&lt;p&gt;If you want to build a mod, take a look on this &lt;a href=&quot;https://github.com/skahal/Buildron/wiki/mods-getting-started&quot;&gt;Getting started&lt;/a&gt; and this &lt;a href=&quot;https://github.com/skahal/Buildron/wiki/mods-tutorial-creating-a-mod&quot;&gt;Tutorial creating a mod&lt;/a&gt; that teach how build Buildron’s mod.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Buildron - Your builds, our world! ...and now our open source code too</title>
   <link href="//buildron-your-builds-our-world-and-now-our-open-source-code-too/"/>
   <updated>2016-06-02T00:00:00-03:00</updated>
   <id>//buildron-your-builds-our-world-and-now-our-open-source-code-too</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://github.com/skahal/buildron&quot;&gt;Buildron&lt;/a&gt; is a build radiator to continuous integration server like TeamCity, Jenkins and Hudson.&lt;/p&gt;

&lt;p&gt;We’ve built it as a &lt;a href=&quot;http://skahal.com&quot;&gt;Skahal’s&lt;/a&gt; product and now we decide to &lt;strong&gt;open source it: &lt;a href=&quot;http://github.com/skahal/buildron&quot;&gt;http://github.com/skahal/buildron&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can run it on Windows, OSX and Linux: &lt;a href=&quot;https://github.com/skahal/Buildron/releases&quot;&gt;https://github.com/skahal/Buildron/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a remote control app too (Windows, OSX, Linux, iOS and Android), where you can sort and filter builds, among other things: &lt;a href=&quot;https://github.com/skahal/Buildron-rc/releases&quot;&gt;https://github.com/skahal/Buildron-rc/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give it a try:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/sEghUYUvTHg &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

</content>
 </entry>
 
</feed>