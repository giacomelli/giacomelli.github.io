<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Diego Giacomelli - owasp</title>
 <link href="//tags/owasp/index.xml" rel="self"/>
 <link href="/tag/owasp.html"/>
 <updated>2023-11-07T09:05:44-03:00</updated>
 <id>/tag/owasp.html</id>
 <author>
   <name>Diego Giacomelli</name>
 </author>
 
 <entry>
   <title>OWASP ZAP Path Traversal and ASP .NET&colon; Notes</title>
   <link href="//owasp-zap-path-traversal-and-asp-dotnet-notes/"/>
   <updated>2020-10-15T00:00:00-03:00</updated>
   <id>//owasp-zap-path-traversal-and-asp-dotnet-notes</id>
   <content type="html">&lt;p&gt;In this post, I wrote some notes of my experience trying to understand the alerts about the &lt;a href=&quot;https://owasp.org/www-community/attacks/Path_Traversal&quot;&gt;Path Traversal&lt;/a&gt; attack while running &lt;a href=&quot;https://www.zaproxy.org/&quot;&gt;OWASP ZAP&lt;/a&gt; against an ASP .NET project.&lt;/p&gt;

&lt;h2 id=&quot;owasp-zap&quot;&gt;OWASP ZAP&lt;/h2&gt;
&lt;p&gt;OWASP ZAP (short for Zed Attack Proxy) is an open-source web application security scanner. It is intended to be used by both those new to application security as well as professional penetration testers.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-200-bda195394.webp 200w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-400-bda195394.webp 400w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-800-bda195394.webp 800w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-1032-bda195394.webp 1032w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-200-bda195394.png 200w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-400-bda195394.png 400w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-800-bda195394.png 800w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-1032-bda195394.png 1032w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-800-bda195394.png&quot; alt=&quot;post image&quot; width=&quot;1032&quot; height=&quot;641&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;More at &lt;a href=&quot;https://owasp.org/www-project-zap/&quot;&gt;https://owasp.org/www-project-zap/&lt;/a&gt;&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;path-traversal&quot;&gt;Path Traversal&lt;/h2&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-path-traversal-alert-200-f835e0ab6.webp 200w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-path-traversal-alert-400-f835e0ab6.webp 400w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-path-traversal-alert-495-f835e0ab6.webp 495w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-path-traversal-alert-200-f835e0ab6.png 200w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-path-traversal-alert-400-f835e0ab6.png 400w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-path-traversal-alert-495-f835e0ab6.png 495w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-path-traversal-alert-495-f835e0ab6.png&quot; alt=&quot;post image&quot; width=&quot;495&quot; height=&quot;167&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As the &lt;a href=&quot;https://owasp.org/www-community/attacks/Path_Traversal&quot;&gt;Path Traversal alert documentation&lt;/a&gt; explains:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with “dot-dot-slash (../)” sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The most common way to use this kind of attack in ASP .NET applications is trying to download some configuration files, like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web.config&lt;/code&gt; file, from the server file system. By default, the IIS handlers will not allow download this kind of file.&lt;/p&gt;

&lt;h2 id=&quot;validating-user-input&quot;&gt;Validating user input&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;It is good practice (mandatory in fact) to validate user input, especially on routes/actions where there is some kind of access to the file system.&lt;/p&gt;

&lt;p&gt;OWASP ZAP docs say:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Validate the user’s input by only accepting known good – do not sanitize the data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;modelstateisvalid&quot;&gt;ModelState.IsValid&lt;/h3&gt;
&lt;p&gt;An easy way to perform a basic user input validation is to use the ModelState.IsValid, this property will always be false if any data sent by the client has an invalid or unexpected value. This is a good way to only accepted the expected type for model properties.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Model state represents errors that come from two subsystems: model binding and model validation. Errors that originate from model binding are generally data conversion errors. For example, an “x” is entered in an integer field. Model validation occurs after model binding and reports errors where data doesn’t conform to business rules. For example, a 0 is entered in a field that expects a rating between 1 and 5.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A way that you can extend and either improve the validation is using the &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation?view=aspnetcore-3.1#validation-attributes&quot;&gt;Validation attributes&lt;/a&gt;, like CreditCard, Compare, EmailAddress, Phone, Range, RegularExpression, Required, StringLength, Url, and Remote,&lt;/p&gt;

&lt;h3 id=&quot;validatemodelattribute&quot;&gt;ValidateModelAttribute&lt;/h3&gt;
&lt;p&gt;You can even use a custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActionFilterAttribute&lt;/code&gt; to validate all your action models like the MS official documentation suggest: &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/model-validation-in-aspnet-web-api#handling-validation-errors&quot;&gt;Model Validation in ASP.NET Web API&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/8ebd55525bc250095e95db2eb5712aca.js?file=ValidateModelAttribute.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;And use it on WebApiConfig:
&lt;script src=&quot;https://gist.github.com/8ebd55525bc250095e95db2eb5712aca.js?file=WebApiConfig.cs&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Does not matter if you will use Validation attributes or another validation way, the important thing here is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;you should always validate the user input before use it&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;check-all-file-system-handling-actions&quot;&gt;Check all file system handling actions&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/telescope-128-e0357d1e6.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/telescope-128-e0357d1e6.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/telescope-128-e0357d1e6.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;If you have any action on your API that lets the user define a file system path, be sure to validate if it not passing strings like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..\&lt;/code&gt;. If you not validate inputs like this, you can allow an attacker to navigate on your app file system, even the host machine file system.&lt;/p&gt;

&lt;p&gt;OWASP ZAP docs say:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Ensure the user cannot supply all parts of the path – surround it with your path code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;false-positives&quot;&gt;False Positives&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;OWASP ZAP can report some false positives, especially for routes that have an argument with the same name of the action: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://localhost:8080/api/tests/test1?kind=test1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This happens because OWASP ZAP tries to use action name in all arguments in an attempt to see if can access a different resource or file.&lt;/p&gt;

&lt;p&gt;In my case, all reports like this were false positives.&lt;/p&gt;

&lt;p&gt;You can change the risk alert to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False Positive&lt;/code&gt; for each URL in the context alert filters:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-200-d561dca0a.webp 200w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-400-d561dca0a.webp 400w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-800-d561dca0a.webp 800w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-1029-d561dca0a.webp 1029w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-200-d561dca0a.png 200w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-400-d561dca0a.png 400w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-800-d561dca0a.png 800w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-1029-d561dca0a.png 1029w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-800-d561dca0a.png&quot; alt=&quot;post image&quot; width=&quot;1029&quot; height=&quot;640&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Remember: only mark an alert as false positive after had to validate that URL action code and you are certain that is a false positive&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;In most cases ASP .NET Web APIs/Apps are not exposed to a Path Traversal attack, but a poor user input validation in file system handling action can easily expose the whole API/APP.&lt;/p&gt;

&lt;p&gt;These are the basic rules of OWASP ZAP documents:&lt;/p&gt;

&lt;h3 id=&quot;how-to-identify-if-you-are-vulnerable&quot;&gt;How to identify if you are vulnerable&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Be sure you understand how the underlying operating system will process filenames handed off to it.&lt;/li&gt;
  &lt;li&gt;Don’t store sensitive configuration files inside the web root&lt;/li&gt;
  &lt;li&gt;For Windows IIS servers, the web root should not be on the system disk, to prevent recursive traversal back to system directories.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-to-protect-yourself&quot;&gt;How to protect yourself&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Prefer working without user input when using file system calls&lt;/li&gt;
  &lt;li&gt;Use indexes rather than actual portions of file names when templating or using language files (ie value 5 from the user submission = Czechoslovakian, rather than expecting the user to return “Czechoslovakian”)&lt;/li&gt;
  &lt;li&gt;Ensure the user cannot supply all parts of the path – surround it with your path code&lt;/li&gt;
  &lt;li&gt;Validate the user’s input by only accepting known good – do not sanitize the data&lt;/li&gt;
  &lt;li&gt;Use chrooted jails and code access policies to restrict where the files can be obtained or saved to&lt;/li&gt;
  &lt;li&gt;If forced to use user input for file operations, normalize the input before using in file io API’s, such as normalize().&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
</feed>