<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://diegogiacomelli.com.br/feed.xml" rel="self" type="application/atom+xml" /><link href="http://diegogiacomelli.com.br/" rel="alternate" type="text/html" /><updated>2019-07-29T12:48:32-03:00</updated><id>http://diegogiacomelli.com.br/feed.xml</id><title type="html">Diego Giacomelli</title><subtitle>programmer</subtitle><entry><title type="html">Unity and Game Development links (July 29th 2019)</title><link href="http://diegogiacomelli.com.br/unity-and-gamedev-links-july-29th-2019/" rel="alternate" type="text/html" title="Unity and Game Development links (July 29th 2019)" /><published>2019-07-29T00:00:00-03:00</published><updated>2019-07-29T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-and-gamedev-links-july-29th-2019</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-and-gamedev-links-july-29th-2019/">&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Kristin Stock&lt;/strong&gt; published an amazing video about SPH (Smoothed Particle Hydrodynamics) in Unity. (&lt;a href=&quot;https://www.youtube.com/watch?v=NJBz8rMJ0ZU&quot;&gt;Fluid Simulation / Smoothed Particle Hydrodynamics in Unity&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/NJBz8rMJ0ZU &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SIGGRAPH 2019&lt;/strong&gt; is taking place in Los Angeles, between July 28 and August 1. Unity has made a page where you can see the Unity’s  presentations calendar (&lt;a href=&quot;https://unity.com/events/siggraph-2019&quot;&gt;Unity at SIGGRAPH 2019&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kin&lt;/strong&gt; is a currency for the digital world that just now caught my attention. There is an SDK for Unity. They are posing a challenge for Unity developers, the deadline is December 30, 2019 (&lt;a href=&quot;https://kin.org/developers/unityapply/gaming-challenge/&quot;&gt;Kin Gaming Challenge&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Kin enables the free and instant transfer of value between users, no matter how small the amount. This lets users give something more meaningful than a like, making your app even more fun and engaging.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lasse Jon Fuglsang Pedersen and Robert Cupisz&lt;/strong&gt; in the making of The Heretic, a real-time short film made with Unity. (&lt;a href=&quot;https://www.youtube.com/watch?v=5H9Jo2qjJXs&quot;&gt;Lasse Jon Fuglsang Pedersen, Robert Cupisz - Making of The Heretic&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/5H9Jo2qjJXs &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made two videos, one showing his top 5 assets for Unity in 2019 (&lt;a href=&quot;https://www.youtube.com/watch?v=s-4s9KhO_D0&quot;&gt;5 AWESOME ASSETS FOR UNITY 2019!&lt;/a&gt;) and a second one about the new Multiplayer system that Unity is working on (&lt;a href=&quot;https://www.youtube.com/watch?v=n3kcbUBuPpk&quot;&gt;NEW MULTIPLAYER in Unity 2019 – Connected Games (Overview)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tyler Hurd&lt;/strong&gt; presented to the world a tool that him have been working: Actuator leverages real-time physics and tracked VR devices for rigging, animating and puppeteering. (&lt;a href=&quot;http://tylerhurd.com/projects/actuator/&quot;&gt;Actuator)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/moYfppZzf2c &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;</content><author><name></name></author><category term="unity3d" /><category term="gamedev" /><summary type="html"></summary></entry><entry><title type="html">Publishing a .NET Core project to SonarCloud with Cake</title><link href="http://diegogiacomelli.com.br/publishing-a-dotnet-core-project-to-sonarcloud-with-cake/" rel="alternate" type="text/html" title="Publishing a .NET Core project to SonarCloud with Cake" /><published>2019-07-25T00:00:00-03:00</published><updated>2019-07-25T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/publishing-a-dotnet-core-project-to-sonarcloud-with-cake</id><content type="html" xml:base="http://diegogiacomelli.com.br/publishing-a-dotnet-core-project-to-sonarcloud-with-cake/">&lt;p&gt;In this post I will show how to use &lt;a href=&quot;https://cakebuild.net/&quot;&gt;Cake&lt;/a&gt; to build and test a .NET Core project and then publish the results to &lt;a href=&quot;https://sonarcloud.io&quot;&gt;SonarCloud&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Cake&lt;/strong&gt; (C# Make) is a cross-platform build automation system with a C# DSL for tasks such as compiling code, copying files and folders, running unit tests, compressing files and building NuGet packages.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;SonarCloud&lt;/strong&gt; is a cloud service offered by SonarSource and based on SonarQube. SonarQube is a widely adopted open source platform to inspect continuously the quality of source code and detect bugs, vulnerabilities and code smells.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cake&lt;/strong&gt;: install the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cake&lt;/code&gt; on your .NET Core project before start this tutorial. Follow this &lt;a href=&quot;https://cakebuild.net/docs/tutorials/setting-up-a-new-project&quot;&gt;Setting Up A New Project&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SonarCloud&lt;/strong&gt;: create an account and add a project on &lt;a href=&quot;https://sonarcloud.io&quot;&gt;https://sonarcloud.io&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;creating-the-buildcake&quot;&gt;Creating the build.cake&lt;/h2&gt;
&lt;p&gt;In project root folder, create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;build.cake&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;adding-the-tools-and-addin-references&quot;&gt;Adding the tools and addin references&lt;/h3&gt;
&lt;p&gt;Add the lines below to the file:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2ff83d13a8b970aacd4aa94b9182e7bb.js?file=build.v1.cake&quot;&gt; &lt;/script&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;We’ll use those tools and addins to create the complete .cake script.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;setting-the-variables&quot;&gt;Setting the variables&lt;/h3&gt;
&lt;p&gt;Now we need to set some variables:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2ff83d13a8b970aacd4aa94b9182e7bb.js?file=build.v2.cake&quot;&gt; &lt;/script&gt;

&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;solutionDir&lt;/strong&gt;: is the subfolder where your solution source code is located.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sonarLogin&lt;/strong&gt;: Change the &lt;code class=&quot;highlighter-rouge&quot;&gt;[SONARCLOUD-USER-TOKEN]&lt;/code&gt; for a token you can generate at the page &lt;a href=&quot;https://sonarcloud.io/account/security/&quot;&gt;https://sonarcloud.io/account/security/&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;branch&lt;/strong&gt;: if you are using git, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;GitBranchCurrent(&quot;.&quot;).FriendlyName&lt;/code&gt; will pass the right branch name to SonarCloud, otherwise you can set it manually.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are using &lt;code class=&quot;highlighter-rouge&quot;&gt;AppVeyor&lt;/code&gt; you can use line bellow to allow discover the branch name locally and in the AppVeyor:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2ff83d13a8b970aacd4aa94b9182e7bb.js?file=build.v3.cake&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;build-task&quot;&gt;Build task&lt;/h3&gt;
&lt;p&gt;The first task definitions will build our .NET Core project:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2ff83d13a8b970aacd4aa94b9182e7bb.js?file=build.v4.cake&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;test-task&quot;&gt;Test task&lt;/h3&gt;
&lt;p&gt;Now we will define the task to run our tests:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2ff83d13a8b970aacd4aa94b9182e7bb.js?file=build.v5.cake&quot;&gt; &lt;/script&gt;

&lt;p&gt;This task use &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenCover&lt;/code&gt; to collect the code coverage. Install it on your test project using the &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenCover&lt;/code&gt; NuGet package:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;install-package OpenCover
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sonar-tasks&quot;&gt;Sonar tasks&lt;/h3&gt;
&lt;p&gt;The lasts tasks to define are responsible to scan the project and send the build and tests results to SonarCloud:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2ff83d13a8b970aacd4aa94b9182e7bb.js?file=build.v6.cake&quot;&gt; &lt;/script&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Key&lt;/strong&gt;: is your project key on SonarCloud. You can get it throw these steps on &lt;a href=&quot;https://sonarcloud.io&quot;&gt;SonarCloud&lt;/a&gt;:
    &lt;ul&gt;
      &lt;li&gt;Select your project.&lt;/li&gt;
      &lt;li&gt;Open the menu &lt;code class=&quot;highlighter-rouge&quot;&gt;Administration / Update Key&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Organization&lt;/strong&gt;: is the name of your organization on SonarCloud. If your &lt;code class=&quot;highlighter-rouge&quot;&gt;projects&lt;/code&gt; page is &lt;code class=&quot;highlighter-rouge&quot;&gt;https://sonarcloud.io/organizations/YOUR-ORGANIZATION/projects&lt;/code&gt;, then your &lt;strong&gt;Organization&lt;/strong&gt; value is &lt;code class=&quot;highlighter-rouge&quot;&gt;YOUR-ORGANIZATION&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Exclusions&lt;/strong&gt;: here you can define the wildcards to excluse some files fron Sonar scan, like sample, docs and test files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;defining-the-tasks-order&quot;&gt;Defining the tasks order&lt;/h3&gt;
&lt;p&gt;The last part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.cake&lt;/code&gt; file define the order that tasks will run:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2ff83d13a8b970aacd4aa94b9182e7bb.js?file=build.v7.cake&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;running-the-buildcake&quot;&gt;Running the build.cake&lt;/h2&gt;
&lt;p&gt;Now, every time you want to build, test and publish the results to SonarCloud you need to type this command on your project root folder:&lt;/p&gt;

&lt;p&gt;MacOS:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./build.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Windows:&lt;/p&gt;

&lt;p&gt;Open a &lt;code class=&quot;highlighter-rouge&quot;&gt;powershell&lt;/code&gt; terminal:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;uild.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the build finish, you should see something like this:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/07/25/publishing-a-dotnet-core-project-to-sonarcloud-with-cake/cake-terminal.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;Cake build&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Then open your project on &lt;a href=&quot;https://sonarcloud.io/projects&quot;&gt;SonarCloud&lt;/a&gt;:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/07/25/publishing-a-dotnet-core-project-to-sonarcloud-with-cake/sonarcloud-dashboard.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;SonarCloud dashboard&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;That’s it, now your project is ready to using cake to publish results to SonarCloud.&lt;/p&gt;

&lt;h2 id=&quot;complete-buildcake&quot;&gt;Complete build.cake&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2ff83d13a8b970aacd4aa94b9182e7bb.js?file=build.cake&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;extras&quot;&gt;Extras&lt;/h2&gt;
&lt;p&gt;If you are using git, you can add this lines to your .gitignore file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tools/**
!tools/packages.config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="dotnet" /><category term="sonar" /><category term="cake" /><summary type="html">In this post I will show how to use Cake to build and test a .NET Core project and then publish the results to SonarCloud. Introduction</summary></entry><entry><title type="html">unitytips&amp;amp;colon; Scene Preview Window</title><link href="http://diegogiacomelli.com.br/unitytips-scene-preview-window/" rel="alternate" type="text/html" title="unitytips&amp;colon; Scene Preview Window" /><published>2019-07-23T00:00:00-03:00</published><updated>2019-07-23T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-scene-preview-window</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-scene-preview-window/">&lt;p&gt;I created this window that extends the Unity 3D editor so you can preview the scenes by selecting them in the project window.&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/eh8nqfDCUVo &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt;
&lt;p&gt;As can be seen from the video above the extension can be used in two ways after adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene Preview&lt;/code&gt; window to the editor (via the&lt;code class=&quot;highlighter-rouge&quot;&gt; Window / Scene Preview&lt;/code&gt; menu):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Selects &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene&lt;/code&gt; and clicking the &lt;code class=&quot;highlighter-rouge&quot;&gt;Capture screenshot&lt;/code&gt; button in both edit mode and play mode.&lt;/li&gt;
  &lt;li&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene&lt;/code&gt; in play mode and if there is still no preview screenshot for the scene, a screenshot will be taken automatically after 10 seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Below you can see only the code of &lt;code class=&quot;highlighter-rouge&quot;&gt;ScenePreviewEditor.cs&lt;/code&gt;. There are 3 more files for this extension.&lt;/p&gt;

&lt;p&gt;Download the full &lt;a href=&quot;https://gist.github.com/giacomelli/ad9d4dcdb702d2d1edf0663628ca9608&quot;&gt;gist&lt;/a&gt; or use the &lt;a href=&quot;/unitytips-gist-importer&quot;&gt;Gist Importer&lt;/a&gt; to import the complete &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene Preview Window&lt;/code&gt; for your project.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ad9d4dcdb702d2d1edf0663628ca9608.js?file=ScenePreviewWindow.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Remember that you need to save the above .cs files inside any &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder&lt;/p&gt;
&lt;/div&gt;</content><author><name></name></author><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><category term="editor-window" /><summary type="html">I created this window that extends the Unity 3D editor so you can preview the scenes by selecting them in the project window.</summary></entry><entry><title type="html">Unity and Game Development links (July 22th 2019)</title><link href="http://diegogiacomelli.com.br/unity-and-gamedev-links-july-22th-2019/" rel="alternate" type="text/html" title="Unity and Game Development links (July 22th 2019)" /><published>2019-07-22T00:00:00-03:00</published><updated>2019-07-22T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-and-gamedev-links-july-22th-2019</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-and-gamedev-links-july-22th-2019/">&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Stephen Palmer&lt;/strong&gt; presented the preview of Addressables, the Unity new system for editor and runtime asset management. (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/15/addressable-asset-system&quot;&gt;Addressable Asset System&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;What we found when talking to developers about their experience using Asset Bundles was that almost everyone doing so successfully were more or less writing the same high level systems a thousand slightly different ways. Addressables was born out of this obvious need for a framework to solve a set of common problems related to addressing, building, and loading assets.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cyan&lt;/strong&gt; made a blog post about Voronoi noise, a type of noise based on cells,  and shaders (&lt;a href=&quot;https://cyangamedev.wordpress.com/2019/07/16/voronoi/&quot;&gt;Voronoi&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kat Woolley&lt;/strong&gt; introduced the Creator Kits, a beginners kit to learn Unity basics without writing code. (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/17/creator-kits-get-creating-quickly&quot;&gt;Creator Kits – Get creating quickly&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;We’ve produced three kits: A puzzle game, an FPS and an RPG. Get a brief introduction to each game genre and learn the basics of Unity without writing code. The kits offer beginners a good way to create your own game in under an hour before embarking on something with a broader scope like the Game Kits.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unity&lt;/strong&gt; made a case study about Playkot, the creators of Age Of Magic (&lt;a href=&quot;https://unity.com/case-study/playkot-age-of-magic&quot;&gt;Playkot – A Unity developer case study&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;How do a businessman and a software developer working at an improvised kitchen table in St. Petersburg, Russia go on to produce sophisticated social games and mobile RPGs with some of the best graphics in the industry? Meet Sasha Pavlov and Oleg Sysoev, who started Playkot Games in 2009. Since then, they’ve grown their team to 150+ by carefully combining the right people, adopting Unity, and implementing the right strategies to capture significant market share around the world.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Anna Lee&lt;/strong&gt; wrote a blog post on the series &lt;code class=&quot;highlighter-rouge&quot;&gt;Faces of Unity&lt;/code&gt;, now presenting Dave Hunt, Lead Technical Artist in Copenhagen (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/19/faces-of-unity-dave-hunt&quot;&gt;Faces of Unity – Dave Hunt)&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Learn more about Dave as he shares about his career journey and work-life balance as a parent here at Unity!&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Brackeys&lt;/strong&gt; published a video about learnings in 10 years of game development! (&lt;a href=&quot;https://youtu.be/T18X1HuawRc&quot;&gt;What I learned after 10 Years of Game Development!&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made a video showing how to make explosions and shockwave effects in Unity (&lt;a href=&quot;https://youtu.be/u7lwL7ubwKA&quot;&gt;SHOCKWAVE &amp;amp; EXPLOSION IN UNITY 2019! (Tutorial)&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="unity3d" /><category term="gamedev" /><summary type="html"></summary></entry><entry><title type="html">GeneticSharp in the Wild&amp;amp;colon; Design of a Warehouse Order Picking Policy</title><link href="http://diegogiacomelli.com.br/geneticsharp-in-the-wild-design-of-a-warehouse-order-picking-policy/" rel="alternate" type="text/html" title="GeneticSharp in the Wild&amp;colon; Design of a Warehouse Order Picking Policy" /><published>2019-07-18T00:00:00-03:00</published><updated>2019-07-18T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/geneticsharp-in-the-wild-design-of-a-warehouse-order-picking-policy</id><content type="html" xml:base="http://diegogiacomelli.com.br/geneticsharp-in-the-wild-design-of-a-warehouse-order-picking-policy/">&lt;p&gt;I started a &lt;a href=&quot;/tags/geneticsharp-in-the-wild/&quot;&gt;series of posts&lt;/a&gt; about some outstanding scientific papers and projects using &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp&quot;&gt;GeneticSharp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For this fourth post the choose one is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Design of a Warehouse Order Picking Policy - Using Genetic Algorithm&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The main motivation of the author about this paper was:
&lt;em&gt;improving order-picking process is considered which is an essential
operation critically impacting warehouse and supply chain performance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The study is composed of two phases: In the first phase, the
shortest path between each pair of items is determined in a pick list leading to the
second phase of determining the sequence of all items to be picked. A
mathematical model is utilized to find the shortest path between each item pair in
a pick list.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;A genetic algorithm based approach is developed to decide the picking
sequence of all items in an order list, given the shortest distance between each pair
of items. The performance of the proposed algorithms is compared to popular
heuristics used for multi-block warehouses, namely: S-Shape and Largest Gap.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ahmet Can Saner, the paper author made &lt;a href=&quot;http://diegogiacomelli.com.br/GeneticSharp-v1.2.0-sequence-mutations/&quot;&gt;great contributions to GeneticSharp&lt;/a&gt;, that him developed during his master degree, like: Displacement Mutation, Insertion Mutation and Partial Shuffle Mutation (PSM).&lt;/p&gt;

&lt;h1 id=&quot;results&quot;&gt;Results&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;For 25-item pick lists, all of the proposed
GA algorithms are superior to S-Shape and Largest Gap heuristics, in terms of travelled
distance. GA with order crossover operator, inversion mutation operator provides the best
results in terms of average travelled distance&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;For 50-item pick lists, all of the proposed GA
algorithms are superior to S-Shape, in terms of travelled distance. But when compared to
Largest Gap heuristic, only GA algorithms with inversion mutation operator performs
better than Largest Gap, in terms of travelled distance.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;For 100-
item pick lists, only GA algorithms with inversion mutation operator performs better than
both S-Shape and Largest Gap heuristics, in terms of travelled distance. GA with order
crossover operator, inversion mutation operator setting performs the best in terms of
average travelled distance for pick lists of size 100.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;author&quot;&gt;Author&lt;/h1&gt;
&lt;p&gt;Ahmet Can Saner, with Dr. Zehra
Düzgi supervision, wrote the paper for his master degree at Istanbul Bilgi University.&lt;/p&gt;

&lt;h1 id=&quot;further-reading&quot;&gt;Further reading&lt;/h1&gt;
&lt;p&gt;You can access the full paper directly on &lt;a href=&quot;http://openaccess.bilgi.edu.tr:8080/xmlui/bitstream/handle/11411/1310/Design%20of%20a%20warehouse%20order%20picking%20policy%20using%20genetic%20algorithm.pdf?sequence=1&amp;amp;isAllowed=y&quot;&gt;Istanbul Bilgi University library&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="geneticsharp" /><category term="geneticsharp-in-the-wild" /><summary type="html">I started a series of posts about some outstanding scientific papers and projects using GeneticSharp.</summary></entry><entry><title type="html">unitytips&amp;amp;colon; Hierarchy Window GameObject Icon</title><link href="http://diegogiacomelli.com.br/unitytips-hierarchy-window-gameobject-icon/" rel="alternate" type="text/html" title="unitytips&amp;colon; Hierarchy Window GameObject Icon" /><published>2019-07-16T00:00:00-03:00</published><updated>2019-07-16T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-hierarchy-window-gameobject-icon</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-hierarchy-window-gameobject-icon/">&lt;p&gt;You can show the game objects icons in hierarchy window using &lt;code class=&quot;highlighter-rouge&quot;&gt;EditorGUIUtility.ObjectContent&lt;/code&gt;&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/fwtQ51ybHpc &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/a73c947508ee0b32eef7c422620ec6b6.js?file=HierarchyWindowGameObjectIcon.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;p&gt;The icons used in the video are &lt;a href=&quot;https://fontawesome.com/icons&quot;&gt;Font Awesome&lt;/a&gt; icons and I used &lt;a href=&quot;http://fa2png.io/&quot;&gt;fa2png.io&lt;/a&gt; to convert them to .png.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Remember that you need to save the above .cs inside any &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder&lt;/p&gt;
&lt;/div&gt;</content><author><name></name></author><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><category term="hierarchy-window" /><summary type="html">You can show the game objects icons in hierarchy window using EditorGUIUtility.ObjectContent</summary></entry><entry><title type="html">Unity and Game Development links (July 15th 2019)</title><link href="http://diegogiacomelli.com.br/unity-and-gamedev-links-july-15th-2019/" rel="alternate" type="text/html" title="Unity and Game Development links (July 15th 2019)" /><published>2019-07-15T00:00:00-03:00</published><updated>2019-07-15T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-and-gamedev-links-july-15th-2019</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-and-gamedev-links-july-15th-2019/">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Alexander Ameye&lt;/strong&gt; made a tutorial about edge detection shaders with Shader Graph and how to use some Lightweight Rendering Pipeline customization to generate DepthNormals (&lt;a href=&quot;https://alexanderameye.github.io/edgedetection&quot;&gt;Edge Detection Shader&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cyan&lt;/strong&gt; made a blog post about Render Textures and how to read them  in a C# script (&lt;a href=&quot;https://cyangamedev.wordpress.com/2019/07/08/render-textures/&quot;&gt;Render Textures&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Render Textures are stored and handled on the GPU, which means we can’t access the data from them in a C# script which runs on the CPU – and you shouldn’t really need to for most effects. However, I wanted my player to be able to interact with water which was based on a Render Texture and only spawn particles if the player was in the water, along with some other effects.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Frank Manley&lt;/strong&gt; wrote about the Unity Hackweek 2019 (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/08/unity-hackweek-2019-tackling-hard-problems-building-team-skills&quot;&gt;Unity Hackweek 2019: Tackling hard problems, building team skills&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;What happens when you put 700+ people from Unity and our ecosystem in a secluded location once a year and tell them to solve hard tech, coding, and process problems? Their instructions? Unleash your creativity, collaborate like crazy, and embrace diverse perspectives.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tracy Joseph and Brittany Edmond,&lt;/strong&gt; wrote a blog post about their experience on Cannes Lions 2019 (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/09/cannes-lions-2019-celebrating-creativity-innovation-storytelling&quot;&gt;Cannes Lions 2019: Celebrating creativity, innovation &amp;amp; storytelling&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;This year at the Cannes Lions International Festival of Creativity, Unity showed up as the leading real-time 3D creation platform.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Garrexus&lt;/strong&gt; made a breakdown on the Screen space Cosmic shader (&lt;a href=&quot;https://realtimevfx.com/t/screen-space-cosmic-shader-breakdown-unity-ase-shaders-textures-included/9753&quot;&gt;Screen space Cosmic shader breakdown (Unity/ASE, Shaders/Textures included)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Alexander Ameye&lt;/strong&gt; again, now with a tutorial about collision effect (&lt;a href=&quot;https://alexanderameye.github.io/collision.html&quot;&gt;Collision Effect&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tenzin W. and Eduardo Oriz,&lt;/strong&gt; wrote about the results of the latest Asset Store challenge (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/11/the-winners-inside-the-vault-3d-environment-art-contest&quot;&gt;The Winners! Inside the Vault: 3D Environment Art Contest&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;A number of judges evaluated all of the impressive submissions to pick the winners of the latest Asset Store challenge: Use Substance Painter to texture stunning assets that expand the futuristic world of Buried Memories: Yggdrasil.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Anis Benyoub&lt;/strong&gt; made a speech about ray tracing hardware acceleration (&lt;a href=&quot;https://www.youtube.com/watch?v=wbuvrAdNtmQ&quot;&gt;Anis Benyoub - Leveraging Ray Tracing Hardware Acceleration In The Unity Game Engine&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Ray tracing hardware acceleration (RTX) is a newly available feature that allows graphics developers to increase their image quality. While solving complex problems, properly integrating this new set of APIs (DXR and Vulkan ray tracing) in a game engine is tricky, especially so when the engine supports anything from mobile to virtual production.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Brackeys&lt;/strong&gt; published a video about gamepad input (&lt;a href=&quot;https://www.youtube.com/watch?v=p-3S73MaDP8&quot;&gt;CONTROLLER INPUT in Unity!&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made a video showing how to make terrains (&lt;a href=&quot;https://www.youtube.com/watch?v=2Vvwjfp-hg8&quot;&gt;How to make Terrains with Unity 2019! (Tutorial)&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="unity3d" /><category term="gamedev" /><summary type="html"></summary></entry><entry><title type="html">GeneticSharp 2.6.0 - Blazor template</title><link href="http://diegogiacomelli.com.br/geneticsharp-2.6.0-blazor-template/" rel="alternate" type="text/html" title="GeneticSharp 2.6.0 - Blazor template" /><published>2019-07-11T00:00:00-03:00</published><updated>2019-07-11T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/geneticsharp-2.6.0-blazor-template</id><content type="html" xml:base="http://diegogiacomelli.com.br/geneticsharp-2.6.0-blazor-template/">&lt;p&gt;The &lt;strong&gt;&lt;a href=&quot;https://github.com/giacomelli/GeneticSharp&quot;&gt;GeneticSharp 2.6.0&lt;/a&gt;&lt;/strong&gt; is out.&lt;/p&gt;

&lt;h1 id=&quot;blazor-template&quot;&gt;Blazor template&lt;/h1&gt;
&lt;p&gt;Now we have 4 &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet new&lt;/code&gt; templates, besides the &lt;code class=&quot;highlighter-rouge&quot;&gt;GeneticSharpConsoleApp&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GeneticSharpTspConsoleApp&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GeneticSharpTspUnity3d&lt;/code&gt; already existent, a new template for a Blazor client app was added: &lt;code class=&quot;highlighter-rouge&quot;&gt;GeneticSharpTspBlazorApp&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new -i GeneticSharp.Templates
dotnet new GeneticSharpTspBlazorApp -o TspBlazorApp
cd TspBlazorApp
dotnet run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/07/11/geneticsharp-2.6.0-blazor-template/geneticsharp-blazor-template.gif &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;If you want to know more about how to use GeneticSharp with Blazor, take a look in this tutorial &lt;a href=&quot;http://diegogiacomelli.com.br/tsp-with-geneticsharp-and-blazor/&quot;&gt;TSP with GeneticSharp and Blazor&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;new-papers-and-projects-using-geneticsharp&quot;&gt;New papers and projects using GeneticSharp&lt;/h1&gt;
&lt;p&gt;Four papers and one project were added to the list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/blob/master/docs/mentioning-GeneticSharp/Design-of-a-warehouse-order-picking-policy-using-genetic-algorithm.pdf&quot;&gt;Design of a warehouse order picking policy using genetic algorithm (paper)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ieeexplore.ieee.org/document/8643945&quot;&gt;Fabrication of Adiabatic Quantum-Flux-Parametron Integrated Circuits Using an Automatic Placement Tool Based on Genetic Algorithms (paper)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/blob/master/docs/mentioning-GeneticSharp/Modelling-and-Simulation-Analysis-of-Goal-Oriented-Business-Process.pdf&quot;&gt;Modelling and Simulation Analysis of Goal-Oriented Business Process (paper)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/blob/master/docs/mentioning-GeneticSharp/Optimisation-par-algorithme-genetique-de-structures-lattices.pdf&quot;&gt;Optimization by genetic algorithm of lattices structures for the media generation in additive manufacturing (paper)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://trussoptimizationweb.herokuapp.com&quot;&gt;TrussOptimization (project)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-to-install-the-new-version&quot;&gt;How to install the new version&lt;/h1&gt;
&lt;h3 id=&quot;net-standard-20&quot;&gt;.NET Standard 2.0&lt;/h3&gt;
&lt;p&gt;Only GeneticSharp:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;install-package GeneticSharp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;GeneticSharp and extensions (TSP, AutoConfig, Bitmap equality, Equality equation, Equation solver, Function builder, etc):&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;install-package GeneticSharp.Extensions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;unity3d&quot;&gt;Unity3D&lt;/h2&gt;
&lt;p&gt;You should use the &lt;a href=&quot;https://github.com/xoofx/UnityNuGet&quot;&gt;UnityNuGet&lt;/a&gt; to install GeneticSharp directly from NuGet.&lt;/p&gt;

&lt;p&gt;Or you can use the latest GeneticSharp.unitypackage available on our &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/releases&quot;&gt;release page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s evolve!&lt;/p&gt;</content><author><name></name></author><category term="geneticsharp" /><category term="dotnet" /><category term="release" /><category term="blazor" /><summary type="html">The GeneticSharp 2.6.0 is out.</summary></entry><entry><title type="html">TSP with GeneticSharp and Blazor</title><link href="http://diegogiacomelli.com.br/tsp-with-geneticsharp-and-blazor/" rel="alternate" type="text/html" title="TSP with GeneticSharp and Blazor" /><published>2019-07-10T00:00:00-03:00</published><updated>2019-07-10T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/tsp-with-geneticsharp-and-blazor</id><content type="html" xml:base="http://diegogiacomelli.com.br/tsp-with-geneticsharp-and-blazor/">&lt;p&gt;In this post I will show how to use GeneticSharp and Blazor to solve the TSP (Travelling salesman problem).&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;According to Wikipedia The travelling salesman problem (TSP) asks the following question:&lt;em&gt;&lt;strong&gt;“Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city and returns to the origin city?”&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;TSP is a classic sample to test some optimization techniques, as well it’s fairly used to demonstrate how to implement a genetic algorithm. For these reasons I will use it to show you how to implement a basic genetic algorithm in Blazor using GeneticSharp.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;This post is a like a mirror of the &lt;a href=&quot;/tsp-with-GeneticSharp-and-Unity3d&quot;&gt;TSP with GeneticSharp an Unity3D&lt;/a&gt;. It’s using the same format to teach TSP and GeneticSharp, but instead of Unity3D, this one is about Blazor.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;You can see the final result of this tutorial on &lt;a href=&quot;/apps/geneticsharp-runner-blazorapp&quot;&gt;http://diegogiacomelli/apps/geneticsharp-runner-blazorapp&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Note that the performance presented on this demo is not the performance that GeneticSharp presents in other apps kinds, like a ASP .NET Core backend app, a console app or in a Unity 3D game. As WebAssembly do not support create a new thread, we get limited to use a Timer to made this sample interactive. More details about this in next sections of the post.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;To better understand this tutorial, you need to have some experiences/knowledges in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Blazor (beginner)&lt;/li&gt;
  &lt;li&gt;Genetic algorithms (beginner).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will perform a very basic use of Blazor and everything you need to complete this tutorial will be explained or provided by the code samples, but if you want to find out better what’s happening under the hood, take a look on &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/blazor/get-started?view=aspnetcore-3.0&amp;amp;viewFallbackFrom=aspnetcore-2.2&amp;amp;tabs=netcore-cli&quot;&gt;Blazor Get Started page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you need an introduction to genetic algorithms, take a look at this tutorial &lt;a href=&quot;/function-optimization-with-geneticsharp/&quot;&gt;Function optimization with GeneticSharp&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-blazor-project&quot;&gt;Creating the Blazor project&lt;/h2&gt;
&lt;p&gt;Open a terminal and type:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; Microsoft.AspNetCore.Blazor.Templates::3.0.0-preview6.19307.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;This will install the latest Blazor templates for .NET Core.&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;This tutorial is based on Blazor &lt;code class=&quot;highlighter-rouge&quot;&gt;preview6&lt;/code&gt;. If you are doing this tutorial using a newer Blazor version and have encountered some problem, leave a comment at the end of the post or contact me on &lt;a href=&quot;https://twitter.com/ogiacomelli&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Now we’ll create a scaffold Blazor app using the &lt;code class=&quot;highlighter-rouge&quot;&gt;blazor&lt;/code&gt; template:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new blazor &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; TspWithGeneticSharp
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;TspWithGeneticSharp
dotnet watch run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wait for the message &lt;code class=&quot;highlighter-rouge&quot;&gt;Application started. Press Ctrl+C to shut down&lt;/code&gt; show up in terminal, then open the url &lt;a href=&quot;http://localhost:5000&quot;&gt;http://localhost:5000&lt;/a&gt; on your browser, you should see something like this:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/07/10/tsp-with-geneticsharp-and-blazor/blazor-scaffold-app.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;installing-geneticsharp&quot;&gt;Installing GeneticSharp&lt;/h2&gt;
&lt;p&gt;Open a new terminal in the same folder and type:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet add package GeneticSharp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;This will install the latest &lt;a href=&quot;https://www.nuget.org/packages/GeneticSharp/&quot;&gt;GeneticSharp NuGet package&lt;/a&gt; in your newly created Blazor app.&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;opening-the-project&quot;&gt;Opening the project&lt;/h2&gt;
&lt;p&gt;I recommend to you use &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; to open the project. There are some cool VS Code extensions to work with Blazor.&lt;/p&gt;

&lt;p&gt;In the same terminal where you added the GeneticSharp package, type:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;code &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;This will open the Blazor project with VS Code.&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In the root folder of your Blazor project create a new subfolder called &lt;code class=&quot;highlighter-rouge&quot;&gt;Tsp&lt;/code&gt;. We’ll add all our C# classes inside this folder.&lt;/p&gt;

&lt;h2 id=&quot;defining-the-tsp-chromosome&quot;&gt;Defining the TSP chromosome&lt;/h2&gt;
&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/route.png &quot; style=&quot;max-height:200px&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;The chromosome represents a solution of the problem we are trying to solve. In our case the TSP chromosome should represent &lt;em&gt;&lt;strong&gt;“the shortest possible route that visits each city and returns to the origin city”&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To represent the cities route each gene of our chromosome will represent an index of a city in the route.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;TspChromosome.cs&lt;/code&gt;:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9addc5182943ba25eb82201e30c76418.js?file=TspChromosome.cs&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;representing-a-city&quot;&gt;Representing a city&lt;/h2&gt;
&lt;p&gt;The next step is define our genetic algorithm fitness function, but first we need to create a simple class to represent a city on a 2D space.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;TspCity.cs&lt;/code&gt;:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9addc5182943ba25eb82201e30c76418.js?file=TspCity.cs&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;the-fitness-function&quot;&gt;The fitness function&lt;/h2&gt;
&lt;p&gt;Now we need to evaluate the &lt;code class=&quot;highlighter-rouge&quot;&gt;TspChromosome&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our fitness function will evaluate the chromosome fitness based on the total distance to reach all cities in the route represented by the chromosome. The shorter the distance, the better the chromosome.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;TspFitness.cs&lt;/code&gt;: &lt;noscript&gt;&amp;lt;pre&amp;gt;400: Invalid request
&amp;lt;/pre&amp;gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/9addc5182943ba25eb82201e30c76418.js?file=TspFitness.cs&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuring-the-genetic-algorithm&quot;&gt;Configuring the Genetic Algorithm&lt;/h2&gt;
&lt;p&gt;In this step we need to configure our genetic algorithm using the &lt;code class=&quot;highlighter-rouge&quot;&gt;TspChromosome&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;TspFitness&lt;/code&gt; and some classic GA operators already built in GeneticSharp.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;TspGA.cs&lt;/code&gt;: &lt;noscript&gt;&amp;lt;pre&amp;gt;400: Invalid request
&amp;lt;/pre&amp;gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/9addc5182943ba25eb82201e30c76418.js?file=TspGA.cs&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;h3 id=&quot;why-use-timer&quot;&gt;Why use Timer?&lt;/h3&gt;
&lt;p&gt;GeneticSharp can be used as single threading or multithreading to evaluate chromosomes with the fitness function, but WebAssembly (and Blazor) can use just the UI thread, in this scenario when we call &lt;code class=&quot;highlighter-rouge&quot;&gt;GeneticAlgorithm.Start&lt;/code&gt; method it freezes the UI until the GA finish.&lt;/p&gt;

&lt;p&gt;To avoid this behavior, the solution is: run each generation of the GA inside a step in a &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Threading.Timer&lt;/code&gt; as you can see in the &lt;code class=&quot;highlighter-rouge&quot;&gt;TspGA.Run&lt;/code&gt; method.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;APIs that aren’t applicable inside of a web browser (for example, accessing the file system, opening a socket, and &lt;strong&gt;threading&lt;/strong&gt;) throw a PlatformNotSupportedException.
(&lt;a href=&quot;https://docs.microsoft.com/pt-br/aspnet/core/blazor/?view=aspnetcore-3.0&quot;&gt;https://docs.microsoft.com/pt-br/aspnet/core/blazor/?view=aspnetcore-3.0&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;h2 id=&quot;creating-the-razor-page&quot;&gt;Creating the Razor page&lt;/h2&gt;
&lt;p&gt;Inside the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;Pages&lt;/code&gt; create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;Tsp.razor&lt;/code&gt;: &lt;noscript&gt;&amp;lt;pre&amp;gt;400: Invalid request
&amp;lt;/pre&amp;gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/c10fba01c090a89702818cd1c48a125f.js?file=Tsp.v1.razor&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;As we need to interop with JavaScript to manipulate DOM, we will use some helper JS functions. Add the file &lt;code class=&quot;highlighter-rouge&quot;&gt;canvas-helper.js&lt;/code&gt; inside the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;wwwroot/js&lt;/code&gt;:  &lt;noscript&gt;&amp;lt;pre&amp;gt;400: Invalid request
&amp;lt;/pre&amp;gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/9addc5182943ba25eb82201e30c76418.js?file=canvas-helper.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Open the file &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; and add the tag below inside the tag &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;:  &lt;noscript&gt;&amp;lt;pre&amp;gt;400: Invalid request
&amp;lt;/pre&amp;gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/c10fba01c090a89702818cd1c48a125f.js?file=index.canvas-helper.html&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;h3 id=&quot;why-use-ijsruntime-do-access-dom&quot;&gt;Why use IJSRuntime do access DOM?&lt;/h3&gt;
&lt;p&gt;It’s awesome we can now use C# in the browser with Blazor. But unfortunately we can’t do everything with it, yet. Currently, WebAssembly isn’t able to directly access the DOM API, which means that Blazor isn’t able to either.
(&lt;a href=&quot;https://chrissainty.com/blazor-bites-javascript-interop&quot;&gt;https://chrissainty.com/blazor-bites-javascript-interop/&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;webassembly-roadmap&quot;&gt;WebAssembly roadmap&lt;/h3&gt;
&lt;p&gt;DOM integration is in the WebAssembly roadmap: &lt;a href=&quot;https://webassembly.org/docs/future-features&quot;&gt;https://webassembly.org/docs/future-features/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Check your terminal window where the command &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet watch run&lt;/code&gt; is running, if there is no error in that window you can access the url &lt;a href=&quot;http://localhost:5000/tsp&quot;&gt;http://localhost:5000/tsp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt; button and take a look on the browser console window, you will see the distance to reach all cities getting smaller as the generations ran.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/07/10/tsp-with-geneticsharp-and-blazor/console-window.png &quot; /&gt;
      &lt;/center&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;This is not a tutorial about Blazor good pratices, so everything here is done in the simplest possible way to introduce how to use GenticSharp with Blazor.  I do not talk about things you should use when working with Blazor, such as separate logic from UI and use Blazor components.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;drawing-the-cities&quot;&gt;Drawing the cities&lt;/h2&gt;
&lt;p&gt;Now our GA is running inside the browser, but it needs to display the cities route better.
We need to create a visual representation to the cities.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Tsp.razor&lt;/code&gt; add the method &lt;code class=&quot;highlighter-rouge&quot;&gt;DrawCitiesAsync&lt;/code&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/c10fba01c090a89702818cd1c48a125f.js?file=DrawCitiesAsync.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Then call it from &lt;code class=&quot;highlighter-rouge&quot;&gt;OnAfterRenderAsync&lt;/code&gt; method, after the &lt;code class=&quot;highlighter-rouge&quot;&gt;clearCanvas&lt;/code&gt; call:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/c10fba01c090a89702818cd1c48a125f.js?file=DrawCitiesAsyncCall.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Reload the url &lt;a href=&quot;http://localhost:5000/tsp&quot;&gt;http://localhost:5000/tsp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now you should see something like this:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/07/10/tsp-with-geneticsharp-and-blazor/draw-cities.gif &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;drawing-the-route&quot;&gt;Drawing the route&lt;/h2&gt;
&lt;p&gt;In the previous step we drawn the cities and we have the visual of the problem: the cities.&lt;/p&gt;

&lt;p&gt;Now we need to draw the solution: the route represented by the best chromosome of each generation.&lt;/p&gt;

&lt;p&gt;Add the following method to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Tsp.razor&lt;/code&gt;:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/c10fba01c090a89702818cd1c48a125f.js?file=DrawRouteAsync.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Then call it from &lt;code class=&quot;highlighter-rouge&quot;&gt;OnAfterRenderAsync&lt;/code&gt; method, after the &lt;code class=&quot;highlighter-rouge&quot;&gt;DrawCitiesAsync&lt;/code&gt; call:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/c10fba01c090a89702818cd1c48a125f.js?file=DrawRouteAsyncCall.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Reload the url &lt;a href=&quot;http://localhost:5000/tsp&quot;&gt;http://localhost:5000/tsp&lt;/a&gt; again, and hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt; button, now you should see the route been optimizing as the generations are ran:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/07/10/tsp-with-geneticsharp-and-blazor/draw-route.gif &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With only 4 C# classes, 1 JS file and 1 Blazor page we built a pretty nice sample of genetic algorithms using Blazor with GeneticSharp. Now you can improve it with your own ideas or use some of mine ;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Maybe let user change the genetic algorithm operators (crossover, mutation, selection, etc)?&lt;/li&gt;
  &lt;li&gt;Move the DrawCitiesAsync and DrawRouteAsync to &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/blazor/components?view=aspnetcore-3.0&quot;&gt;Blazor components&lt;/a&gt; responsible to only draw them?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The full source code used in this post can be download or fork from this Gist: &lt;a href=&quot;https://gist.github.com/giacomelli/9addc5182943ba25eb82201e30c76418&quot;&gt;https://gist.github.com/giacomelli/9addc5182943ba25eb82201e30c76418&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s evolve!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt; and &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="geneticsharp" /><category term="blazor" /><category term="webassembly" /><category term="tsp" /><category term="dotnet" /><summary type="html">In this post I will show how to use GeneticSharp and Blazor to solve the TSP (Travelling salesman problem). Introduction</summary></entry><entry><title type="html">unitytips&amp;amp;colon; Hierarchy Window Layer Info</title><link href="http://diegogiacomelli.com.br/unitytips-hierarchy-window-layer-info/" rel="alternate" type="text/html" title="unitytips&amp;colon; Hierarchy Window Layer Info" /><published>2019-07-09T00:00:00-03:00</published><updated>2019-07-09T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-hierarchy-window-layer-info</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-hierarchy-window-layer-info/">&lt;p&gt;You can create a visual layer info to any component on your hierarchy window using &lt;code class=&quot;highlighter-rouge&quot;&gt;EditorApplication.hierarchyWindowItemOnGUI&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/JxvOshwNdfE &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/096005d0d0df79b94321f950138220a3.js?file=HierarchyWindowLayerInfo.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;</content><author><name></name></author><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><category term="hierarchy-window" /><summary type="html">You can create a visual layer info to any component on your hierarchy window using EditorApplication.hierarchyWindowItemOnGUI:</summary></entry></feed>