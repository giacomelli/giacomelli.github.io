<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://diegogiacomelli.com.br/feed.xml" rel="self" type="application/atom+xml" /><link href="http://diegogiacomelli.com.br/" rel="alternate" type="text/html" /><updated>2019-09-05T08:06:19-03:00</updated><id>http://diegogiacomelli.com.br/feed.xml</id><title type="html">Diego Giacomelli</title><subtitle>programmer</subtitle><entry><title type="html">Creating dotnet new templates with samples</title><link href="http://diegogiacomelli.com.br/creating-dotnet-new-templates-with-samples/" rel="alternate" type="text/html" title="Creating dotnet new templates with samples" /><published>2019-09-04T00:00:00-03:00</published><updated>2019-09-04T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/creating-dotnet-new-templates-with-samples</id><content type="html" xml:base="http://diegogiacomelli.com.br/creating-dotnet-new-templates-with-samples/">&lt;p&gt;In this post I will show the needed steps and samples to create dotnet new templates.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Recently a friend asked me about the steps I follow to create dotnet new templates, while I was describing the steps to him I realized that information could be usefull to someone else or even to my future self.&lt;/p&gt;

&lt;p&gt;Sometime ago I created some dotnet new templates for GeneticSharp: &lt;a href=&quot;http://diegogiacomelli.com.br/dotnet-new-templates-for-GeneticSharp/&quot;&gt;dotnet new templates for GeneticSharp&lt;/a&gt; and I will use that template as samples for the steps below.&lt;/p&gt;

&lt;h2 id=&quot;nuget-pack--dotnet-pack&quot;&gt;Nuget pack / dotnet pack&lt;/h2&gt;
&lt;p&gt;Nowadays there are two main ways to build a dotnet new template: creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;.nuspec&lt;/code&gt; file or defining the package properties directly inside your &lt;code class=&quot;highlighter-rouge&quot;&gt;.csproj&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To GeneticSharp templates I used a &lt;code class=&quot;highlighter-rouge&quot;&gt;.nuspec&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;steps-and-samples&quot;&gt;Steps and samples&lt;/h2&gt;
&lt;p&gt;When I was trying to create the first templates I used this Microsoft documentation to learn about it: &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates&quot;&gt;Custom templates for dotnet new&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;creating&quot;&gt;Creating&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Templates&lt;/code&gt; folder: &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/tree/master/src/Templates&quot;&gt;sample&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Define the templates in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.csproj&lt;/code&gt; or create a &lt;code class=&quot;highlighter-rouge&quot;&gt;.nuspec&lt;/code&gt;: &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/blob/master/src/Templates/GeneticSharp.Templates.nuspec&quot;&gt;sample&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; folder inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;Templates&lt;/code&gt; folder: &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/tree/master/src/Templates/content&quot;&gt;sample&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Create a subfolder inside &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; for each template and put your template project source code there: &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/tree/master/src/Templates/content/ConsoleApp&quot;&gt;sample&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;For each template folder, create a subfolder &lt;code class=&quot;highlighter-rouge&quot;&gt;template.config&lt;/code&gt; then create a &lt;code class=&quot;highlighter-rouge&quot;&gt;template.json&lt;/code&gt; file: &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/blob/master/src/Templates/content/ConsoleApp/.template.config/template.json&quot;&gt;sample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;In this &lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt; you should define things like template name (shortName) and what it’s root namespace that will be replaced when a new project use this template (sourceName)&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;building-and-testing&quot;&gt;Building and testing&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Now you can create the &lt;code class=&quot;highlighter-rouge&quot;&gt;.nupkg&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet pack&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;nuget pack&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;You can test your templates locally installing them directly from the &lt;code class=&quot;highlighter-rouge&quot;&gt;.nupkg&lt;/code&gt; file: &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet new -i your_templates_file.nupkg&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Install the template: &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet new template_shortname -n new_project_namespace -o output_folder&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Here a &lt;code class=&quot;highlighter-rouge&quot;&gt;.cmd&lt;/code&gt; sample for last 3 steps: &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/blob/master/tools/buildTemplatesNuget.cmd&quot;&gt;sample&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;publishing&quot;&gt;Publishing&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;If everything is right you can publish your &lt;code class=&quot;highlighter-rouge&quot;&gt;.nupkg&lt;/code&gt; on &lt;a href=&quot;&quot;&gt;http://nuget.org&lt;/a&gt; or to your private NuGet feed: &lt;a href=&quot;https://www.nuget.org/packages/GeneticSharp.Templates/&quot;&gt;sample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;That’s it, with just 9 steps you can create your own dotnet new template and jumpstart your next project setup.&lt;/p&gt;</content><author><name></name></author><category term="dotnet" /><summary type="html">In this post I will show the needed steps and samples to create dotnet new templates. Introduction</summary></entry><entry><title type="html">unitytips&amp;amp;colon; String interpolation</title><link href="http://diegogiacomelli.com.br/unitytips-string-interpolation/" rel="alternate" type="text/html" title="unitytips&amp;colon; String interpolation" /><published>2019-09-03T00:00:00-03:00</published><updated>2019-09-03T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-string-interpolation</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-string-interpolation/">&lt;p&gt;Since C# 6.0 you can use &lt;a href=&quot;https://docs.microsoft.com/pt-br/dotnet/csharp/language-reference/tokens/interpolated&quot;&gt;String interpolation&lt;/a&gt; to make code more readable:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/09/03/unitytips-string-interpolation/string-interpolation.gif &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;The sample lines will result in the same string&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The $ special character identifies a string literal as an interpolated string.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;String interpolation provides a more readable and convenient syntax to create formatted strings than a string composite formatting feature.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="unity3d" /><category term="unitytips" /><category term="csharp" /><summary type="html">Since C# 6.0 you can use String interpolation to make code more readable: The sample lines will result in the same string</summary></entry><entry><title type="html">unitytips&amp;amp;colon; Expression body definition</title><link href="http://diegogiacomelli.com.br/unitytips-expression-body-definition/" rel="alternate" type="text/html" title="unitytips&amp;colon; Expression body definition" /><published>2019-08-27T00:00:00-03:00</published><updated>2019-08-27T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-expression-body-definition</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-expression-body-definition/">&lt;p&gt;When you have a single line method, you can use &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-operator#expression-body-definition&quot;&gt;expression body definition&lt;/a&gt; do simplify and reduce the lines of code:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/08/27/unitytips-expression-body-definition/expression-body-definition-methods.gif &quot; /&gt;
      &lt;/center&gt;

&lt;blockquote&gt;
  &lt;p&gt;Expression body definitions for methods and read-only properties are supported starting with C# 6. Expression body definitions for constructors, finalizers, property accessors, and indexers are supported starting with C# 7.0.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So you can use the expression body definition for other members, like properties:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/08/27/unitytips-expression-body-definition/expression-body-definition-properties.gif &quot; /&gt;
      &lt;/center&gt;</content><author><name></name></author><category term="unity3d" /><category term="unitytips" /><category term="csharp" /><summary type="html">When you have a single line method, you can use expression body definition do simplify and reduce the lines of code:</summary></entry><entry><title type="html">Dapper and the NVARCHAR(4000) arguments</title><link href="http://diegogiacomelli.com.br/dapper-and-the-nvarchar-4000-arguments/" rel="alternate" type="text/html" title="Dapper and the NVARCHAR(4000) arguments" /><published>2019-08-14T00:00:00-03:00</published><updated>2019-08-14T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/dapper-and-the-nvarchar-4000-arguments</id><content type="html" xml:base="http://diegogiacomelli.com.br/dapper-and-the-nvarchar-4000-arguments/">&lt;p&gt;Performing a profiler in the queries sended to the database you can see that in some cases Dapper is sending the string arguments as &lt;code class=&quot;highlighter-rouge&quot;&gt;NVARCHAR (4000)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This happen because Dapper cannot infer what is the exactly type and length of the table column on database.&lt;/p&gt;

&lt;p&gt;The downside of the &lt;code class=&quot;highlighter-rouge&quot;&gt;NVARCHAR (4000)&lt;/code&gt; in arguments is that the database can choose a bad execution plan for the query.&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;

&lt;p&gt;To avoid this you can pass the type of the argument to Dapper:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/57f1f930ddd894eb8ab54fffed453842.js?file=dapper.sample1.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;To make this solution easier to use I made two extension methods &lt;code class=&quot;highlighter-rouge&quot;&gt;ToVarChar&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ToNVarChar&lt;/code&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/57f1f930ddd894eb8ab54fffed453842.js?file=dapper.sample2.cs&quot;&gt; &lt;/script&gt;

&lt;h1 id=&quot;extension-methods&quot;&gt;Extension methods&lt;/h1&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/57f1f930ddd894eb8ab54fffed453842.js?file=DapperArgumentExtensions.cs&quot;&gt; &lt;/script&gt;</content><author><name></name></author><category term="dotnet" /><category term="dapper" /><category term="sql" /><summary type="html">Performing a profiler in the queries sended to the database you can see that in some cases Dapper is sending the string arguments as NVARCHAR (4000).</summary></entry><entry><title type="html">Can I send batch messages larger than 256 KB to Azure Service Bus?</title><link href="http://diegogiacomelli.com.br/can-i-send-batch-messages-larger-than-256-kb-to-azure-service-bus/" rel="alternate" type="text/html" title="Can I send batch messages larger than 256 KB to Azure Service Bus?" /><published>2019-08-13T00:00:00-03:00</published><updated>2019-08-13T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/can-i-send-batch-messages-larger-than-256-kb-to-azure-service-bus</id><content type="html" xml:base="http://diegogiacomelli.com.br/can-i-send-batch-messages-larger-than-256-kb-to-azure-service-bus/">&lt;h2 id=&quot;the-short-answer&quot;&gt;The short answer&lt;/h2&gt;
&lt;p&gt;NO!&lt;/p&gt;

&lt;h2 id=&quot;the-long-answer&quot;&gt;The long answer&lt;/h2&gt;
&lt;p&gt;The Azure Service Bus maximum message size is 256 KB for &lt;code class=&quot;highlighter-rouge&quot;&gt;Standard tier&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;1 MB&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;Premium tier&lt;/code&gt; (&lt;a href=&quot;https://docs.microsoft.com/azure/service-bus-messaging/service-bus-quotas&quot;&gt;https://docs.microsoft.com/azure/service-bus-messaging/service-bus-quotas&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;A simple solution to overcome this limitation is split the messages in blocks lower or equal to 256 KB size.&lt;/p&gt;

&lt;p&gt;Below is a simplified version of the code that I used for Standard tier  case:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ed0d6eb6a8457eabed916e86c369c56c.js&quot;&gt; &lt;/script&gt;</content><author><name></name></author><category term="dotnet" /><category term="azure" /><category term="azure-service-bus" /><summary type="html">The short answer NO!</summary></entry><entry><title type="html">Deploying a T4 Template with dotnet pack</title><link href="http://diegogiacomelli.com.br/deploying-a-t4-template-with-dotnet-pack/" rel="alternate" type="text/html" title="Deploying a T4 Template with dotnet pack" /><published>2019-08-08T00:00:00-03:00</published><updated>2019-08-08T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/deploying-a-t4-template-with-dotnet-pack</id><content type="html" xml:base="http://diegogiacomelli.com.br/deploying-a-t4-template-with-dotnet-pack/">&lt;p&gt;In this post I will show how to deploy a T4 Template to a target project using a NuGet package built with dotnet CLI pack command.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Recently I had to distribute a T4 template inside a NuGet package, so developers who installed the NuGet package would get, in addition to the library assemblies, a T4 template to help generate some scaffold code.&lt;/p&gt;

&lt;p&gt;Nowadays there are two main ways to build a NuGet package: creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;.nuspec&lt;/code&gt; file or defining the package properties directly inside your &lt;code class=&quot;highlighter-rouge&quot;&gt;.csproj&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The project that I want to distributed via NuGet is a .NET Standard library, so I decided to use the the dotnet core way: define the package properties inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;.csproj&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-nuget-project&quot;&gt;Creating the NuGet project&lt;/h2&gt;
&lt;p&gt;We will create a sample project to use during the post. Open a command-line/terminal and type:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/34f72d3e54b5ac658a924bbb0f1f7e72.js?file=create-sample-project.sh&quot;&gt; &lt;/script&gt;

&lt;p&gt;Let’s say that the T4 Template that we want to distribute is located inside a folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;Templates&lt;/code&gt; and the file is named &lt;code class=&quot;highlighter-rouge&quot;&gt;Scaffold.tt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now open the &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleNugetProject.csproj&lt;/code&gt; in the Visual Studio and add a &lt;code class=&quot;highlighter-rouge&quot;&gt;T4 Template&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/08/08/deploying-a-t4-template-with-dotnet-pack/add-t4-template.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;Add new item…&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Our &lt;code class=&quot;highlighter-rouge&quot;&gt;Solution Explorer&lt;/code&gt; should look like this:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/08/08/deploying-a-t4-template-with-dotnet-pack/t4-template-added-solution-explorer.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;creating-a-targets&quot;&gt;Creating a .targets&lt;/h2&gt;
&lt;p&gt;We need to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;.targets&lt;/code&gt; file, it will be used to copy the T4 Template from the NuGet package folder to the target project in the build process:&lt;/p&gt;

&lt;p&gt;Create a file with the same name of your NuGet package project, but with the extensions &lt;code class=&quot;highlighter-rouge&quot;&gt;.targets&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For our sample the file will be &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleNugetProject.targets&lt;/code&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/34f72d3e54b5ac658a924bbb0f1f7e72.js?file=SampleNugetProject.targets&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;changing-the-csproj&quot;&gt;Changing the .csproj&lt;/h2&gt;
&lt;p&gt;In the project &lt;code class=&quot;highlighter-rouge&quot;&gt;.csproj&lt;/code&gt; just add this &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemGroup&lt;/code&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/34f72d3e54b5ac658a924bbb0f1f7e72.js?file=SampleNugetProject.csproj&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;building-the-nuget-package&quot;&gt;Building the NuGet package&lt;/h2&gt;
&lt;p&gt;Inside the folder where are our &lt;code class=&quot;highlighter-rouge&quot;&gt;.csproj&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.targets&lt;/code&gt; files, type:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/34f72d3e54b5ac658a924bbb0f1f7e72.js?file=dotnet-pack.sh&quot;&gt; &lt;/script&gt;

&lt;p&gt;This will create a file &lt;code class=&quot;highlighter-rouge&quot;&gt;bin\Debug\SampleNugetProject.1.0.0.nupkg&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;testing-the-nuget-package&quot;&gt;Testing the NuGet package&lt;/h2&gt;
&lt;p&gt;Create a new .NET Core project to test the package:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/34f72d3e54b5ac658a924bbb0f1f7e72.js?file=create-TargetTestProject.sh&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now, add the NuGet package to the target project.&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/34f72d3e54b5ac658a924bbb0f1f7e72.js?file=add-package.sh&quot;&gt; &lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;To test our NuGet package without publish it to a NuGet source, just use the &lt;code class=&quot;highlighter-rouge&quot;&gt;--source&lt;/code&gt; option and point it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleNugetProject.1.0.0.nupkg&lt;/code&gt; folder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we look to our &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetTestProject&lt;/code&gt; there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;Scaffold.tt&lt;/code&gt; file yet, this is because it will copied from NuGet package folder to the project structure during the build process.&lt;/p&gt;

&lt;p&gt;Just build the target project and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Scaffold.tt&lt;/code&gt; will be copied.&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/34f72d3e54b5ac658a924bbb0f1f7e72.js?file=dotnet-build.sh&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That’s it, now we have created a NuGet package that copy a T4 Template to target project’s structure.&lt;/p&gt;

&lt;p&gt;You can expand this solution to copy other kind of files to the target project.&lt;/p&gt;

&lt;p&gt;If you want to dig deeper into generating NuGet packages using dotnet-cli, starts with &lt;a href=&quot;https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package-dotnet-cli&quot;&gt;Create a NuGet package using the dotnet CLI&lt;/a&gt;.&lt;/p&gt;

&lt;script&gt;
        $(document).ready(function() {
          $('.gist-meta').remove();
        });
      &lt;/script&gt;</content><author><name></name></author><category term="dotnet" /><category term="t4-template" /><category term="nuget" /><summary type="html">In this post I will show how to deploy a T4 Template to a target project using a NuGet package built with dotnet CLI pack command. Introduction</summary></entry><entry><title type="html">Unity and Game Development links (Aug 5th 2019)</title><link href="http://diegogiacomelli.com.br/unity-and-gamedev-links-aug-5th-2019/" rel="alternate" type="text/html" title="Unity and Game Development links (Aug 5th 2019)" /><published>2019-08-05T00:00:00-03:00</published><updated>2019-08-05T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-and-gamedev-links-aug-5th-2019</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-and-gamedev-links-aug-5th-2019/">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Phi Dinh&lt;/strong&gt; remembered a Twitter moment with tips and tutorials about the shaders used on Recompile. (&lt;a href=&quot;https://twitter.com/i/moments/1122251136239570947&quot;&gt;Recompile Unity Tips and Tutorials&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Thomas Krogh-Jacobsen&lt;/strong&gt; wrote a blog post about Unity 2019.2 release. This version has more than 170 new features. (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/30/heres-whats-in-the-brand-new-unity-2019-2&quot;&gt;Here’s what’s in the brand-new Unity 2019.2&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Screen.cutouts for iOS/Android, Burst Compiler updates, TypeCache API in Editor code, PhysX Cloth Solver update, DSPGraph audio mixing/rendering engine, Intel® VTune™ Amplifier support, IDE support moving to packages, .NET 4.x is now default and Incremental Garbage Collection.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made a video about Unity 2019.2 features too (&lt;a href=&quot;https://www.youtube.com/watch?v=qoERAtLGq-8&quot;&gt;Unity 2019.2 is now available!&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/qoERAtLGq-8 &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Andy Touch&lt;/strong&gt; created a Twitter thread about the different 2D Light Types available in Unity 2019.2 (&lt;a href=&quot;https://twitter.com/andytouch/status/1156204606562738176&quot;&gt;2D Light Types&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dilmer Valecillos&lt;/strong&gt; made a video showing how to use low polly assets for VR (&lt;a href=&quot;https://www.youtube.com/watch?v=4SVUeuV6TpU&quot;&gt;Unity3d Oculus Quest Development - Adding A Low Poly Asset for VR Usage from the Asset Store&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Alex Lindman&lt;/strong&gt; wrote a blog post on custom lighting in Shader Graph (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/31/custom-lighting-in-shader-graph-expanding-your-graphs-in-2019&quot;&gt;Custom Lighting in Shader Graph: Expanding your graphs in 2019&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;With the release of Unity Editor 2019.1, the Shader Graph package officially came out of preview! Now, in 2019.2, we’re bringing even more features and functionality to Shader Graph.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kenney&lt;/strong&gt; has an incredible collection of free game assets that any game developer can use (&lt;a href=&quot;https://kenney.nl/assets&quot;&gt;Kenney Assets&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;License: (CC0 1.0 Universal) You’re free to use these game assets in any project, personal or commercial. There’s no need to ask permission before using these. Giving attribution is not required, but is greatly appreciated!&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lindsay Cox&lt;/strong&gt; made a peformance test comparing single thead, TPL and C# Job System (&lt;a href=&quot;http://lindsaycox.co.uk/blog/unity/single-thread-vs-tasks-vs-unity-c-jobs-simple-performance-test/&quot;&gt;Single Thread Vs Tasks Vs Unity C# Jobs – Simple Performance Test&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;In conclusion then, based on the above tests, if you are going to crunch through work without the Burst Compiler, maybe look at using something like Tasks first before opting for Jobs. If you are going to use the Burst Compiler, use the Job System.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kristin Stock&lt;/strong&gt; made a video on procedurally generated low-poly planets (&lt;a href=&quot;https://www.youtube.com/watch?v=2FfzEdALOGQ&quot;&gt;Procedurally Generated Low-Poly Planets in Unity&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/2FfzEdALOGQ &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Eduardo Oriz and Mike Geig&lt;/strong&gt; wrote a blog post about how to set up your Unity project for retro 16-bit games (&lt;a href=&quot;https://blogs.unity3d.com/2019/08/02/2d-pixel-perfect-how-to-set-up-your-unity-project-for-retro-16-bit-games&quot;&gt;2D Pixel Perfect: How to set up your Unity project for retro 16-bit games&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;In our first 2D Pixel Perfect guide for retro games, we showed you how to set up the 2D Pixel Perfect tool and how 8-bit graphics were made back in the day. In this post, we fast-forward to the 16-bit era. With the help of Mega Cat Studios, you’ll learn how to create authentic art for Sega Genesis (or Mega Drive) and Super NES-style games using Unity settings, graphics structures, and color palettes&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unity&lt;/strong&gt; released the &lt;code class=&quot;highlighter-rouge&quot;&gt;ML-Agents Beta 0.9.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/Unity-Technologies/ml-agents/releases/tag/0.9.0&quot;&gt;ML-Agents Beta 0.9.0&lt;/a&gt;)
    &lt;blockquote&gt;
      &lt;p&gt;Generative Adversarial Imitation Learning, pre-training for the PPO trainer, training generalized reinforcement learning agents, options for Nature and ResNet CNN architectures.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="unity3d" /><category term="gamedev" /><summary type="html"></summary></entry><entry><title type="html">Developing Web APIs - Good Practices</title><link href="http://diegogiacomelli.com.br/developing-web-apis-good-practices/" rel="alternate" type="text/html" title="Developing Web APIs - Good Practices" /><published>2019-08-02T00:00:00-03:00</published><updated>2019-08-02T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/developing-web-apis-good-practices</id><content type="html" xml:base="http://diegogiacomelli.com.br/developing-web-apis-good-practices/">&lt;p&gt;Some days ago a coworker asked me what I thought about wich status code a web api should return and if there are some good pratices to follow. When he asked this, I remembered that I’ve followed some good pratices, most of them based on my emperical knowledge of years of development and consuming web apis. For this reason I wrote this post as a way to organize and document what are those good pratices that I follow. Maybe it can be useful to someone.&lt;/p&gt;

&lt;p&gt;The list below is not intended to be right and definitive, there is no silver bullet, but just things that I learned and tested in more of a decade working with web apis. Things that worked for me and my projects can easily not work for you and your projects, because context is other  and challenges too.&lt;/p&gt;

&lt;p&gt;Besides, if you disagree with some of this points, please let a comment in the end of the post, we could learn more with it!&lt;/p&gt;

&lt;h1 id=&quot;rest-or-not-restful&quot;&gt;REST or not RESTful?&lt;/h1&gt;
&lt;p&gt;First of all, build a software that really attend the requisites, that has good code quality and has good performance is more important than follow someone’s guidance, with this said I always try to implement REST web apis, but exceptions exists and we need to work with them, so don’t try to force some operation than will don’t fit well on REST way.&lt;/p&gt;

&lt;p&gt;Remember, REST is a style architecture and as every architecture, you can (and most of time should) adapt it for your project needs and capacities.&lt;/p&gt;

&lt;h1 id=&quot;verbs-and-urls&quot;&gt;Verbs and URLs&lt;/h1&gt;
&lt;p&gt;Probably the most important rule about web api is to respect the meaning of verbs, this will really make the life easer for those whom are consuming your web api.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;: to retrieve something.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;: to create something.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;: to complete update something.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt;: to partially update something.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;: to delete something&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, combining with URLs, you get a really clear way to work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;/resource  : returns all resources.&lt;/li&gt;
      &lt;li&gt;/resource/1: returns the resource with id 1.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;/resource: creates a bunch of resources  (rarelly used).&lt;/li&gt;
      &lt;li&gt;/resource/1: Not used.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;/resource: complete updates a bunch of resources (rarelly used).&lt;/li&gt;
      &lt;li&gt;/resource/1: complete updates the resource with id 1.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;/resource: partial updates a bunch of resources (rarelly used).&lt;/li&gt;
      &lt;li&gt;/resource/1: partial updates the resource with id 1.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;/resource: deletes all resources (rarelly used, mostly never).&lt;/li&gt;
      &lt;li&gt;/resource/1: delete the resource with id 1.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;status-code&quot;&gt;Status code&lt;/h1&gt;
&lt;p&gt;I try to keep the range of returned status code small, the smallest one has only 3 status:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;200&lt;/code&gt;: succesful request.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;400&lt;/code&gt;: a client error.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;500&lt;/code&gt; : a server error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, you can extend this one, like use &lt;code class=&quot;highlighter-rouge&quot;&gt;201 (created)&lt;/code&gt; to return status for POST verbs, and &lt;code class=&quot;highlighter-rouge&quot;&gt;401&lt;/code&gt; to unauthorized requests, but try to keep this list small, so it will be easy to who consume your API take decisions about what to do with different status code.&lt;/p&gt;

&lt;p&gt;Another good pratice is return an &lt;code class=&quot;highlighter-rouge&quot;&gt;error code&lt;/code&gt; and an &lt;code class=&quot;highlighter-rouge&quot;&gt;error message&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; of requests that result in &lt;code class=&quot;highlighter-rouge&quot;&gt;400&lt;/code&gt; status code (client error), this way the client can react or display different informations to the end user. 
In most cases, &lt;code class=&quot;highlighter-rouge&quot;&gt;400&lt;/code&gt; status code are about some business logic rule that need to be respect to result in a sucessful request, so provide some information to client can help it to understand what is wrong in the request.&lt;/p&gt;

&lt;h1 id=&quot;versioning&quot;&gt;Versioning&lt;/h1&gt;
&lt;p&gt;I see a lot of developers using &lt;code class=&quot;highlighter-rouge&quot;&gt;v1&lt;/code&gt; inside the code to “versioning” their web apis, I really dislike this method, I can understand it is easy to deploy a new web api version to the same virtual application using this technique, but we need to agree that we do versioning using some SCM, like Git, SVN and Mercurial with everything else that correspond to our code, why should we do versioning inside the code in the case of web api?&lt;/p&gt;

&lt;p&gt;In most of case your web api will have only one version, especially when you are developing a &lt;code class=&quot;highlighter-rouge&quot;&gt;SPA&lt;/code&gt; app and it is the only client of your web api.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Versioning of APIs is a controversial topic—you will find a lot of contradictory guidance on the internet.
The pattern that is most commonly practiced is probably the one with a version identifier in a path
segment of URLs. Since there is little consensus on versioning, simply offering our opinions on the topic may not be very helpful, but we offer two thoughts:&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;Doing nothing at all for API versioning is an intelligent approach that is getting more attention&lt;/li&gt;
    &lt;li&gt;Links and version identifiers in URLs make awkward bedfellows&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/files/apigee/apigee-web-api-design-the-missing-link-ebook.pdf&quot;&gt;Web API Design: The Missing Link&lt;/a&gt;&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;my-web-api-really-need-versions&quot;&gt;My web api really need versions&lt;/h2&gt;
&lt;p&gt;In this case, the approach that I use is create a new site/virtual application every time that I need to publish a major version of my web api, so, in the code of the routes there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;v1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;v2&lt;/code&gt; and so on.&lt;/p&gt;

&lt;p&gt;Let say I have a web api publish on &lt;code class=&quot;highlighter-rouge&quot;&gt;http://diegogiacomelli.com.br/sample-api/v1&lt;/code&gt;, than I made some breaking changes to the public interface of the web api and need to publish another version in a separated url to avoid any impact to the users that still use the old &lt;code class=&quot;highlighter-rouge&quot;&gt;v1&lt;/code&gt;. I will just create the new &lt;code class=&quot;highlighter-rouge&quot;&gt;v2&lt;/code&gt; virtual application, and the urls will be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://diegogiacomelli.com.br/sample-api/v1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://diegogiacomelli.com.br/sample-api/v2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a moment in future you will want to remove the support to the &lt;code class=&quot;highlighter-rouge&quot;&gt;v1&lt;/code&gt; version, in that moment you could configure your virtual application to redirect (status code &lt;code class=&quot;highlighter-rouge&quot;&gt;301&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;302&lt;/code&gt;) to the next/latest version.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Of course, it’s a good pratice too have some public changelog about your web api versions releases to notify the clients developers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;describing&quot;&gt;Describing&lt;/h1&gt;
&lt;p&gt;In the field of how to describe a web api REST I can cite &lt;code class=&quot;highlighter-rouge&quot;&gt;Swagger&lt;/code&gt;. It is not a attempt to create a WSDL like to web api REST, but it is a good attempt to create an open standard for describing web apis REST.&lt;/p&gt;

&lt;p&gt;Swagger is a specification and complete framework implementation for describing, producing, consuming, and visualizing RESTful web services.&lt;/p&gt;

&lt;p&gt;I use Swagger a lot and really love it, mainly because Swagger UI that allow you generate a nice live console and documentation for your web api.&lt;/p&gt;

&lt;p&gt;There are many implementations of Swagger for most of languages: C#, Java, Python, Ruby, etc.&lt;/p&gt;

&lt;p&gt;If you are using ASP .NET Web API, there a some projects to auto generate the Swagger specification, like &lt;a href=&quot;https://github.com/domaindrivendev/Swashbuckle.AspNetCore&quot;&gt;Swashbuckle.AspNetCore&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Swagger is very popular nowadays, but if you never see it in action, take a look on &lt;a href=&quot;https://developer.marvel.com/docs&quot;&gt;Marvel API&lt;/a&gt; that use Swagger and Swagger UI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;other-conventions-and-good-pratices&quot;&gt;Other conventions and good pratices&lt;/h1&gt;
&lt;p&gt;To keep our lifes as developers easier is good to define some conventions of how our web api REST will behave, the best effort I know in this field are the very good &lt;strong&gt;Apigee e-books&lt;/strong&gt;. The e-books are not an attempt to create a bible or a mantra about how to design your api, but rather a collection of conventions observed in large web REST apis, like Twitter, Facebook, Linkedin, Google, etc.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most of the good pratices that I used, tested and mentioned in this post I learned from my experience and Apigee books.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I probably forgot some learnings that I still use in my web apis developing, maybe because it’s so common to perform it that I even do not notice them, but the ones cited above I think are the most remarkable.&lt;/p&gt;

&lt;h1 id=&quot;further-readings&quot;&gt;Further readings&lt;/h1&gt;
&lt;p&gt;I really recommend you to read the books bellow, they have detailed a lot of good practices about how do develop good web apis and can help you to design yours.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pages.apigee.com/rs/apigee/images/api-design-ebook-2012-03.pdf&quot;&gt;Web API Design&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The success of an API design is measured by how quickly developers can get
up to speed and start enjoying success using your API.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/files/apigee/apigee-web-api-design-the-missing-link-ebook.pdf&quot;&gt;Web API Design: The Missing Link&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;When you design any interface, you should try to put yourself in the shoes of the user&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="web-api" /><category term="good-pratices" /><summary type="html">Some days ago a coworker asked me what I thought about wich status code a web api should return and if there are some good pratices to follow. When he asked this, I remembered that I’ve followed some good pratices, most of them based on my emperical knowledge of years of development and consuming web apis. For this reason I wrote this post as a way to organize and document what are those good pratices that I follow. Maybe it can be useful to someone.</summary></entry><entry><title type="html">Unity Toasty Notification</title><link href="http://diegogiacomelli.com.br/unity-toasty-notification/" rel="alternate" type="text/html" title="Unity Toasty Notification" /><published>2019-07-30T00:00:00-03:00</published><updated>2019-07-30T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-toasty-notification</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-toasty-notification/">&lt;p&gt;Last saturday I created the &lt;a href=&quot;https://github.com/giacomelli/Giacomelli.Unity.ToastyNotification&quot;&gt;ToastyNotification&lt;/a&gt; package, a fun editor log interceptor that play Mortal Kombat’s Toasty easter-egg every time an error is logged.&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/wwhz2wPN_wU &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;
&lt;p&gt;Just install the &lt;code class=&quot;highlighter-rouge&quot;&gt;ToastyNotification.package&lt;/code&gt; from the repository &lt;a href=&quot;https://github.com/giacomelli/Giacomelli.Unity.ToastyNotification/releases&quot;&gt;release page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now every time your game raise an error on Unity’s editor console log, the Toasty Notifcation will warning you 😉!&lt;/p&gt;</content><author><name></name></author><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><category term="console-log" /><summary type="html">Last saturday I created the ToastyNotification package, a fun editor log interceptor that play Mortal Kombat’s Toasty easter-egg every time an error is logged.</summary></entry><entry><title type="html">Unity and Game Development links (July 29th 2019)</title><link href="http://diegogiacomelli.com.br/unity-and-gamedev-links-july-29th-2019/" rel="alternate" type="text/html" title="Unity and Game Development links (July 29th 2019)" /><published>2019-07-29T00:00:00-03:00</published><updated>2019-07-29T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-and-gamedev-links-july-29th-2019</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-and-gamedev-links-july-29th-2019/">&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Kristin Stock&lt;/strong&gt; published an amazing video about SPH (Smoothed Particle Hydrodynamics) in Unity. (&lt;a href=&quot;https://www.youtube.com/watch?v=NJBz8rMJ0ZU&quot;&gt;Fluid Simulation / Smoothed Particle Hydrodynamics in Unity&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/NJBz8rMJ0ZU &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SIGGRAPH 2019&lt;/strong&gt; is taking place in Los Angeles, between July 28 and August 1. Unity has made a page where you can see the Unity’s  presentations calendar (&lt;a href=&quot;https://unity.com/events/siggraph-2019&quot;&gt;Unity at SIGGRAPH 2019&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kin&lt;/strong&gt; is a currency for the digital world that just now caught my attention. There is an SDK for Unity. They are posing a challenge for Unity developers, the deadline is December 30, 2019 (&lt;a href=&quot;https://kin.org/developers/unityapply/gaming-challenge/&quot;&gt;Kin Gaming Challenge&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Kin enables the free and instant transfer of value between users, no matter how small the amount. This lets users give something more meaningful than a like, making your app even more fun and engaging.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lasse Jon Fuglsang Pedersen and Robert Cupisz&lt;/strong&gt; in the making of The Heretic, a real-time short film made with Unity. (&lt;a href=&quot;https://www.youtube.com/watch?v=5H9Jo2qjJXs&quot;&gt;Lasse Jon Fuglsang Pedersen, Robert Cupisz - Making of The Heretic&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/5H9Jo2qjJXs &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made two videos, one showing his top 5 assets for Unity in 2019 (&lt;a href=&quot;https://www.youtube.com/watch?v=s-4s9KhO_D0&quot;&gt;5 AWESOME ASSETS FOR UNITY 2019!&lt;/a&gt;) and a second one about the new Multiplayer system that Unity is working on (&lt;a href=&quot;https://www.youtube.com/watch?v=n3kcbUBuPpk&quot;&gt;NEW MULTIPLAYER in Unity 2019 – Connected Games (Overview)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tyler Hurd&lt;/strong&gt; presented to the world a tool that him have been working: Actuator leverages real-time physics and tracked VR devices for rigging, animating and puppeteering. (&lt;a href=&quot;http://tylerhurd.com/projects/actuator/&quot;&gt;Actuator)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/moYfppZzf2c &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;</content><author><name></name></author><category term="unity3d" /><category term="gamedev" /><summary type="html"></summary></entry></feed>