<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://diegogiacomelli.com.br/feed.xml" rel="self" type="application/atom+xml" /><link href="http://diegogiacomelli.com.br/" rel="alternate" type="text/html" /><updated>2020-10-13T11:47:54-03:00</updated><id>http://diegogiacomelli.com.br/feed.xml</id><title type="html">Diego Giacomelli</title><subtitle>programmer</subtitle><entry><title type="html">unitytips&amp;amp;colon; Sprites Collection</title><link href="http://diegogiacomelli.com.br/unitytips-sprites-collection/" rel="alternate" type="text/html" title="unitytips&amp;amp;colon; Sprites Collection" /><published>2020-10-13T00:00:00-03:00</published><updated>2020-10-13T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-sprites-collection</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-sprites-collection/">&lt;p&gt;Sometimes we have related sprites that can be used in a prefab, like sprites for the environment, props, and scenario. Would be cool if we can easily swap them directly on the prefab without need to find and set the sprite directly in the SpriteRenderer component?&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/TJ-Ou9YMFdA &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;spritescollection-component&quot;&gt;SpritesCollection component&lt;/h2&gt;
&lt;p&gt;I created this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpritesCollection&lt;/code&gt; component that allows us to define a collection of sprites to a prefab/GameObject and then easily swap between the sprites available.&lt;/p&gt;

&lt;h3 id=&quot;source-code&quot;&gt;Source code&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/d5d7c720eb910d00a5a3e217b5f95fff.js?file=SpritesCollection.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;I strongly recommend that you use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gist Importer&lt;/code&gt; to import this gist to your project, but if want to import it manually, just access &lt;a href=&quot;https://gist.github.com/giacomelli/d5d7c720eb910d00a5a3e217b5f95fff&quot;&gt;the gist&lt;/a&gt; and add all .cs files to any folder on your Unity project, except the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpritesCollectionEditor.cs&lt;/code&gt;, this one should be added to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder.&lt;/p&gt;
&lt;/div&gt;</content><author><name></name></author><category term="Lab" /><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><summary type="html">Sometimes we have related sprites that can be used in a prefab, like sprites for the environment, props, and scenario. Would be cool if we can easily swap them directly on the prefab without need to find and set the sprite directly in the SpriteRenderer component?</summary></entry><entry><title type="html">Triangle Classifier Made With Unity</title><link href="http://diegogiacomelli.com.br/triangle-classifier-made-with-unity/" rel="alternate" type="text/html" title="Triangle Classifier Made With Unity" /><published>2020-09-24T00:00:00-03:00</published><updated>2020-09-24T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/triangle-classifier-made-with-unity</id><content type="html" xml:base="http://diegogiacomelli.com.br/triangle-classifier-made-with-unity/">&lt;p&gt;These days were studying polygons and thought that would be cool build a triangle classifier to help people learn and teach about types of triangle.&lt;/p&gt;

&lt;h2 id=&quot;types-of-triangle&quot;&gt;Types of triangle&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/project-128-4f597ed4f.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/project-128-4f597ed4f.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/project-128-4f597ed4f.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;Triangles can be classified &lt;a href=&quot;https://en.wikipedia.org/wiki/Triangle#Types_of_triangle&quot;&gt;by lengths of sides and by internal angles&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;by-lengths-of-sides&quot;&gt;By lengths of sides&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Equilateral_triangle&quot;&gt;Equilateral&lt;/a&gt;: all three sides have the same length.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Isosceles_triangle&quot;&gt;Isosceles&lt;/a&gt;: has two sides of equal length.&lt;/li&gt;
  &lt;li&gt;Scalene: has all its sides of different lengths.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;by-internal-angles&quot;&gt;By internal angles&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Right_triangle&quot;&gt;Right&lt;/a&gt;: has one of its interior angles measuring 90°.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Oblique_triangle&quot;&gt;Oblique&lt;/a&gt;: do not have an angle measuring 90°.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Acute_triangle&quot;&gt;Acute&lt;/a&gt;: with all interior angles measuring less than 90°.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Obtuse_triangle&quot;&gt;Obtuse&lt;/a&gt;: with one interior angle measuring more than 90°.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;triangle-classifier&quot;&gt;Triangle Classifier&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/podium-128-f9f44969b.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/podium-128-f9f44969b.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/podium-128-f9f44969b.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;Below you can use the Triangle Classifier that I made with Unity.&lt;/p&gt;

&lt;h3 id=&quot;instructions&quot;&gt;Instructions&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;You can move any of the 3 vertices (A, B, C)&lt;/li&gt;
  &lt;li&gt;The vertices positions can be changed too from the inputs on the top of the screen.&lt;/li&gt;
  &lt;li&gt;Each time that any vertices are updated you can see the types of the triangle be updated in the top message.&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&quot;/apps/triangle-classifier/index.html&quot; style=&quot;width: 100%;min-height: 700px;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The font and the vertice sprite used are from &lt;a href=&quot;http://kenney.nl&quot;&gt;Kenney&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="Labs" /><category term="unity3d" /><category term="gamedev" /><category term="math" /><category term="webgl" /><summary type="html">These days were studying polygons and thought that would be cool build a triangle classifier to help people learn and teach about types of triangle.</summary></entry><entry><title type="html">unitytips&amp;amp;colon; ShadowCaster2DFromCollider Component</title><link href="http://diegogiacomelli.com.br/unitytips-shadowcaster2-from-collider-component/" rel="alternate" type="text/html" title="unitytips&amp;amp;colon; ShadowCaster2DFromCollider Component" /><published>2020-09-21T00:00:00-03:00</published><updated>2020-09-21T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-shadowcaster2-from-collider-component</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-shadowcaster2-from-collider-component/">&lt;p&gt;If you try to use a &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@7.1/manual/2DShadows.html&quot;&gt;ShadowCaster2D&lt;/a&gt; in a &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.2d.spriteshape@3.0/manual/index.html&quot;&gt;SpriteShape&lt;/a&gt; the shadow produced will have a box form, no matter the form of your SpriteShape.&lt;/p&gt;

&lt;p&gt;This happens because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShadowCaster2D&lt;/code&gt; does not update its internal shape according to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpriteShape's&lt;/code&gt; form.&lt;/p&gt;

&lt;h2 id=&quot;shadowcaster2dfromcollider-component&quot;&gt;ShadowCaster2DFromCollider component&lt;/h2&gt;
&lt;p&gt;I created this script to help to have &lt;strong&gt;SpriteShape with ShadowCaster2D casting right shadows&lt;/strong&gt;.&lt;br /&gt;
To use it you need to add a &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/PolygonCollider2D.html&quot;&gt;PolygonCollider2D&lt;/a&gt; or an &lt;a href=&quot;https://docs.unity3d.com/Manual/class-EdgeCollider2D.html&quot;&gt;EdgeCollider2D&lt;/a&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpriteShape's&lt;/code&gt; gameobject and then add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShadowCaster2DFromCollider&lt;/code&gt; component to the same gameobject.&lt;/p&gt;

&lt;p&gt;Below you can see a video showing a scene with some SpriteShapes before and after applying the ShadowCaster2DFromCollider component.&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/m8nnTek5U0Y &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source code&lt;/h2&gt;
&lt;script src=&quot;https://gist.github.com/c208e20ecf75a77e0833f4c7671a0052.js&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;This solution was based on this Unity Forum post: https://forum.unity.com/threads/can-2d-shadow-caster-use-current-sprite-silhouette.861256&lt;/p&gt;
&lt;/div&gt;</content><author><name></name></author><category term="Lab" /><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><summary type="html">If you try to use a ShadowCaster2D in a SpriteShape the shadow produced will have a box form, no matter the form of your SpriteShape.</summary></entry><entry><title type="html">unitytips&amp;amp;colon; Editor Coroutines</title><link href="http://diegogiacomelli.com.br/unitytips-editor-coroutines/" rel="alternate" type="text/html" title="unitytips&amp;amp;colon; Editor Coroutines" /><published>2020-09-15T00:00:00-03:00</published><updated>2020-09-15T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-editor-coroutines</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-editor-coroutines/">&lt;p&gt;Recently, I was doing a small experiment trying to run an &lt;a href=&quot;https://en.wikipedia.org/wiki/CHIP-8&quot;&gt;CHIP-8&lt;/a&gt; emulator inside the Unity Editor inspector window and for that I needed to update from times to time the inspector.&lt;/p&gt;

&lt;p&gt;Initially I tried to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EditorApplication.update&lt;/code&gt;, but as it is only called when something changes in the inspector, it ended up not serving this purpose.&lt;/p&gt;

&lt;p&gt;It was then that I discovered this official Unity package: &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.editorcoroutines@0.0/manual/index.html&quot;&gt;Editor Coroutines&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Editor Coroutines package allows the user to start the execution of iterator methods within the Editor similar to how we handle Coroutines inside MonoBehaviour scripts during runtime.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;At this time we cannot use any of the yield classes present inside the Unity Scripting API, like WaitForSeconds and WaitForEndOfFrame, except for the CustomYieldInstruction.&lt;/p&gt;

&lt;p&gt;However, there is a specific yielding class for wait seconds on Editor: &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.editorcoroutines@0.0/api/Unity.EditorCoroutines.Editor.EditorWaitForSeconds.html&quot;&gt;EditorWaitForSeconds&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case, I used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yield return null&lt;/code&gt; to skip a frame within the Editor and get the refresh rate that I would like.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/96086201cb5cc512ce7a15a02ebcf29a.js&quot;&gt; &lt;/script&gt;

&lt;center&gt;                
        &lt;img class=&quot;screenshot&quot; src=&quot;/assets/2020/09/15/unitytips-editor-coroutines/chip-8-inside-unity-editor.gif &quot; alt=&quot;post image&quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;The result of using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EditorCoroutineUtility.StartCoroutine&lt;/code&gt;&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;More details in the official documentation: &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.editorcoroutines@0.0/api/Unity.EditorCoroutines.Editor.EditorCoroutineUtility.html&quot;&gt;Editor Coroutines&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content><author><name></name></author><category term="Lab" /><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><summary type="html">Recently, I was doing a small experiment trying to run an CHIP-8 emulator inside the Unity Editor inspector window and for that I needed to update from times to time the inspector.</summary></entry><entry><title type="html">Using Gulp for Chrome Extension development workflow</title><link href="http://diegogiacomelli.com.br/using-gulp-for-chrome-extension-dev-workflow/" rel="alternate" type="text/html" title="Using Gulp for Chrome Extension development workflow" /><published>2020-09-11T00:00:00-03:00</published><updated>2020-09-11T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/using-gulp-for-chrome-extension-dev-workflow</id><content type="html" xml:base="http://diegogiacomelli.com.br/using-gulp-for-chrome-extension-dev-workflow/">&lt;p&gt;In this tutorial, we will learn how to create a development workflow for a Chrome extension, with different configurations and manifest.json for each environment, like DEV, TEST, and PROD.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;A few months ago we built a Chrome Extension to a customer to allow users to capture Netflix captions and sent them to the customer web site to study them later.&lt;/p&gt;

&lt;p&gt;While we were developing it we needed to change some configurations on the extension to use different URLs of our API depending on what environment the Chrome Extension was using, like DEV (local), TEST, and Production.&lt;/p&gt;

&lt;h2 id=&quot;chrome-extension&quot;&gt;Chrome Extension&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/chrome-extension-200-209699985.webp 200w, /assets/images/generated/assets/logos/chrome-extension-400-209699985.webp 400w, /assets/images/generated/assets/logos/chrome-extension-496-209699985.webp 496w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/chrome-extension-200-209699985.png 200w, /assets/images/generated/assets/logos/chrome-extension-400-209699985.png 400w, /assets/images/generated/assets/logos/chrome-extension-496-209699985.png 496w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/chrome-extension-496-209699985.png&quot; alt=&quot;post image&quot; width=&quot;496&quot; height=&quot;150&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;For this tutorial, I’ll use a Chrome Extension basic sample called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello Extensions&lt;/code&gt;.&lt;br /&gt; 
You can download it from this page &lt;a href=&quot;https://developer.chrome.com/extensions/samples&quot;&gt;https://developer.chrome.com/extensions/samples&lt;/a&gt; or directly from &lt;a href=&quot;https://developer.chrome.com/extensions/examples/tutorials/hello_extensions.zip&quot;&gt;here&lt;/a&gt;.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Is not the intent of this tutorial explains how to create a Chrome Extension from scratch, for this you can use the official documentation: &lt;a href=&quot;https://developer.chrome.com/extensions/getstarted&quot;&gt;Getting Started Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;gulp&quot;&gt;Gulp&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;icon&quot; src=&quot;/assets/logos/gulp.svg &quot; alt=&quot;post image&quot; /&gt;
At that time we did not find any builtin or other solution to make this workflow easier and streamlined, so we decided to create our own solution using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gulp&lt;/code&gt;. This whole solution will be explaining below.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;gulp is an open-source JavaScript toolkit created by Eric Schoffstall used as a streaming build system in front-end web development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We decided to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp&lt;/code&gt;, because a Chrome Extensions is a bunch of .js, .html and .json files. Perfect to use gulp.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;If we just try to open our download &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello Extension&lt;/code&gt; .zip file or the opened folder directly on the Chrome extensions page, it will work and you see the extension’s icon in the toolbar.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/basic-sample-chrome-extension-113-f70b16101.webp 113w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/basic-sample-chrome-extension-113-f70b16101.png 113w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/basic-sample-chrome-extension-113-f70b16101.png&quot; alt=&quot;post image&quot; width=&quot;113&quot; height=&quot;145&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;p&gt;This is not a problem if you have only one environment or if you don’t need different configurations for different environments, but as I’ve already explained, we needed different configs for different environments.&lt;/p&gt;

&lt;p&gt;To the purpose of this tutorial we will work with 3 environments: DEV, TEST, and PROD and will use our configuration file just to change our plugin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.html&lt;/code&gt; text:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DEV: Hello, World! (DEV)&lt;/li&gt;
  &lt;li&gt;TEST: Hello, World! (TEST)&lt;/li&gt;
  &lt;li&gt;PROD: Hello, World!&lt;/li&gt;
&lt;/ul&gt;

&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-200-3afbb65ab.webp 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-336-3afbb65ab.webp 336w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-200-3afbb65ab.png 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-336-3afbb65ab.png 336w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-336-3afbb65ab.png&quot; alt=&quot;post image&quot; width=&quot;336&quot; height=&quot;167&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;files-structure&quot;&gt;Files structure&lt;/h2&gt;
&lt;p&gt;Move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello Extensions&lt;/code&gt; files to a subfolder called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt;.
At the end of this tutorial, our files structure will look like this:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/files-structure-200-484bbc2a8.webp 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/files-structure-202-484bbc2a8.webp 202w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/files-structure-200-484bbc2a8.png 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/files-structure-202-484bbc2a8.png 202w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/files-structure-202-484bbc2a8.png&quot; alt=&quot;post image&quot; width=&quot;202&quot; height=&quot;142&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;If have any doubt about the files structure during this tutorial, you can download the full solution in section &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Download&lt;/code&gt; at the end of the tutorial&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;installing-gulp&quot;&gt;Installing gulp&lt;/h2&gt;
&lt;p&gt;To allow us to build our workflow, first, we need to install gulp.&lt;/p&gt;

&lt;p&gt;Follow the instructions described in &lt;a href=&quot;https://gulpjs.com/docs/en/getting-started/quick-start/&quot;&gt;Quick Start&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;In the section &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create a project directory and navigate into it&lt;/code&gt; you just need to open the root folder of our file structure described in the previous section&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;In the section &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create a package.json file in your project directory&lt;/code&gt; you can use the default values for all the questions of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm init&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;You don’t need to perform the section &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create a gulpfile&lt;/code&gt;, because we will perform it in the next section.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-gulpfilejs-file&quot;&gt;The gulpfile.js file&lt;/h2&gt;
&lt;p&gt;Create a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt; in the root folder.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=gulpfile.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This is the full &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt; file that will allow our development workflow for different environments.&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-gulpfilejs-sections&quot;&gt;The gulpfile.js sections&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/project-128-4f597ed4f.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/project-128-4f597ed4f.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/project-128-4f597ed4f.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;Now I will explain each section of it.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;requires-section&quot;&gt;Requires section&lt;/h3&gt;
&lt;p&gt;This section define the NPM packages need for our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;.
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=requires.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The first one is &lt;a href=&quot;https://www.npmjs.com/package/gulp&quot;&gt;gulp&lt;/a&gt;, then we need the package &lt;a href=&quot;&quot;&gt;del&lt;/a&gt; that will allow us to clean our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder, 
after &lt;a href=&quot;https://www.npmjs.com/package/gulp-merge-json&quot;&gt;gulp-merge-json&lt;/a&gt; to allow us to merge our environment config files. The last one is &lt;a href=&quot;https://www.npmjs.com/package/fs&quot;&gt;fs&lt;/a&gt; to allow read and write files.&lt;/p&gt;

&lt;h3 id=&quot;consts-section&quot;&gt;Consts section&lt;/h3&gt;
&lt;p&gt;This is quite simple, we are just reading the command-line argument called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;. If it is not present, the default value is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEV&lt;/code&gt;. 
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=consts.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;exports-section&quot;&gt;Exports section&lt;/h3&gt;
&lt;p&gt;Now we jump to the last line of the file to explain the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exports.default&lt;/code&gt;. 
Here we are basically defining the order of each function that will be called when we run our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt; file:
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=exports.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;clean-section&quot;&gt;Clean section&lt;/h3&gt;
&lt;p&gt;Cleans our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder.
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=clean.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;copyallfiles-section&quot;&gt;CopyAllFiles section&lt;/h3&gt;
&lt;p&gt;Copies all files from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; folder to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=copyAllFiles.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;transformconfig-section&quot;&gt;TransformConfig section&lt;/h3&gt;
&lt;p&gt;Transforms our config.json files, merging the source one with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;environment&lt;/code&gt; one.
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=transformConfig.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;writeconfigjsfile-section&quot;&gt;WriteConfigJsFile section&lt;/h3&gt;
&lt;p&gt;Writes our transformed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.json&lt;/code&gt; file to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scripts&lt;/code&gt; folder to allow our Chrome Extension’s .js files access the config values.
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=writeConfigJsFile.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;transformmanifest-section&quot;&gt;TransformManifest section&lt;/h3&gt;
&lt;p&gt;Transforms our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; file too.
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=transformManifest.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;watch-section&quot;&gt;Watch section&lt;/h3&gt;
&lt;p&gt;Watches for any change in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; folder and automatically repeat the previous steps.
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=watch.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;packagesjson-file&quot;&gt;packages.json file&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/package-128-f3193c47c.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/package-128-f3193c47c.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/package-128-f3193c47c.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;Change the content of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;packages.json&lt;/code&gt; file to the content below to update the dependencies.
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=packages.json&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Then run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt; in the root folder, after that run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install gulp&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;running-the-gulp-for-the-first-time&quot;&gt;Running the gulp for the first time&lt;/h2&gt;
&lt;p&gt;Now, if you just run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp&lt;/code&gt; in the root folder, you should see an output like this:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-failed-config-200-d0dfc6cee.webp 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-failed-config-369-d0dfc6cee.webp 369w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-failed-config-200-d0dfc6cee.png 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-failed-config-369-d0dfc6cee.png 369w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-failed-config-369-d0dfc6cee.png&quot; alt=&quot;post image&quot; width=&quot;369&quot; height=&quot;148&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;creating-the-configjson-files&quot;&gt;Creating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.json&lt;/code&gt; files&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/config-128-c46695ddc.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/config-128-c46695ddc.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/config-128-c46695ddc.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;We need to create our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.json&lt;/code&gt; files.
They are 3 files:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.json&lt;/code&gt;: the baseline file, our common configuration should be defined here and will be used for the DEV environment.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.TEST.json&lt;/code&gt;: the file that the define specific configuration values for the TEST environment&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.PROD.json&lt;/code&gt;: the file that the define specific configuration values for the PROD environment
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;If you’re familiar with &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/web-forms/overview/deployment/visual-studio-web-deployment/web-config-transformations&quot;&gt;Web.config File Transformations&lt;/a&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appsettings.json&lt;/code&gt; files transformation, the philosophy used here is the same: the baseline file (config.json) contains all the common configuration values, and the specific environment files, like config.TEST.json and config.PROD.json, need to define only the values that are different for that environment&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Create the 3 files inside the subfolder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt;.
Here is the content of each one:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=config.json&quot;&gt; &lt;/script&gt;

&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=config.TEST.json&quot;&gt; &lt;/script&gt;

&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=config.PROD.json&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;running-the-gulp-for-the-second-time&quot;&gt;Running the gulp for the second time&lt;/h2&gt;
&lt;p&gt;Run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp&lt;/code&gt; in the root folder, you should see an output like this:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-ok-no-manifest-200-b124fa8a9.webp 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-ok-no-manifest-379-b124fa8a9.webp 379w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-ok-no-manifest-200-b124fa8a9.png 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-ok-no-manifest-379-b124fa8a9.png 379w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-ok-no-manifest-379-b124fa8a9.png&quot; alt=&quot;post image&quot; width=&quot;379&quot; height=&quot;255&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;p&gt;There is a new subfolder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt; created. Load it on Chrome Extensions page:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/chrome-extension-page-200-0991800ea.webp 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/chrome-extension-page-400-0991800ea.webp 400w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/chrome-extension-page-423-0991800ea.webp 423w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/chrome-extension-page-200-0991800ea.png 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/chrome-extension-page-400-0991800ea.png 400w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/chrome-extension-page-423-0991800ea.png 423w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/chrome-extension-page-423-0991800ea.png&quot; alt=&quot;post image&quot; width=&quot;423&quot; height=&quot;230&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;p&gt;The plugin should work ok.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Remember to remove the plugin previously loaded on Chrome and add it again from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;creating-the-hellojs&quot;&gt;Creating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Create a new file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.js&lt;/code&gt; inside the subfolder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scripts&lt;/code&gt;.
We will use this file to change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H1&lt;/code&gt; tag inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.html&lt;/code&gt;
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=hello.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;loading-scripts-on-hellohtml&quot;&gt;Loading scripts on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.html&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Change the content of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.html&lt;/code&gt; file to the content bellow:
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=hello.html&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This will load the .js and add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; attribute to our  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H1&lt;/code&gt; tag.&lt;/p&gt;

&lt;h2 id=&quot;reading-the-configuration-inside-the-scripts&quot;&gt;Reading the configuration inside the scripts&lt;/h2&gt;
&lt;p&gt;The first thing we need to do is change our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; file to allow the content of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scripts/config.js&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scripts/hello.js&lt;/code&gt; been read by the extension .js.
Open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; and change it to the content below:
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=manifest.json&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;/scripts/config.js&quot;&lt;/code&gt; is what we need to access the configuration values.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-manifestjson-files&quot;&gt;Creating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; files&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/manifest-128-579a71043.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/manifest-128-579a71043.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/manifest-128-579a71043.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;We need to create our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; files, in the same way, we created our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.json&lt;/code&gt; files.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
They are 3 files:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt;: the baseline file, our common manifest definition, and used by DEV environment (already created).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.TEST.json&lt;/code&gt;: the file that the define specific manifest configuration values for the TEST environment&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.PROD.json&lt;/code&gt;: the file that the define specific manifest configuration values for the PROD environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create the 2 files inside the subfolder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt;.
Here is the content of each one:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=manifest.TEST.json&quot;&gt; &lt;/script&gt;

&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=manifest.PROD.json&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;running-the-gulp-for-each-environment&quot;&gt;Running the gulp for each environment&lt;/h2&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-200-3afbb65ab.webp 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-336-3afbb65ab.webp 336w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-200-3afbb65ab.png 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-336-3afbb65ab.png 336w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-336-3afbb65ab.png&quot; alt=&quot;post image&quot; width=&quot;336&quot; height=&quot;167&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;Run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp&lt;/code&gt; in the root folder.
This will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEV&lt;/code&gt; configuration from config.js and manifest.json&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Is the same if you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp --config DEV&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Now, try to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp --config TEST&lt;/code&gt;.
In the Chrome Extensions page you should see something like this:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-extension-test-chrome-200-439243e20.webp 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-extension-test-chrome-400-439243e20.webp 400w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-extension-test-chrome-468-439243e20.webp 468w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-extension-test-chrome-200-439243e20.png 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-extension-test-chrome-400-439243e20.png 400w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-extension-test-chrome-468-439243e20.png 468w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-extension-test-chrome-468-439243e20.png&quot; alt=&quot;post image&quot; width=&quot;468&quot; height=&quot;358&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;p&gt;Your extension is using the TEST environment values.
When you click on the extension icon on the Chrome toolbar, you should see something like this:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-world-test-129-24527d511.webp 129w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-world-test-129-24527d511.png 129w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-world-test-129-24527d511.png&quot; alt=&quot;post image&quot; width=&quot;129&quot; height=&quot;177&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;You can try to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp --config PROD&lt;/code&gt;. To see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROD&lt;/code&gt; environment values on the extension.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;running-gulp---watch&quot;&gt;Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp --watch&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To have a fast and streamline workflow, we need that every time we change something on our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; folder, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder automatically updates and we can see the changes right on Chrome.&lt;/p&gt;

&lt;p&gt;Run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp --watch&lt;/code&gt;. It’ll monitor your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; folder and update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt;.&lt;br /&gt;
You can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--config&lt;/code&gt; option combine, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp --watch --config TEST&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;
&lt;p&gt;You can download the full source code of the plugin of this tutorial: &lt;a href=&quot;/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/chrome-extension-sample.zip&quot;&gt;chrome-extension-sample.zip&lt;a&gt;.&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this .zip are all files mentioned in this tutorial, you just need to set up your gulp environment and call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install gulp&lt;/code&gt; before starting to use it.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;In this tutorial, we learned how to create a development workflow for a Chrome extension, with different configurations and manifest.json for each environment, like DEV, TEST, and PROD.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="Tutorial" /><category term="unity3d" /><category term="gamedev" /><category term="math" /><category term="curves" /><summary type="html">In this tutorial, we will learn how to create a development workflow for a Chrome extension, with different configurations and manifest.json for each environment, like DEV, TEST, and PROD.</summary></entry><entry><title type="html">unitytips&amp;amp;colon; Focused Inspector</title><link href="http://diegogiacomelli.com.br/unitytips-focused-inspector/" rel="alternate" type="text/html" title="unitytips&amp;amp;colon; Focused Inspector" /><published>2020-09-08T00:00:00-03:00</published><updated>2020-09-08T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-focused-inspector</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-focused-inspector/">&lt;p&gt;Starting in Unity 2020.1, you can add a dedicated inspector window for a specific GameObject, Component, or Asset. 
It always displays the properties of the item you opened it for, even if you select something else in the editor.&lt;/p&gt;

&lt;p&gt;To activate a Focused Inspector, select an item &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(GameObject, Component, or Asset)&lt;/code&gt; and in the context menu hit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Properties...&lt;/code&gt; menu item.&lt;/p&gt;

&lt;center&gt;                
        &lt;img class=&quot;screenshot&quot; src=&quot;/assets/2020/09/08/unitytips-focused-inspector/focused-inspector.gif &quot; alt=&quot;post image&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;More details in the official documentation: &lt;a href=&quot;https://docs.unity3d.com/2020.1/Documentation/Manual/InspectorFocused.html&quot;&gt;Focused Inspectors&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content><author><name></name></author><category term="Lab" /><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><summary type="html">Starting in Unity 2020.1, you can add a dedicated inspector window for a specific GameObject, Component, or Asset. It always displays the properties of the item you opened it for, even if you select something else in the editor.</summary></entry><entry><title type="html">Unity 2020.1&amp;amp;colon; What’s new</title><link href="http://diegogiacomelli.com.br/unity-2020-1-whats-new/" rel="alternate" type="text/html" title="Unity 2020.1&amp;amp;colon; What’s new" /><published>2020-09-04T00:00:00-03:00</published><updated>2020-09-04T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-2020-1-whats-new</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-2020-1-whats-new/">&lt;h1 id=&quot;unity-20201&quot;&gt;Unity 2020.1&lt;/h1&gt;
&lt;p&gt;The Unity 2020.1 was official release on &lt;a href=&quot;https://blogs.unity3d.com/2020/07/23/unity-2020-1-is-now-available/&quot;&gt;July 23, 2020&lt;/a&gt; with a lot of fixes, API changes, changes, improvements and features.
You can find the new features directly on the Unity manual accessing this search: &lt;a href=&quot;https://docs.unity3d.com/2020.1/Documentation/Manual/30_search.html?q=newin20201&quot;&gt;newin20201&lt;/a&gt;.
To read all items, access the complete &lt;a href=&quot;https://unity3d.com/unity/whats-new/2020.1.0&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;stats&quot;&gt;Stats&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Fixes: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;805&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;API Changes: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;79&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Changes: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;70&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Improvements: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;215&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Features: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;74&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/yYjqJvd8lQI &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;my-feature-highlights&quot;&gt;My feature highlights&lt;/h1&gt;
&lt;p&gt;Below are the features that most caught my attention and that I believe can positively impact my development workflow.&lt;/p&gt;

&lt;h2 id=&quot;focused-inspector&quot;&gt;Focused Inspector&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Editor: Add focused Inspector, a property editor to inspect single object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is something I have been looking for for a while, an inspector editor for a specific item in the hierarchy.
Unity went further, allowing an editor focused on a component too.&lt;/p&gt;

&lt;center&gt;                
        &lt;img class=&quot;screenshot&quot; src=&quot;/assets/2020/09/04/unity-2020-1-whats-new/focused-inspector.gif &quot; alt=&quot;post image&quot; /&gt;
      &lt;/center&gt;

&lt;h3 id=&quot;for-gameobjects-and-project-assets&quot;&gt;For GameObjects and Project Assets&lt;/h3&gt;
&lt;p&gt;Right-click a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameObject&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hierarchy view&lt;/code&gt;, or an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Asset&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project view&lt;/code&gt;.
From the context menu, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Properties&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively, select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameObject&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Asset&lt;/code&gt; and do one of the following:&lt;br /&gt;
From the main menu, select Assets &amp;gt; Properties.
Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alt + P / Option + Shift + P&lt;/code&gt; shortcut.&lt;/p&gt;

&lt;h3 id=&quot;for-components&quot;&gt;For components&lt;/h3&gt;
&lt;p&gt;Inspect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameObject&lt;/code&gt; and locate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;component&lt;/code&gt; you want to open a focused Inspector for.&lt;br /&gt;
From the component’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;More items (⋮) menu&lt;/code&gt;, select Properties.&lt;/p&gt;

&lt;p&gt;More details in the &lt;a href=&quot;https://docs.unity3d.com/2020.1/Documentation/Manual/InspectorFocused.html&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;previewscenestage&quot;&gt;PreviewSceneStage&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Editor: Introduced PreviewSceneStage. Implement custom stages by inheriting from this class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I found this interesting but did not found any good documentation on how to use it.&lt;/p&gt;

&lt;h2 id=&quot;switch-between-debug-and-release-code-optimizations&quot;&gt;Switch between debug and release code optimizations&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Editor: Support to switch between debug and release code optimizations without restarting the Unity Editor improving Unity Editor performance when compiling in release.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/04/unity-2020-1-whats-new/switch-compilation-mode-200-29e77de54.webp 200w, /assets/images/generated/assets/2020/09/04/unity-2020-1-whats-new/switch-compilation-mode-388-29e77de54.webp 388w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/04/unity-2020-1-whats-new/switch-compilation-mode-200-29e77de54.png 200w, /assets/images/generated/assets/2020/09/04/unity-2020-1-whats-new/switch-compilation-mode-388-29e77de54.png 388w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/04/unity-2020-1-whats-new/switch-compilation-mode-388-29e77de54.png&quot; alt=&quot;post image&quot; width=&quot;388&quot; height=&quot;149&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;lighting-settings-as-an-asset&quot;&gt;Lighting settings as an asset&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;GI: Added all lighting settings as an asset. This will allow the user to share them between scenes or switch them out in an easy way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This can be quite useful when we need different lighting setups for different target platforms.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/04/unity-2020-1-whats-new/lighting-seetings-asset-200-198be746b.webp 200w, /assets/images/generated/assets/2020/09/04/unity-2020-1-whats-new/lighting-seetings-asset-400-198be746b.webp 400w, /assets/images/generated/assets/2020/09/04/unity-2020-1-whats-new/lighting-seetings-asset-554-198be746b.webp 554w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/04/unity-2020-1-whats-new/lighting-seetings-asset-200-198be746b.png 200w, /assets/images/generated/assets/2020/09/04/unity-2020-1-whats-new/lighting-seetings-asset-400-198be746b.png 400w, /assets/images/generated/assets/2020/09/04/unity-2020-1-whats-new/lighting-seetings-asset-554-198be746b.png 554w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/04/unity-2020-1-whats-new/lighting-seetings-asset-554-198be746b.png&quot; alt=&quot;post image&quot; width=&quot;554&quot; height=&quot;638&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;graphics-getpixeldata-api-was-added&quot;&gt;Graphics: GetPixelData API was added&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Graphics: GetPixelData API was added to Texture2D, Texture3D, Texture2DArray, Cubemap and CubemapArray classes. It allows getting a pointer to the data of a particular mip level/array element in a Texture for reading/writing, and without creating any memory allocations (similar to Texture2D.GetRawTextureData).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;input-system-is-now-verified&quot;&gt;Input System is now verified&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Input: The Input System has moved out of preview.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/sQaF9_jd9k4 &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;save-and-restore-particle-system-state-data&quot;&gt;Save and restore Particle System state data&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Particles: Abiltiy to save and restore Particle System state data, making it possible to save a snapshot of an entire Particle System at a point in time. A use case for this is for efficient rewind support, by saving periodic keyframes of the particle state, to avoid full resimulations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It seems to be possible through methods &lt;a href=&quot;https://docs.unity3d.com/2020.1/Documentation/ScriptReference/ParticleSystem.GetPlaybackState.html&quot;&gt;GetPlaybackState&lt;/a&gt; and &lt;a href=&quot;https://docs.unity3d.com/2020.1/Documentation/ScriptReference/ParticleSystem.SetPlaybackState.html&quot;&gt;SetPlaybackState&lt;/a&gt;, but they were already available in Unity 2019.4.&lt;/p&gt;

&lt;h2 id=&quot;new-component-articulationbody&quot;&gt;New component ArticulationBody&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Physics: Add a new component ArticulationBody that helps to create articulations. An articulation is a set of bodies, some of which have their relative motion constrained. All bodies are organized in a logical tree, where parent-child relation expresses the constrained motion. Unlike regular Rigidbodies with Joints, articulations are solved with a different solver (Featherstone) in reduced coordinates which guarantees there will never be any stretch of locked degrees of freedom. Typical examples of articulations include robotic arms, ragdolls, etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This blog post talks in more details this new physics component: &lt;a href=&quot;https://blogs.unity3d.com/2020/05/20/use-articulation-bodies-to-easily-prototype-industrial-designs-with-realistic-motion-and-behavior/&quot;&gt;Use articulation bodies to easily prototype industrial designs with realistic motion and behavior&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;new-shader-preprocessor&quot;&gt;New shader preprocessor&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Shaders: New shader preprocessor (experimental).&lt;/li&gt;
    &lt;li&gt;Faster shader compilation.&lt;/li&gt;
    &lt;li&gt;Accurate include dependency tracking.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;These were the features that brought my attention to Unity 2020.1.&lt;br /&gt;
What were the features that caught your attention?&lt;/p&gt;</content><author><name></name></author><category term="News" /><category term="unity3d" /><category term="gamedev" /><summary type="html"></summary></entry><entry><title type="html">Unity Distribution Portal (UDP) Journey&amp;amp;colon; Tips &amp;amp; Tricks</title><link href="http://diegogiacomelli.com.br/unity-distribution-portal-udp-journey-tips-and-tricks/" rel="alternate" type="text/html" title="Unity Distribution Portal (UDP) Journey&amp;amp;colon; Tips &amp;amp; Tricks" /><published>2020-09-01T00:00:00-03:00</published><updated>2020-09-01T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-distribution-portal-udp-journey-tips-and-tricks</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-distribution-portal-udp-journey-tips-and-tricks/">&lt;p&gt;In this post, I will list some tips and tricks that I learned in my journey using the &lt;a href=&quot;https://github.com/playgameservices/play-games-plugin-for-unity&quot;&gt;Unity Distribution Portal (UDP)&lt;/a&gt; to publish my game &lt;a href=&quot;https://play.google.com/store/apps/details?id=br.com.diegogiacomelli.puzzimals&quot;&gt;Puzzimals&lt;/a&gt; to 4 new stores, reaching millions of new users, with a single build.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Unity has recently &lt;a href=&quot;https://blogs.unity3d.com/2020/08/28/unlock-access-to-over-a-billion-new-players-for-your-android-mobile-game/&quot;&gt;launch to everyone the Unity Distribution Portal (UDP)&lt;/a&gt; a platform that enable Unity developers to distribute Android games beyond Google Play, into stores like Samsung Galaxy Store, ONE Store, Mi GetApps, HUAWEI AppGallery, QooApp Game Store, SHAREit Game Store, TPAY MOBILE Stores, APPTUTTI, and VIVEPORT.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Unity Distribution Portal was created to help make publishing mobile games on alternative app stores faster and easier for developers. When you submit your game, UDP automatically creates specific builds with all required SDKs in the background, saving you a substantial amount of time when publishing to multiple stores.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unity Distribution Portal (UDP) lets you distribute your games to multiple app stores through a single hub. UDP repacks your Android build with each store’s dedicated In-App Purchase SDK. You can manage all your store submissions from the UDP console.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post is focused on games that have IAP and use Google Play Services, like leaderboards and achievements.
If your game does not have any of these features, publish to UDP is quite a more straightforward process and probably these tips here won’t be useful for you.&lt;/p&gt;

&lt;h2 id=&quot;available-stores&quot;&gt;Available Stores&lt;/h2&gt;
&lt;p&gt;As I write this post Unity is working to add even more stores to UDP.
From the 9 stores supported, 7 are fully integrated with UDP. What this meaning? You just need to create your account on each store, via UDP (in some cases fill some forms and send some ID and bank docs), and UDP will perform all the steps need to make your game available on the store.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;
&lt;p&gt;Is not the intent of this post cover everything about how to publish your game using UDP, I guess this quite well documented on &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.purchasing.udp@2.0/manual/index.html&quot;&gt;UDP package documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea of this post is to point out some tips and tricks that can help you, as helped me, to understand how to use UDP.&lt;/p&gt;

&lt;h2 id=&quot;read-the-docs&quot;&gt;Read the docs&lt;/h2&gt;
&lt;p&gt;Please, if you did not read the official documentation yet, go and &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.purchasing.udp@2.0/manual/index.html&quot;&gt;read it&lt;/a&gt;, then come back here. You’ll better understand this post and the whole UDP solution after educated yourself about it.&lt;/p&gt;

&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-journey-200-51d2d476b.webp 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-journey-400-51d2d476b.webp 400w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-journey-800-51d2d476b.webp 800w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-journey-1024-51d2d476b.webp 1024w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-journey-200-51d2d476b.png 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-journey-400-51d2d476b.png 400w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-journey-800-51d2d476b.png 800w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-journey-1024-51d2d476b.png 1024w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-journey-800-51d2d476b.png&quot; alt=&quot;post image&quot; width=&quot;1024&quot; height=&quot;768&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;1-implement&quot;&gt;1. Implement&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;What docs says: Set up and configure UDP in the Unity Editor, implement UDP in your game project, and populate your IAP Catalog with your in-app purchase products (if any).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;11-create-a-new-game-on-udp&quot;&gt;1.1 Create a new game on UDP&lt;/h3&gt;
&lt;p&gt;Go to the UDP dashboard and just create a new game. 
At this moment just set the game title.&lt;/p&gt;

&lt;h3 id=&quot;12-iap-and-target-udp&quot;&gt;1.2 IAP and Target UDP&lt;/h3&gt;
&lt;p&gt;There is two way to use UDP on your project: using the UDP package or using the Unity IAP.
In my case, I was using IAP already in the project.&lt;/p&gt;

&lt;p&gt;This tip is in the official &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.purchasing.udp@2.0/manual/games-with-iap.html&quot;&gt;documentation&lt;/a&gt;, but would like to reinforce it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the Unity Editor, to choose UDP as the Android build target, select Window &amp;gt; Unity IAP &amp;gt; Android &amp;gt; Target Unity Distribution Portal (UDP).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You’ll need this when you build to UDP and remember to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Target Google Play&lt;/code&gt; when you build to Google Play.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/target-udp-200-2be9cf25c.webp 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/target-udp-400-2be9cf25c.webp 400w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/target-udp-800-2be9cf25c.webp 800w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/target-udp-1000-2be9cf25c.webp 1000w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/target-udp-200-2be9cf25c.png 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/target-udp-400-2be9cf25c.png 400w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/target-udp-800-2be9cf25c.png 800w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/target-udp-1000-2be9cf25c.png 1000w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/target-udp-800-2be9cf25c.png&quot; alt=&quot;post image&quot; width=&quot;1000&quot; height=&quot;375&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;2-build--deploy&quot;&gt;2. Build &amp;amp; deploy&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;What docs says: Build your UDP Android package (apk), test it in the UDP Sandbox environment, and deploy it to the UDP console where you’ll begin preparing your game for submission to the stores.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;21-sandbox-environment-test&quot;&gt;2.1 Sandbox environment test&lt;/h3&gt;
&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sandbox Testing&lt;/code&gt; section of your game page on UDP, you will find some instructions on how to test your game on the UDP sandbox.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;You will need to do this before repacking your game for the stores.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Just build your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.apk&lt;/code&gt; on Unity and open it on emulator (like &lt;a href=&quot;https://www.bluestacks.com/&quot;&gt;BlueStacks&lt;/a&gt;) or directly on your Android device.
If you setup UDP right, you should see a screen like below when the game starts.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-login-200-65a5a4303.webp 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-login-400-65a5a4303.webp 400w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-login-489-65a5a4303.webp 489w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-login-200-65a5a4303.png 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-login-400-65a5a4303.png 400w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-login-489-65a5a4303.png 489w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/udp-login-489-65a5a4303.png&quot; alt=&quot;post image&quot; width=&quot;489&quot; height=&quot;239&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;To login in this screen, use the accounts in the setup on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sandbox Test Account&lt;/code&gt;. Remember those e-mails don’t need to exist, they are just test accounts to validate UDP setup&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Perform the login on the UDP sandbox and test your IAP.&lt;/p&gt;

&lt;p&gt;After this, you can refresh your game page on UDP and you should see the result below on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sandbox Testing&lt;/code&gt; section:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/sandbox-testing-200-289a63222.webp 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/sandbox-testing-346-289a63222.webp 346w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/sandbox-testing-200-289a63222.png 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/sandbox-testing-346-289a63222.png 346w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/sandbox-testing-346-289a63222.png&quot; alt=&quot;post image&quot; width=&quot;346&quot; height=&quot;86&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;If you did not setup the UDP on your project, you should see a message like this on UDP dashboard notifications &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apk analytics failed, caused by: analyse apk failed, caused by:Failed to find GameSettings.prop, please import udp sdk and generate GameSettings.&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;22-package-name-extensions-and-google-play-services&quot;&gt;2.2 Package name extensions and Google Play Services&lt;/h3&gt;
&lt;p&gt;When UDP repacks your game with store-specific SDK it will, most of the time, change the name of the package, adding a store-specific extension, like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gs&lt;/code&gt; to Samsung Galaxy Store&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.unity.migc&lt;/code&gt; to Mi GetApps&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.qooapp&lt;/code&gt; QooApp to Game Store&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because of this extension, we will need to configure a new OAuth credential to each extension on &lt;a href=&quot;https://console.developers.google.com/apis&quot;&gt;Google API Console&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my case on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App Signature&lt;/code&gt; section of the game info, a used the recommend option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Export and upload your own key and certificate&lt;/code&gt;. This is the same certificate used by Google Play Services and APIs.&lt;/p&gt;

&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/app-signature-200-3a4a50966.webp 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/app-signature-400-3a4a50966.webp 400w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/app-signature-800-3a4a50966.webp 800w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/app-signature-882-3a4a50966.webp 882w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/app-signature-200-3a4a50966.png 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/app-signature-400-3a4a50966.png 400w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/app-signature-800-3a4a50966.png 800w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/app-signature-882-3a4a50966.png 882w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/app-signature-800-3a4a50966.png&quot; alt=&quot;post image&quot; width=&quot;882&quot; height=&quot;238&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://console.developers.google.com/apis&quot;&gt;Google API Console&lt;/a&gt;, select your game project on the dropdown, then go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Credentials&lt;/code&gt; section, then on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OAuth 2.0 Client IDs&lt;/code&gt; section select the item with the name of your game, then copy the value of the field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA-1 certificate fingertip&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, go back to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Credentials&lt;/code&gt; section and click on the button &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create credentials&lt;/code&gt;, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OAuth client ID&lt;/code&gt;.&lt;/p&gt;

&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/google-api-credentials-200-ef36e16c7.webp 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/google-api-credentials-400-ef36e16c7.webp 400w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/google-api-credentials-596-ef36e16c7.webp 596w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/google-api-credentials-200-ef36e16c7.png 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/google-api-credentials-400-ef36e16c7.png 400w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/google-api-credentials-596-ef36e16c7.png 596w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/google-api-credentials-596-ef36e16c7.png&quot; alt=&quot;post image&quot; width=&quot;596&quot; height=&quot;240&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;p&gt;In the new page, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Android&lt;/code&gt; on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application type&lt;/code&gt; dropdown.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Name&lt;/code&gt; field you can write anything you want, but maybe use your game name following with the extension store can help to find it later.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Package name&lt;/code&gt; field you should add the exact package name for the specific store on UDP. For example, in my case for Mi GetApps store, the package name was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br.com.diegogiacomelli.puzzimals.unity.migc&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;If you have doubted what is the exact package name for your game on a specific store on UDP, you can click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Advanced&lt;/code&gt; link of that store on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Publish&lt;/code&gt; tab of UDP&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Now in the field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA-1 certificate fingertip&lt;/code&gt; you should paste the value you copy before from the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OAuth 2.0 Client IDs&lt;/code&gt; configuration.&lt;/p&gt;

&lt;p&gt;Then click on the button &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You will need to repeat those steps for each store that change your package name.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;3-game-info&quot;&gt;3. Game Info&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;What docs says: On the UDP console, provide app store listing information and resources for your game, such as multi-language descriptions, multi-currency price points, screenshots, video trailers, and create releases for distribution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;31-import-from-google-play&quot;&gt;3.1 Import from Google Play&lt;/h3&gt;
&lt;p&gt;As you follow the UDP documentation you will reach the point will need to create your game on the UDP dashboard.
If you already have the game published on Google Play, as was my case with &lt;a href=&quot;https://play.google.com/store/apps/details?id=br.com.diegogiacomelli.puzzimals&quot;&gt;Puzzimals&lt;/a&gt;, you can use the right-top button &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IMPORT FROM GOOGLE PLAY&lt;/code&gt; in the game page.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/import-from-google-200-0e5146f1b.webp 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/import-from-google-400-0e5146f1b.webp 400w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/import-from-google-610-0e5146f1b.webp 610w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/import-from-google-200-0e5146f1b.png 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/import-from-google-400-0e5146f1b.png 400w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/import-from-google-610-0e5146f1b.png 610w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/import-from-google-610-0e5146f1b.png&quot; alt=&quot;post image&quot; width=&quot;610&quot; height=&quot;239&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;p&gt;After the import, you can edit the information as well.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;You can add the argument &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hl&lt;/code&gt; to your Google Play url to import a specific translation, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://play.google.com/store/apps/details?id=br.com.diegogiacomelli.puzzimals&amp;amp;hl=pt&lt;/code&gt; to import Portuguese translation&lt;/p&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;4-submission&quot;&gt;4. Submission&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;What docs says: Sign up with the stores using your UnityID, and register your game with the app stores directly from inside the UDP console.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Publish&lt;/code&gt; tab, select a store and click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sign up to...&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Follow the needed steps for each store you would like to publish.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;5-publish&quot;&gt;5. Publish&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;What docs says: Select the stores you want to submit your game to. UDP automatically repacks your game into store-specific builds and submits them to the stores along with the relevant game descriptions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;51-upload&quot;&gt;5.1 Upload&lt;/h3&gt;
&lt;p&gt;Now that you have a valid UDP &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.apk&lt;/code&gt; and game info filled, you can upload it on the UDP dashboard, inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Binary&lt;/code&gt; section.&lt;/p&gt;

&lt;h3 id=&quot;52-testing-your-repack-apk&quot;&gt;5.2 Testing your repack .apk&lt;/h3&gt;
&lt;p&gt;Now the specific store should show a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repack game&lt;/code&gt; dropdown on the UDP dashboard.&lt;/p&gt;

&lt;p&gt;Select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repack game&lt;/code&gt; and UDP should generate a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.apk&lt;/code&gt; of your game with the store SDK. This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.apk&lt;/code&gt; will be available to download on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Advanced&lt;/code&gt; link. Download it from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Download APK Certificate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For each store, you need to test your repack &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.apk&lt;/code&gt; to certificate that everything in your game is running ok.&lt;/p&gt;

&lt;p&gt;Open the repack &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.apk&lt;/code&gt; on an emulator or an Android device.&lt;/p&gt;

&lt;p&gt;Test your IAP and Google Play Services, they are working as expected?&lt;/p&gt;

&lt;p&gt;For each store, you will see different screens. For example, for QooApp you will see something like this:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/qooapp-login-200-1e49178bb.webp 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/qooapp-login-282-1e49178bb.webp 282w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/qooapp-login-200-1e49178bb.png 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/qooapp-login-282-1e49178bb.png 282w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/qooapp-login-282-1e49178bb.png&quot; alt=&quot;post image&quot; width=&quot;282&quot; height=&quot;268&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h3 id=&quot;53-send-it-to-review&quot;&gt;5.3 Send it to review&lt;/h3&gt;
&lt;p&gt;Now you can select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Submit to Store&lt;/code&gt; in the dropdown, then select the checkbox store on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Publish&lt;/code&gt; page and click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Publish&lt;/code&gt; button.
UDP will send the game to store review and you can monitor the progress on the dashboard.
UDP will send to you an e-mail when the game is approved.&lt;/p&gt;

&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/publish-button-200-3447a9f64.webp 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/publish-button-400-3447a9f64.webp 400w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/publish-button-800-3447a9f64.webp 800w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/publish-button-1000-3447a9f64.webp 1000w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/publish-button-200-3447a9f64.png 200w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/publish-button-400-3447a9f64.png 400w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/publish-button-800-3447a9f64.png 800w, /assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/publish-button-1000-3447a9f64.png 1000w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/01/unity-distribution-portal-udp-journey-tips-and-tricks/publish-button-800-3447a9f64.png&quot; alt=&quot;post image&quot; width=&quot;1000&quot; height=&quot;470&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;6-performance&quot;&gt;6. Performance&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;What docs says: When your game is published, monitor its performance across the different stores from the UDP reporting dashboard.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wait the game been published on the store and will see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reporting Dashboard&lt;/code&gt; been populated with stats about the game.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With these tips and tricks that I learned while using UDP I hope I helped you to the UDP Journey:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Implement UDP in your Unity project&lt;/li&gt;
  &lt;li&gt;Build and deploy your game to UDP&lt;/li&gt;
  &lt;li&gt;Edit your game information&lt;/li&gt;
  &lt;li&gt;Prepare your game for submission&lt;/li&gt;
  &lt;li&gt;Publish to stores&lt;/li&gt;
  &lt;li&gt;Track game performance&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Tutorial" /><category term="unity3d" /><category term="gamedev" /><category term="android" /><category term="self-publishing" /><category term="udp" /><summary type="html">In this post, I will list some tips and tricks that I learned in my journey using the Unity Distribution Portal (UDP) to publish my game Puzzimals to 4 new stores, reaching millions of new users, with a single build.</summary></entry><entry><title type="html">Kenney Jam 2020 entry&amp;amp;colon; Curseings</title><link href="http://diegogiacomelli.com.br/keeney-jam-2020-entry-curseings/" rel="alternate" type="text/html" title="Kenney Jam 2020 entry&amp;amp;colon; Curseings" /><published>2020-08-26T00:00:00-03:00</published><updated>2020-08-26T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/keeney-jam-2020-entry-curseings</id><content type="html" xml:base="http://diegogiacomelli.com.br/keeney-jam-2020-entry-curseings/">&lt;p&gt;Last weekend I participated in &lt;strong&gt;Kenney Jam 2020&lt;/strong&gt; (my first game jam).
The experience was really good, when you have so strong boundaries to make a game, in this case, &lt;strong&gt;48 hours and just use assets from &lt;a href=&quot;http://Kenney.nl/assets&quot;&gt;Kenney&lt;/a&gt;&lt;/strong&gt;, you need to turn your way of think and expectations to a very specific and clear objective: release a fun and playable game the target just the core mechanics.&lt;/p&gt;

&lt;h2 id=&quot;the-theme&quot;&gt;The theme&lt;/h2&gt;
&lt;p&gt;The theme for this game jam was &lt;strong&gt;“Cursed”&lt;/strong&gt;.
I took some time thinking about what game I would like to play and develop with such a theme, then I remembered how much I loved to play Lemmings and how those little ones were cursed to live in the small world where some of them should sacrifice for the others.&lt;/p&gt;

&lt;p&gt;With this in mind, I started developing the game and things happened very well and I delivered my entry right on time. I had the finished version some hours before, but I took some time to review it.&lt;/p&gt;

&lt;p&gt;The final result is &lt;strong&gt;a simple game that takes the Lemmings core mechanic and adds some twist&lt;/strong&gt;: in Curseings, there are two kinds of walkers: the human and the cursed and you need to take each kind to different portals. If a cursed touch a human, that human becomes a cursed one too. The gamer will need to use this new mechanic to overcome some levels, sometimes the player will need to avoid they touch each other, sometimes don’t.&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/I3fRyrc6yrA &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;how-to-play&quot;&gt;How to play&lt;/h2&gt;
&lt;p&gt;The game can be download for Windows and Mac here: &lt;a href=&quot;https://giacomelli.itch.io/curseings&quot;&gt;https://giacomelli.itch.io/curseings&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Just drag a behavior from the toolbar over a correspond walker to change his behavior.&lt;/li&gt;
  &lt;li&gt;The objective of each level is to help the expected number of people and cursed to reach each portal.&lt;/li&gt;
  &lt;li&gt;When a cursed touches a person, the person morphs into a cursed.&lt;/li&gt;
  &lt;li&gt;Drag an item from the toolbar over a person or cursed to change its behavior.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/08/26/keeney-jam-2020-entry-curseings/cast-a-vote-192-6b3e9fff4.webp 192w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/08/26/keeney-jam-2020-entry-curseings/cast-a-vote-192-6b3e9fff4.png 192w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/08/26/keeney-jam-2020-entry-curseings/cast-a-vote-192-6b3e9fff4.png&quot; alt=&quot;post image&quot; width=&quot;192&quot; height=&quot;256&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-vote&quot;&gt;How to vote&lt;/h2&gt;
&lt;p&gt;If you liked the game, &lt;strong&gt;you can cast a vote&lt;/strong&gt; for the game jam here: &lt;a href=&quot;https://itch.io/jam/kenney-jam-2020/rate/737655&quot;&gt;https://itch.io/jam/kenney-jam-2020/rate/737655&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="Article" /><category term="game-jam" /><category term="games" /><category term="made-with-unity" /><summary type="html">Last weekend I participated in Kenney Jam 2020 (my first game jam). The experience was really good, when you have so strong boundaries to make a game, in this case, 48 hours and just use assets from Kenney, you need to turn your way of think and expectations to a very specific and clear objective: release a fun and playable game the target just the core mechanics.</summary></entry><entry><title type="html">Drawing a Maurer Rose With Unity</title><link href="http://diegogiacomelli.com.br/drawing-a-maurer-rose-with-unity/" rel="alternate" type="text/html" title="Drawing a Maurer Rose With Unity" /><published>2020-08-21T00:00:00-03:00</published><updated>2020-08-21T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/drawing-a-maurer-rose-with-unity</id><content type="html" xml:base="http://diegogiacomelli.com.br/drawing-a-maurer-rose-with-unity/">&lt;p&gt;In this tutorial we will learn how to draw a &lt;a href=&quot;https://en.wikipedia.org/wiki/Maurer_rose&quot;&gt;Maurer Rose&lt;/a&gt; with a &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/LineRenderer.html&quot;&gt;LineRenderer&lt;/a&gt; in Unity.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recently, I was watching a video by &lt;a href=&quot;https://twitter.com/shiffman&quot;&gt;Daniel Shiffman&lt;/a&gt; about Maurer Rose that inspired me to try it out at Unity.&lt;/p&gt;

&lt;p&gt;Now you must be thinking “What the hell is a Maurer Rose?”, Well, I didn’t know it until I watched &lt;a href=&quot;https://youtu.be/4uU9lZ-HSqA&quot;&gt;that video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s see what Wikipedia says about:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Maurer rose of the rose r = sin(nθ) consists of the 360 lines successively connecting the above 361 points. Thus a Maurer rose is a polygonal curve with vertices on a rose.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The following gif shows the evolution of a Maurer Rose (n = 2, d = 29°) from 1 point to 361 points.&lt;/p&gt;
&lt;center&gt;                
        &lt;img class=&quot;screenshot&quot; src=&quot;/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-sample.gif &quot; alt=&quot;post image&quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;definition&quot;&gt;Definition&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/project-128-4f597ed4f.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/project-128-4f597ed4f.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/project-128-4f597ed4f.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;A Maurer Rose is always defined by two input parameters: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; represents the number of petals. The rose has n petals if n is odd, and 2n petals if n is even (look to the gif above, n = 2, then 4 petals).&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; represents the angle in degrees for each line.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let r = sin(nθ) be a rose in the polar coordinate system, where n is a positive integer.&lt;/p&gt;

  &lt;p&gt;We then take 361 points on the rose:
(sin(nk), k) (k = 0, d, 2d, 3d, …, 360d),
where d is a positive integer and the angles are in degrees, not radians.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This definition talks about &lt;a href=&quot;https://en.wikipedia.org/wiki/Polar_coordinate_system&quot;&gt;polar coordinate system&lt;/a&gt;. The more important thing to know about it is this: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each point on a plane is determined by a distance from a reference point and an angle from a reference direction&lt;/code&gt;. So, if you want to draw a line from a point, we need to take that point, an angle, and distance to calculate the second point.&lt;/p&gt;

&lt;h2 id=&quot;the-formula&quot;&gt;The formula&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/math-128-7fe17d269.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/math-128-7fe17d269.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/math-128-7fe17d269.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;The basic formula is: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r = sin(nθ)&lt;/code&gt; and we need to apply it to 361 points, where:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r = sin(n * (d * point))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In C# the code is something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/9dc5d4d408c00e92143827293a017936.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We calculate the angle for each point, then we get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt; and find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; for the second point on the polar coordinate system.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mathf.PI / 180f&lt;/code&gt; is to convert from degrees to radians to work properly with the Mathf functions.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;maurerroselinerenderer&quot;&gt;MaurerRoseLineRenderer&lt;/h2&gt;
&lt;p&gt;Now the complete code for a MonoBehaviour that takes the formula we saw in the previous section and combine it with a LineRenderer to draw the Maurer Rose.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f4aba5c5d7cbeb396ca784dff150e194.js&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;using-the-maurerroselinerenderer&quot;&gt;Using the MaurerRoseLineRenderer&lt;/h2&gt;
&lt;p&gt;To use it, just create a new GameObject and add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaurerRoseLineRenderer&lt;/code&gt; component to it.&lt;/p&gt;

&lt;p&gt;If you just hit play button, you will see something like this:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-first-try-200-d24407ade.webp 200w, /assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-first-try-256-d24407ade.webp 256w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-first-try-200-d24407ade.png 200w, /assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-first-try-256-d24407ade.png 256w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-first-try-256-d24407ade.png&quot; alt=&quot;post image&quot; width=&quot;256&quot; height=&quot;242&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;p&gt;&lt;br /&gt;
Go to the LineRenderer component and change the line width to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.03&lt;/code&gt;, then hit play button again.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-second-try-200-71a3f234d.webp 200w, /assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-second-try-256-71a3f234d.webp 256w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-second-try-200-71a3f234d.png 200w, /assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-second-try-256-71a3f234d.png 256w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-second-try-256-71a3f234d.png&quot; alt=&quot;post image&quot; width=&quot;256&quot; height=&quot;224&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;testing-new-inputs&quot;&gt;Testing new inputs&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;If you change the values of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt; of the component in the inspector, you will see a new Maurer Rose been drawing.&lt;/p&gt;

&lt;p&gt;The image below shows the result of 6 different inputs (the same inputs used on &lt;a href=&quot;https://en.wikipedia.org/wiki/Maurer_rose&quot;&gt;Wikipedia&lt;/a&gt;):&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-roses-200-5a8621fe1.webp 200w, /assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-roses-400-5a8621fe1.webp 400w, /assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-roses-800-5a8621fe1.webp 800w, /assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-roses-1600-5a8621fe1.webp 1600w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-roses-200-5a8621fe1.png 200w, /assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-roses-400-5a8621fe1.png 400w, /assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-roses-800-5a8621fe1.png 800w, /assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-roses-1600-5a8621fe1.png 1600w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-roses-800-5a8621fe1.png&quot; alt=&quot;post image&quot; width=&quot;2400&quot; height=&quot;400&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;going-beyond&quot;&gt;Going beyond&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/beyond-128-1d53f18c1.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/beyond-128-1d53f18c1.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/beyond-128-1d53f18c1.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;Now that you understand what is a Maurer Rose and how to code it inside Unity you can try to do some crazy things with it, like animate the input values or the number of points, or still using it to build a particle system.&lt;/p&gt;

&lt;p&gt;Below I show my realtime try on this matter:&lt;/p&gt;

&lt;iframe src=&quot;/apps/maurer-rose/index.html&quot; style=&quot;width: 100%;min-height: 700px;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this tutorial, we learned how to draw a Maurer Rose with a LineRenderer.
This simple formula show how math can be used to explore creativity and beauty.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The font used on the WebGL sample is from &lt;a href=&quot;http://kenney.nl&quot;&gt;Kenney&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="Tutorial" /><category term="unity3d" /><category term="gamedev" /><category term="math" /><category term="curves" /><category term="webgl" /><summary type="html">In this tutorial we will learn how to draw a Maurer Rose with a LineRenderer in Unity.</summary></entry></feed>