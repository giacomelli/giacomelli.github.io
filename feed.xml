<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://diegogiacomelli.com.br/feed.xml" rel="self" type="application/atom+xml" /><link href="http://diegogiacomelli.com.br/" rel="alternate" type="text/html" /><updated>2020-08-22T09:08:21-03:00</updated><id>http://diegogiacomelli.com.br/feed.xml</id><title type="html">Diego Giacomelli</title><subtitle>programmer</subtitle><entry><title type="html">Drawing a Maurer Rose With Unity</title><link href="http://diegogiacomelli.com.br/drawing-a-maurer-rose-with-unity/" rel="alternate" type="text/html" title="Drawing a Maurer Rose With Unity" /><published>2020-08-21T00:00:00-03:00</published><updated>2020-08-21T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/drawing-a-maurer-rose-with-unity</id><content type="html" xml:base="http://diegogiacomelli.com.br/drawing-a-maurer-rose-with-unity/">&lt;p&gt;In this tutorial we will learn how to draw a &lt;a href=&quot;https://en.wikipedia.org/wiki/Maurer_rose&quot;&gt;Maurer Rose&lt;/a&gt; with a &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/LineRenderer.html&quot;&gt;LineRenderer&lt;/a&gt; in Unity.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recently, I was watching a video by &lt;a href=&quot;https://twitter.com/shiffman&quot;&gt;Daniel Shiffman&lt;/a&gt; about Maurer Rose that inspired me to try it out at Unity.&lt;/p&gt;

&lt;p&gt;Now you must be thinking “What the hell is a Maurer Rose?”, Well, I didn’t know it until I watched &lt;a href=&quot;https://youtu.be/4uU9lZ-HSqA&quot;&gt;that video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s see what Wikipedia says about:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Maurer rose of the rose r = sin(nθ) consists of the 360 lines successively connecting the above 361 points. Thus a Maurer rose is a polygonal curve with vertices on a rose.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The following gif shows the evolution of a Maurer Rose (n = 2, d = 29°) from 1 point to 361 points.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-sample.gif &quot; /&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;definition&quot;&gt;Definition&lt;/h1&gt;
&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/project.png &quot; style=&quot;max-height:200px&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;A Maurer Rose is always defined by two input parameters: &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; represents the number of petals. The rose has n petals if n is odd, and 2n petals if n is even (look to the gif above, n = 2, then 4 petals).&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; represents the angle in degrees for each line.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let r = sin(nθ) be a rose in the polar coordinate system, where n is a positive integer.&lt;/p&gt;

  &lt;p&gt;We then take 361 points on the rose:
(sin(nk), k) (k = 0, d, 2d, 3d, …, 360d),
where d is a positive integer and the angles are in degrees, not radians.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This definition talks about &lt;a href=&quot;https://en.wikipedia.org/wiki/Polar_coordinate_system&quot;&gt;polar coordinate system&lt;/a&gt;. The more important thing to know about it is this: &lt;code class=&quot;highlighter-rouge&quot;&gt;each point on a plane is determined by a distance from a reference point and an angle from a reference direction&lt;/code&gt;. So, if you want to draw a line from a point, we need to take that point, an angle, and distance to calculate the second point.&lt;/p&gt;

&lt;h1 id=&quot;the-formula&quot;&gt;The formula&lt;/h1&gt;
&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/math.png &quot; style=&quot;max-height:200px&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;The basic formula is: &lt;code class=&quot;highlighter-rouge&quot;&gt;r = sin(nθ)&lt;/code&gt; and we need to apply it to 361 points, where:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r = sin(n * (d * point))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In C# the code is something like this:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9dc5d4d408c00e92143827293a017936.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We calculate the angle for each point, then we get the &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; and find the &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; for the second point on the polar coordinate system.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Mathf.PI / 180f&lt;/code&gt; is to convert from degrees to radians to work properly with the Mathf functions.&lt;/p&gt;
&lt;/div&gt;

&lt;h1 id=&quot;maurerroselinerenderer&quot;&gt;MaurerRoseLineRenderer&lt;/h1&gt;
&lt;p&gt;Now the complete code for a MonoBehaviour that takes the formula we saw in the previous section and combine it with a LineRenderer to draw the Maurer Rose.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/f4aba5c5d7cbeb396ca784dff150e194.js&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h1 id=&quot;using-the-maurerroselinerenderer&quot;&gt;Using the MaurerRoseLineRenderer&lt;/h1&gt;
&lt;p&gt;To use it, just create a new GameObject and add the &lt;code class=&quot;highlighter-rouge&quot;&gt;MaurerRoseLineRenderer&lt;/code&gt; component to it.&lt;/p&gt;

&lt;p&gt;If you just hit play button, you will see something like this:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-first-try.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;&lt;br /&gt;
Go to the LineRenderer component and change the line width to &lt;code class=&quot;highlighter-rouge&quot;&gt;0.03&lt;/code&gt;, then hit play button again.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-rose-second-try.png &quot; /&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;testing-new-inputs&quot;&gt;Testing new inputs&lt;/h1&gt;
&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/programmer.png &quot; style=&quot;max-height:200px&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;If you change the values of &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt; of the component in the inspector, you will see a new Maurer Rose been drawing.&lt;/p&gt;

&lt;p&gt;The image below shows the result of 6 different inputs (the same inputs used on &lt;a href=&quot;https://en.wikipedia.org/wiki/Maurer_rose&quot;&gt;Wikipedia&lt;/a&gt;):&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/08/21/drawing-a-maurer-rose-with-unity/maurer-roses.png &quot; /&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;going-beyond&quot;&gt;Going beyond&lt;/h1&gt;
&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/beyond.png &quot; style=&quot;max-height:200px&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;Now that you understand what is a Maurer Rose and how to code it inside Unity you can try to do some crazy things with it, like animate the input values or the number of points, or still using it to build a particle system.&lt;/p&gt;

&lt;p&gt;Below I show my realtime try on this matter:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/apps/maurer-rose/index.html&quot; target=&quot;_blank&quot;&gt;Open in a new window&lt;/a&gt;&lt;/p&gt;
&lt;iframe src=&quot;/apps/maurer-rose/index.html&quot; style=&quot;width: 960px;height: 700px;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this tutorial, we learned how to draw a Maurer Rose with a LineRenderer.
This simple formula show how math can be used to explore creativity and beauty.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The font used on the WebGL sample is from &lt;a href=&quot;http://kenney.nl&quot;&gt;Kenney&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="Tutorial" /><category term="unity3d" /><category term="gamedev" /><category term="math" /><category term="curves" /><summary type="html">In this tutorial we will learn how to draw a Maurer Rose with a LineRenderer in Unity.</summary></entry><entry><title type="html">Puzzimals&amp;amp;colon; Open beta</title><link href="http://diegogiacomelli.com.br/puzzimals-open-beta/" rel="alternate" type="text/html" title="Puzzimals&amp;amp;colon; Open beta" /><published>2020-08-12T00:00:00-03:00</published><updated>2020-08-12T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/puzzimals-open-beta</id><content type="html" xml:base="http://diegogiacomelli.com.br/puzzimals-open-beta/">&lt;p&gt;After 4 months of work, I am finally starting the open beta of Puzzimals: &lt;a href=&quot;https://play.google.com/store/apps/details?id=br.com.diegogiacomelli.puzzimals&quot;&gt;https://play.google.com/store/apps/details?id=br.com.diegogiacomelli.puzzimals&lt;/a&gt;&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/RmLcK4Z7EUY &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;cute-but-challenging&quot;&gt;Cute, but challenging!&lt;/h2&gt;

&lt;p&gt;Don’t let the cute look or super fun animations fool you, Puzzimals is a cube-matching game challenging you to match identical tiles in 100 levels of thought-provoking puzzles in a world map.&lt;/p&gt;

&lt;p&gt;Packed with features and creative puzzles you can combine cubes of ice, wild cards, bombs and so much more!&lt;/p&gt;

&lt;p&gt;Each level unlocks and increases in difficulty and offers an almost infinite number of combos.&lt;/p&gt;

&lt;p&gt;Fans of casual puzzle games will enjoy the crisp, colorful graphics featuring cute animals and the compelling music offers great relaxation.&lt;/p&gt;</content><author><name></name></author><category term="News" /><category term="unity3d" /><category term="gamedev" /><category term="games" /><summary type="html">After 4 months of work, I am finally starting the open beta of Puzzimals: https://play.google.com/store/apps/details?id=br.com.diegogiacomelli.puzzimals</summary></entry><entry><title type="html">unitytips&amp;amp;colon; SettingsProvider</title><link href="http://diegogiacomelli.com.br/unitytips-settings-provider/" rel="alternate" type="text/html" title="unitytips&amp;amp;colon; SettingsProvider" /><published>2020-07-21T00:00:00-03:00</published><updated>2020-07-21T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-settings-provider</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-settings-provider/">&lt;p&gt;You can add a custom section to &lt;a href=&quot;https://docs.unity3d.com/Manual/comp-ManagerGroup.html&quot;&gt;Project Settings&lt;/a&gt; window that allows you to configure some global settings for your project using a &lt;a href=&quot;https://docs.unity3d.com/2018.3/Documentation/ScriptReference/SettingsProvider.html&quot;&gt;SettingsProvider&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/07/21/unitytips-settings-provider/settings-provider.jpg &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/623de59997fa6f2aaeeb231a2a789933.js?file=FrameworkSettings.cs&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/623de59997fa6f2aaeeb231a2a789933.js?file=FrameworkSettingsRegister.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;</content><author><name></name></author><category term="Lab" /><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><category term="custom-editor" /><summary type="html">You can add a custom section to Project Settings window that allows you to configure some global settings for your project using a SettingsProvider</summary></entry><entry><title type="html">unitytips&amp;amp;colon; HelpBox Attribute (with docs button)</title><link href="http://diegogiacomelli.com.br/unitytips-helpbox-attribute/" rel="alternate" type="text/html" title="unitytips&amp;amp;colon; HelpBox Attribute (with docs button)" /><published>2020-07-14T00:00:00-03:00</published><updated>2020-07-14T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-helpbox-attribute</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-helpbox-attribute/">&lt;p&gt;You can create a &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/PropertyAttribute.html&quot;&gt;PropertyAttribute&lt;/a&gt; to display a help box on inspector showing a few lines of information, like &lt;a href=&quot;https://docs.unity3d.com/2020.1/Documentation/ScriptReference/EditorGUI.HelpBox.html&quot;&gt;EditorGUI.HelpBox&lt;/a&gt;, but with a &lt;code class=&quot;highlighter-rouge&quot;&gt;docs&lt;/code&gt; button to the documentation page.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/07/14/unitytips-helpbox-attribute/sample-component.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/be4850e86a0aacd3de4266830566b139.js?file=HelpBoxAttribute.cs&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/be4850e86a0aacd3de4266830566b139.js?file=HelpBoxDrawer.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/be4850e86a0aacd3de4266830566b139.js?file=SampleComponent.cs&quot;&gt; &lt;/script&gt;</content><author><name></name></author><category term="Lab" /><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><category term="custom-editor" /><summary type="html">You can create a PropertyAttribute to display a help box on inspector showing a few lines of information, like EditorGUI.HelpBox, but with a docs button to the documentation page.</summary></entry><entry><title type="html">unitytips&amp;amp;colon; Social Share</title><link href="http://diegogiacomelli.com.br/unitytips-social-share/" rel="alternate" type="text/html" title="unitytips&amp;amp;colon; Social Share" /><published>2020-07-07T00:00:00-03:00</published><updated>2020-07-07T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-social-share</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-social-share/">&lt;p&gt;Using &lt;a href=&quot;https://github.com/yasirkula&quot;&gt;Süleyman Yasir KULA&lt;/a&gt; &lt;a href=&quot;https://github.com/yasirkula/UnityNativeShare&quot;&gt;Unity Native Share Plugin&lt;/a&gt; you can easily add native share to your Android/iOS games.&lt;/p&gt;

&lt;p&gt;I made the gist below that uses the plugin to add a social share component to any game object.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/07/07/unitytips-social-share/component.jpg &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/c03ec79fa0f0def94726f4b6914b4769.js?file=SocialShare.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;</content><author><name></name></author><category term="Lab" /><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><summary type="html">Using Süleyman Yasir KULA Unity Native Share Plugin you can easily add native share to your Android/iOS games.</summary></entry><entry><title type="html">unitytips&amp;amp;colon; Dynamic Log</title><link href="http://diegogiacomelli.com.br/unitytips-dynamic-log/" rel="alternate" type="text/html" title="unitytips&amp;amp;colon; Dynamic Log" /><published>2020-06-30T00:00:00-03:00</published><updated>2020-06-30T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-dynamic-log</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-dynamic-log/">&lt;p&gt;You can create a simple logging component to record logs from any UnityEvent and configure them directly in the editor:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/HHcZeWjV7vY &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/bba329d772f4fb7c8e6c9a1d3047bae2.js?file=DynamicLog.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;</content><author><name></name></author><category term="Lab" /><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><category term="logging" /><summary type="html">You can create a simple logging component to record logs from any UnityEvent and configure them directly in the editor:</summary></entry><entry><title type="html">unitytips&amp;amp;colon; Using ScriptableObject and EditorApplication.isPlaying to refresh the game view</title><link href="http://diegogiacomelli.com.br/unitytips-using-scriptableobject-and-editorapplication-isplaying-to-refresh-the-game-view/" rel="alternate" type="text/html" title="unitytips&amp;amp;colon; Using ScriptableObject and EditorApplication.isPlaying to refresh the game view" /><published>2020-04-28T00:00:00-03:00</published><updated>2020-04-28T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-using-scriptableobject-and-editorapplication-isplaying-to-refresh-the-game-view</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-using-scriptableobject-and-editorapplication-isplaying-to-refresh-the-game-view/">&lt;p&gt;You can use &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/EditorApplication-isPlaying.html&quot;&gt;EditorApplication.isPlaying&lt;/a&gt; in your custom editor to update the game view when a &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/ScriptableObject.html&quot;&gt;ScriptableObject&lt;/a&gt; is updated and you need to restart the scene or do something more complex to see the result of ScriptableObject changed during the game’s playing in the editor.&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/oM5-RJU6g2I &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;</content><author><name></name></author><category term="Lab" /><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><category term="custom-editor" /><summary type="html">You can use EditorApplication.isPlaying in your custom editor to update the game view when a ScriptableObject is updated and you need to restart the scene or do something more complex to see the result of ScriptableObject changed during the game’s playing in the editor.</summary></entry><entry><title type="html">unitytips&amp;amp;colon; TimeSpan Box Drawer</title><link href="http://diegogiacomelli.com.br/unitytips-timespan-box-drawer/" rel="alternate" type="text/html" title="unitytips&amp;amp;colon; TimeSpan Box Drawer" /><published>2020-04-21T00:00:00-03:00</published><updated>2020-04-21T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-timespan-box-drawer</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-timespan-box-drawer/">&lt;p&gt;You can create a &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/PropertyDrawer.html&quot;&gt;PropertyDrawer&lt;/a&gt; to display a help box on inspector showing the time information in seconds fields using &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings&quot;&gt;TimeSpan format strings&lt;/a&gt;:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/21/unitytips-timespan-box-drawer/TimeSpanBox.gif &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/bb3b4bf52e560c3d673cd3d50f563cfb.js?file=TimeSpanBoxAttribute.cs&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/bb3b4bf52e560c3d673cd3d50f563cfb.js?file=TimeSpanBoxDrawer.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/bb3b4bf52e560c3d673cd3d50f563cfb.js?file=TimeSpanBoxDrawerUsage.cs&quot;&gt; &lt;/script&gt;</content><author><name></name></author><category term="Lab" /><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><category term="property-drawer" /><summary type="html">You can create a PropertyDrawer to display a help box on inspector showing the time information in seconds fields using TimeSpan format strings:</summary></entry><entry><title type="html">Google Play Games Plugin for Unity&amp;amp;colon; Tips &amp;amp; Tricks</title><link href="http://diegogiacomelli.com.br/google-play-games-plugin-for-unity-tips-and-tricks/" rel="alternate" type="text/html" title="Google Play Games Plugin for Unity&amp;amp;colon; Tips &amp;amp; Tricks" /><published>2020-04-18T00:00:00-03:00</published><updated>2020-04-18T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/google-play-games-plugin-for-unity-tips-and-tricks</id><content type="html" xml:base="http://diegogiacomelli.com.br/google-play-games-plugin-for-unity-tips-and-tricks/">&lt;p&gt;In this post I will list some tips and tricks that I learned while using the &lt;a href=&quot;https://github.com/playgameservices/play-games-plugin-for-unity&quot;&gt;Google Play Games Plugin for Unity&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The Unity3D has a code interface for questions regarding social features in games, these interfaces are called &lt;a href=&quot;https://docs.unity3d.com/Manual/net-SocialAPI.html&quot;&gt;Social API&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It provides a unified interface to different social back-ends, such as GameCenter, and is meant to be used primarily by programmers on the game project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you use it on a real platform, you will need to use some plugin that implement those interfaces, in the case of Android this job is done by the &lt;a href=&quot;https://github.com/playgameservices/play-games-plugin-for-unity&quot;&gt;Google Play Games Plugin for Unity&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configuring-the-game-on-google-play-console&quot;&gt;Configuring the game on Google Play Console&lt;/h2&gt;
&lt;p&gt;First of all you need to create the game on &lt;a href=&quot;https://play.google.com/publish&quot;&gt;Google Play Console&lt;/a&gt; as any other game and make an app release (an &lt;code class=&quot;highlighter-rouge&quot;&gt;Internal test track&lt;/code&gt; already works).&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/app-release.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Then go to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Services &amp;amp; APIS&lt;/code&gt; menu, after enter on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Google Play game services&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/services-and-apis.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Fill only the required information for test, then go to menu &lt;code class=&quot;highlighter-rouge&quot;&gt;Linked apps&lt;/code&gt; and link it to your game on with the app on Google Play Console.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/linked-apps.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-some-achievements-for-test&quot;&gt;Creating some achievements for test&lt;/h2&gt;
&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Game services section&lt;/code&gt; open the &lt;code class=&quot;highlighter-rouge&quot;&gt;Achievements&lt;/code&gt; menu and add some achievements.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/achievements.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I found empirically that test achievements that did not have an icon set on the Google Play Console did not show the standard Google Play Games UI when unlocked and were automatically locked again about 1 hour after they were unlocked.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;installing-the-plugin&quot;&gt;Installing the plugin&lt;/h2&gt;
&lt;p&gt;To install the &lt;code class=&quot;highlighter-rouge&quot;&gt;Google Play Games Plugin for Unity&lt;/code&gt;, you should follow the steps in &lt;a href=&quot;https://github.com/playgameservices/play-games-plugin-for-unity#plugin-installation&quot;&gt;Plugin Installation&lt;/a&gt; and &lt;a href=&quot;https://github.com/playgameservices/play-games-plugin-for-unity#android-setup&quot;&gt;Android Setup&lt;/a&gt; sections.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/android-setup.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;oauth-and-upload-certificate&quot;&gt;OAuth and Upload Certificate&lt;/h2&gt;
&lt;p&gt;One thing can be a little confusing is about the certificate fingerprints.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://play.google.com/publish&quot;&gt;Google Play Console&lt;/a&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;App Signing&lt;/code&gt;section and use the option &lt;code class=&quot;highlighter-rouge&quot;&gt;App Signing by Google Play&lt;/code&gt;&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/app-signing.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now you need to copy your &lt;code class=&quot;highlighter-rouge&quot;&gt;SHA-1&lt;/code&gt; fingerprint of your &lt;code class=&quot;highlighter-rouge&quot;&gt;Upload certificate&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;App signing&lt;/code&gt; section.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/upload-certificate.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Then go to your OAuth credentials on &lt;a href=&quot;https://console.developers.google.com/apis&quot;&gt;Google API console&lt;/a&gt;.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/google-api-console-credentials.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;the Google API console&lt;/code&gt;, select your game on the top dropdown, then go to &lt;code class=&quot;highlighter-rouge&quot;&gt;Credentials&lt;/code&gt; menu and edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;OAuth 2.0 Client IDs&lt;/code&gt;. Paste the fingertip on the field &lt;code class=&quot;highlighter-rouge&quot;&gt;SHA-1 certificate fingertip&lt;/code&gt; and save it.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/google-api-console-fingertip.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;remember to remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;SHA-1&lt;/code&gt; prefix, if you copied it together.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;testing-on-android&quot;&gt;Testing on Android&lt;/h2&gt;
&lt;p&gt;Now we have the basic setup done, we need to write some code to test it on an Android device:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/c8bff996de4473c201f010b17d42fd2b.js?file=AchievementsController.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Add the script above to a game object in the scene, build and run the game on a Android device.&lt;/p&gt;

&lt;p&gt;If everything was done correctly, you should see a screen like this:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/achievements-ui.png &quot; /&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/conclusion.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;With this basic setup you can start to use the other features from Google Play Games Plugin for Unity plugin, as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;unlock/reveal/increment achievement&lt;/li&gt;
  &lt;li&gt;post score to leaderboard&lt;/li&gt;
  &lt;li&gt;cloud save read/write&lt;/li&gt;
  &lt;li&gt;show built-in achievement/leaderboards UI&lt;/li&gt;
  &lt;li&gt;events&lt;/li&gt;
  &lt;li&gt;video recording of gameplay&lt;/li&gt;
  &lt;li&gt;nearby connections&lt;/li&gt;
  &lt;li&gt;turn-based multiplayer&lt;/li&gt;
  &lt;li&gt;real-time multiplayer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more about then on &lt;a href=&quot;https://github.com/playgameservices/play-games-plugin-for-unity&quot;&gt;plugin GitHub page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;extra-tips-and-tricks&quot;&gt;Extra tips and tricks&lt;/h2&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/extra-tips-tricks.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;Below a list of tips and tricks for non-common scenarios.&lt;/p&gt;

&lt;h3 id=&quot;log-on-device&quot;&gt;Log on device&lt;/h3&gt;
&lt;p&gt;If anything goes wrong on Android device you will need to see it logs, to do so, you can use adb logcat:&lt;/p&gt;

&lt;p&gt;On MacOS, this shell do the job:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/Caskroom/android-platform-tools/29.0.5/platform-tools/

./adb logcat &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; Unity PackageManager dalvikvm DEBUG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;If you are using a different version of Android Platform Tools you will need to change the &lt;code class=&quot;highlighter-rouge&quot;&gt;29.0.5&lt;/code&gt; version.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;assembly-definition&quot;&gt;Assembly definition&lt;/h3&gt;
&lt;p&gt;If your game is using &lt;a href=&quot;https://docs.unity3d.com/Manual/ScriptCompilationAssemblyDefinitionFiles.html&quot;&gt;Assembly Definition&lt;/a&gt; you will need this step.&lt;/p&gt;

&lt;p&gt;The plugin code come without any assembly definition, so to use in our code you will need to create two assembly definitions to the plugin:&lt;/p&gt;

&lt;p&gt;Go to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/GooglePlayGames&lt;/code&gt; folder and create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;Assembly Definition&lt;/code&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;GooglePlayGames&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/assembly-definition-runtime.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Go to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/GooglePlayGames/Editor&lt;/code&gt; folder and create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;Assembly Definition&lt;/code&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;GooglePlayGames.Editor&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2020/04/18/google-play-games-plugin-for-unity-tips-and-tricks/assembly-definition-editor.png &quot; /&gt;
      &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now, go to your game assembly definition and add a reference to the &lt;code class=&quot;highlighter-rouge&quot;&gt;GooglePlayGames&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;After this, if you receive some compilation error about &lt;code class=&quot;highlighter-rouge&quot;&gt;BasicApi.Nearby&lt;/code&gt; namespace, just close and open Unity again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;exception-class-not-found-comgoogleandroidgmsgamesgames&quot;&gt;Exception class not found com.google.android.gms.games.Games&lt;/h3&gt;
&lt;p&gt;If you see the the log message above on the adb logcat, you need to check on Unity &lt;code class=&quot;highlighter-rouge&quot;&gt;Player Settings / Publishing Settings&lt;/code&gt; if the minify settings are set up correctly as describe here: &lt;a href=&quot;https://github.com/playgameservices/play-games-plugin-for-unity/blob/master/README.md#play-games-services-proguard-configuration&quot;&gt;Play Games Services Proguard configuration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="Tutorial" /><category term="unity3d" /><category term="gamedev" /><category term="android" /><summary type="html">In this post I will list some tips and tricks that I learned while using the Google Play Games Plugin for Unity.</summary></entry><entry><title type="html">Azure Pipelines - Generating DB Script with SqlPackage.exe</title><link href="http://diegogiacomelli.com.br/azure-pipelines-generating-db-script/" rel="alternate" type="text/html" title="Azure Pipelines - Generating DB Script with SqlPackage.exe" /><published>2019-12-17T00:00:00-03:00</published><updated>2019-12-17T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/azure-pipelines-generating-db-script</id><content type="html" xml:base="http://diegogiacomelli.com.br/azure-pipelines-generating-db-script/">&lt;p&gt;Recently I needed to automate the generation of a database script deploy from a SQL Server Database Project on our Azure Pipelines continuous integration. Below I will describe the steps to achieve such thing.&lt;/p&gt;

&lt;h1 id=&quot;building-the-solution&quot;&gt;Building the solution&lt;/h1&gt;
&lt;p&gt;A SQL Server Database Project has a solution (.sln) as any other kind of Visual Studio projects and we need to build it to generate our &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/relational-databases/data-tier-applications/data-tier-applications?view=sql-server-ver15&quot;&gt;DACPAC&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A data-tier application (DAC) is a logical database management entity that defines all of the SQL Server objects - like tables, views, and instance objects, including logins - associated with a user’s database. A DAC is a self-contained unit of SQL Server database deployment that enables data-tier developers and database administrators to package SQL Server objects into a portable artifact called a DAC package, also known as a DACPAC&lt;/p&gt;
&lt;/blockquote&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/30d0b7c0a3e803cb71ce4b1680d2a584.js?file=solution-build.yml&quot;&gt; &lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;The variables used in the script portions are described in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Complete azure-pipelines.yml&lt;/code&gt; in the end of this post&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;generating-the-sql-script&quot;&gt;Generating the .sql script&lt;/h1&gt;
&lt;p&gt;With our .dacpac file built, now we need to generate our .sql database script. To perform this operation we need the &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/tools/sqlpackage?view=sql-server-ver15&quot;&gt;sqlpackage.exe&lt;/a&gt;, this command-line is available in some Azure Pipelines images, as &lt;code class=&quot;highlighter-rouge&quot;&gt;vs2017-win2016&lt;/code&gt;, so you need to use it on your &lt;code class=&quot;highlighter-rouge&quot;&gt;azure-pipelines.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/30d0b7c0a3e803cb71ce4b1680d2a584.js?file=image.yml&quot;&gt; &lt;/script&gt;

&lt;p&gt;Add the &lt;code class=&quot;highlighter-rouge&quot;&gt;CmdLine&lt;/code&gt; task below to generate the .sql database script:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/30d0b7c0a3e803cb71ce4b1680d2a584.js?file=db-script-generate.yml&quot;&gt; &lt;/script&gt;

&lt;h1 id=&quot;publishing-the-sql-script&quot;&gt;Publishing the .sql script&lt;/h1&gt;
&lt;p&gt;Now we need to publish the .sql file to the build artifacts:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/30d0b7c0a3e803cb71ce4b1680d2a584.js?file=db-script-publish.yml&quot;&gt; &lt;/script&gt;

&lt;h1 id=&quot;complete-azure-pipelinesyml&quot;&gt;Complete azure-pipelines.yml&lt;/h1&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/30d0b7c0a3e803cb71ce4b1680d2a584.js?file=azure-pipelines.yml&quot;&gt; &lt;/script&gt;

&lt;h1 id=&quot;extra-points&quot;&gt;Extra points&lt;/h1&gt;
&lt;p&gt;In the approach described above the .sql files is not automatically applied to the database, so someone need to download, check and apply the file manually against the target database. If you want to apply the database script automatically you can change &lt;code class=&quot;highlighter-rouge&quot;&gt;CmdLine&lt;/code&gt; task that generate the .sql file to update the target database using the &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/tools/sqlpackage?view=sql-server-ver15#publish-parameters-properties-and-sqlcmd-variables&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;action:publish&lt;/code&gt; option of sqlpackage.exe&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="Article" /><category term="dotnet" /><category term="azure" /><category term="azure-pipelines" /><category term="database" /><category term="continuous-integration" /><summary type="html">Recently I needed to automate the generation of a database script deploy from a SQL Server Database Project on our Azure Pipelines continuous integration. Below I will describe the steps to achieve such thing.</summary></entry></feed>