<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://diegogiacomelli.com.br/feed.xml" rel="self" type="application/atom+xml" /><link href="http://diegogiacomelli.com.br/" rel="alternate" type="text/html" /><updated>2019-06-03T21:15:23-03:00</updated><id>http://diegogiacomelli.com.br/feed.xml</id><title type="html">Diego Giacomelli</title><subtitle>programmer</subtitle><entry><title type="html">Unity and Game Development links (June 3th 2019)</title><link href="http://diegogiacomelli.com.br/unity-and-gamedev-links-june-3th-2019/" rel="alternate" type="text/html" title="Unity and Game Development links (June 3th 2019)" /><published>2019-06-03T00:00:00-03:00</published><updated>2019-06-03T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-and-gamedev-links-june-3th-2019</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-and-gamedev-links-june-3th-2019/">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Nick Davis&lt;/strong&gt; wrote a post about how Unity recently teamed up with Autodesk and Texel Logic to create a mixed-reality experience to illustrate and understand the complex nature of airflow passing over and around an IndyCar (&lt;a href=&quot;https://blogs.unity3d.com/2019/05/24/simulating-high-speed-indycars-in-ar/&quot;&gt;Simulating high-speed IndyCars in AR&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sykoo&lt;/strong&gt;, online evangelist for Unity, published a video showing his techniques during the level design process (&lt;a href=&quot;https://www.youtube.com/watch?v=oKzX-wS4_so&quot;&gt;How I made a Village in Unity in 1 Hour!&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Joyce[MinionsArt]&lt;/strong&gt; released another shader tutorial on Twitter (&lt;a href=&quot;https://twitter.com/minionsart/status/1132593681452683264&quot;&gt;Using particle lifetime to create a fire system&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Keen Claassen&lt;/strong&gt; celebrated the enter of &lt;code class=&quot;highlighter-rouge&quot;&gt;Motion Matching for Unity&lt;/code&gt; on Asset Store (&lt;a href=&quot;https://www.youtube.com/watch?v=hiWvExOyBgQ&quot;&gt;Motion Matching for Unity (MxM) - Trailer&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;can produce highly fluid and responsive animations with the need for state machines or complex logic.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Chandra Foxglove&lt;/strong&gt; introduced the Terrain Tools package (preview) for Unity 2019.1 (&lt;a href=&quot;https://blogs.unity3d.com/2019/05/28/speed-up-your-work-with-the-new-terrain-tools-package&quot;&gt;Speed up your work with the new Terrain Tools Package&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;This package contains over 15 new sculpting tools, as well as a utility toolbox to streamline terrain workflow.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Making of The Heretic: Digital Humans and VFX Characters&lt;/strong&gt; is available through a &lt;a href=&quot;https://docs.google.com/presentation/d/1aiBXsNu-D9ZfpBNqcs08w7ToNJ2e7jgyoyfNUXSCWW8/edit#slide=id.g552bb7139f_6_1117&quot;&gt;Google Docs presentation&lt;/a&gt;.
    &lt;blockquote&gt;
      &lt;p&gt;Now the HD Render Pipeline and Post Processing are quite solid, and we were able to put much more effort into building on top of that foundation. Among other things, we put some effort into human faces and vfx-heavy characters.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The evangelist &lt;strong&gt;Keijiro Takahashi&lt;/strong&gt; released a GitHub repository with an example that shows how to connect RealSense depth camera to Unity VFX Graph (&lt;a href=&quot;https://github.com/keijiro/Rsvfx&quot;&gt;Rsvfx&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Martin Best&lt;/strong&gt; posted about the official Unity Editor for Linux (&lt;a href=&quot;&quot;&gt;Announcing the Unity Editor for Linux&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;We expect it to be fully supported by Unity 2019.3.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Anis Benyoub&lt;/strong&gt; wrote about &lt;a href=&quot;https://auzaiffe.files.wordpress.com/2019/05/digital-dragons-leveraging-ray-tracing-hardware-acceleration-in-unity.pdf&quot;&gt;Leveraging Ray Tracing
Hardware Acceleration
In Unity&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Elena Nizhnik&lt;/strong&gt; made a post listing the most outstanding #madewithunity projects from last days (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/01/community-component-soft-body-physics-shaders-that-deform-space-normans-island-and-our-steam-wishlist&quot;&gt;Community Component – Soft body physics, shaders that deform space, Norman’s Island and our Steam wishlist&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; again, now with a video tutorial about the new 2D lights in Unity  2019.2 (&lt;a href=&quot;https://www.youtube.com/watch?v=ZJvCphxCGJU&quot;&gt;NEW 2D LIGHTS IN UNITY 2019.2&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="unity3d" /><category term="gamedev" /><summary type="html">Nick Davis wrote a post about how Unity recently teamed up with Autodesk and Texel Logic to create a mixed-reality experience to illustrate and understand the complex nature of airflow passing over and around an IndyCar (Simulating high-speed IndyCars in AR).</summary></entry><entry><title type="html">Using an AssetPostprocessor + EditorWindow to keep assets organized on Unity projects</title><link href="http://diegogiacomelli.com.br/using-an-assetpostprocessor-editorwindow-to-keep-assets-organized-on-unity-projects/" rel="alternate" type="text/html" title="Using an AssetPostprocessor + EditorWindow to keep assets organized on Unity projects" /><published>2019-05-31T00:00:00-03:00</published><updated>2019-05-31T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/using-an-assetpostprocessor-editorwindow-to-keep-assets-organized-on-unity-projects</id><content type="html" xml:base="http://diegogiacomelli.com.br/using-an-assetpostprocessor-editorwindow-to-keep-assets-organized-on-unity-projects/">&lt;p&gt;I created an AssetPostProcessor and an EditorWindow to validate if assets are in the right folder and help the Unity projects to keep organized.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;There are many ways to structure folders in a Unity project, but most common ones are cited by the Unity Learn tutorial: &lt;a href=&quot;https://unity3d.com/pt/learn/tutorials/topics/tips/large-project-organisation&quot;&gt;Large Project Organisation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To keep the project easy to navigate, avoid placing files in the root Assets folder. Use subfolders. How you organize those subfolders is generally decided by your projects but the two main ways to do it are:&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;A folder for each type of asset and subfolders in them per objects&lt;/strong&gt;, zones (For example Assets/Materials, Assets/Prefabs, with subfolders Assets/Material/Level1 or Assets/Prefabs/Enemies)&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;A folder per objects or zones&lt;/strong&gt; (Such as Assets/Level1/Enemies/Archer, Assets/Shared/UI, Assets/Forest/Trees) with all assets related to those in the folders (Assets/Forest/Trees/BigTree.fbx, Assets/Forest/Trees/Tree.mat, Assets/Forest/Trees/Tree_Bark.jpg).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With big teams or even with the small ones is easy that some assets will be placed in wrong folders. To help to identify and keep those projects folders organized I coded a couple of editor scripts that I called &lt;code class=&quot;highlighter-rouge&quot;&gt;Folder organizer&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Another advantage of keeping assets organized in their proper folders is that you can &lt;a href=&quot;https://docs.unity3d.com/Manual/DefaultPresetsByFolder.html&quot;&gt;apply defaults presets to assets by folder&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;
&lt;p&gt;To setup the &lt;code class=&quot;highlighter-rouge&quot;&gt;Folder organizer&lt;/code&gt; just download this &lt;a href=&quot;https://gist.github.com/giacomelli/2d561e29beadab641a4f8b56954f53f7&quot;&gt;gist&lt;/a&gt; and unzip it on an &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder inside your Unity project.&lt;/p&gt;

&lt;h2 id=&quot;using&quot;&gt;Using&lt;/h2&gt;
&lt;p&gt;You can open the window through the menu &lt;code class=&quot;highlighter-rouge&quot;&gt;Window / Folder organizer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Just configure the folders to ignore, if should run the validation every time an asset is imported and defined a regular expression to find the assets and what is the expected folder.&lt;/p&gt;

&lt;p&gt;In the video below you can see in more details how to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Folder organizer&lt;/code&gt; to validate if your assets are in the right folders:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/GU6jWl6MpdM &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;</content><author><name></name></author><category term="unity3d" /><category term="editor-window" /><category term="asset-post-processor" /><category term="gamedev" /><category term="open-source" /><summary type="html">I created an AssetPostProcessor and an EditorWindow to validate if assets are in the right folder and help the Unity projects to keep organized.</summary></entry><entry><title type="html">Coding an EditorWindow to create default animations from sprites</title><link href="http://diegogiacomelli.com.br/coding-an-editorwindow-to-create-default-animations-from-sprites/" rel="alternate" type="text/html" title="Coding an EditorWindow to create default animations from sprites" /><published>2019-05-30T00:00:00-03:00</published><updated>2019-05-30T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/coding-an-editorwindow-to-create-default-animations-from-sprites</id><content type="html" xml:base="http://diegogiacomelli.com.br/coding-an-editorwindow-to-create-default-animations-from-sprites/">&lt;p&gt;In this tutorial, we will learn how to coding an &lt;a href=&quot;https://docs.unity3d.com/Manual/editor-EditorWindows.html&quot;&gt;EditorWindow&lt;/a&gt; that creates &lt;a href=&quot;https://docs.unity3d.com/Manual/AnimationClips.html&quot;&gt;Animation Clips&lt;/a&gt; and &lt;a href=&quot;https://docs.unity3d.com/Manual/AnimatorOverrideController.html&quot;&gt;Animator Override Controller&lt;/a&gt; from &lt;a href=&quot;https://docs.unity3d.com/Manual/Sprites.html&quot;&gt;Sprites&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Create animation clips from sprites is quite a simple operation to perform on Unity:&lt;/p&gt;
&lt;center&gt;&lt;video width=&quot;640&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot;&gt;
          &lt;source src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/create-animation-clip-from-sprite.mp4 &quot; type=&quot;video/mp4&quot; /&gt;
          Your browser does not support the video tag.
       &lt;/video&gt;&lt;/center&gt;

&lt;p&gt;But in many cases, you need to repeat this operation over and over again to create other animations to the same character, like clips for idle, walk up, walk down and walk horizontal animations.&lt;/p&gt;

&lt;p&gt;When you need to this for only one character, there is no problem, but imagine you need to create the same 4 animation clip for dozens (maybe hundreds) of characters. Besides being a boring operation, you probably will make some mistake and creating some wrong clip. In cases like that, could be a good option to create your own EditorWindow to automate those operations.&lt;/p&gt;

&lt;h2 id=&quot;editorwindow&quot;&gt;EditorWindow&lt;/h2&gt;
&lt;p&gt;To start, let’s see what Unity Manual says about &lt;a href=&quot;https://docs.unity3d.com/Manual/editor-EditorWindows.html&quot;&gt;EditorWindow&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can create any number of custom windows in your app. These behave just like the Inspector, Scene or any other built-in ones. This is a great way to add a user interface to a sub-system for your game.&lt;/p&gt;

  &lt;p&gt;Making a custom Editor Window involves the following simple steps:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Create a script that derives from EditorWindow.&lt;/li&gt;
    &lt;li&gt;Use code to trigger the window to display itself.&lt;/li&gt;
    &lt;li&gt;Implement the GUI code for your tool.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;During this tutorial we will create a class called DefaultAnimationsEditorWindow that derives from EditorWindow, we will add a menu item to Unity Editor to allow call our EditorWindow and we will implement the GUI for the window.&lt;/p&gt;

&lt;p&gt;Furthermore, we will implement the code that allows us to create Animation Clips and Animation Override Controller from sprites.&lt;/p&gt;

&lt;p&gt;The idea behind DefaultAnimationsEditorWindow is that when you have a bunch o characters using the same kind of animations, they used the same structure of sprite sheets, so you can create the animations based on the sprites indexes on sprite sheet texture.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/similar-spritesheets.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;similar sprites sheets from Phantasy Star IV (Alys, Chaz and Demi). Sprites ripped by Ultimecia from &lt;a href=&quot;https://www.spriters-resource.com/genesis_32x_scd/ps4&quot;&gt;The Spriters Resource&lt;/a&gt;&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Starting with sprite to walk down and ending with the last sprite of walk horizontal, we have 9 sprites and in all sprite sheets the sprites indexes are the same:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/alys-walking-spritesheet.png &quot; /&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;Idle: index 1&lt;/li&gt;
  &lt;li&gt;Walk down: indexes 0, 1 and 2.&lt;/li&gt;
  &lt;li&gt;Walk up: indexes 3, 4 and 5.&lt;/li&gt;
  &lt;li&gt;Walk horizontal: indexes 6, 7 and 9.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;starter-project&quot;&gt;Starter project&lt;/h2&gt;
&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/project.png&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;All the source code and assets for this tutorial are available on this GitHub repository: &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites&quot;&gt;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites&lt;/a&gt;. To start the tutorial you need to fork, clone or download the repository.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;default-animations-editor-window-starter&lt;/code&gt; on Unity.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;This starter project has an initial setup and assets to allow us to focus on the learning about how to code the EditorWindow.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Open the scene &lt;code class=&quot;highlighter-rouge&quot;&gt;_Tutorial/Scenes/TutorialScene&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Play&lt;/code&gt; button. You should see a screen like this:&lt;/p&gt;

&lt;center&gt;&lt;video width=&quot;640&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot;&gt;
          &lt;source src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/starter-project-play-mode.mp4 &quot; type=&quot;video/mp4&quot; /&gt;
          Your browser does not support the video tag.
       &lt;/video&gt;&lt;/center&gt;

&lt;h2 id=&quot;the-editor-window-code-organization&quot;&gt;The editor window code organization&lt;/h2&gt;

&lt;p&gt;We will organize our DefaultAnimationsEditorWindow in 3 main classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DefaultAnimationsEditorWindow&lt;/strong&gt;: where is the menu and GUI for our editor window.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DefaultAnimationsSettings&lt;/strong&gt;: this is our &lt;a href=&quot;https://docs.unity3d.com/Manual/class-ScriptableObject.html&quot;&gt;ScriptableObject&lt;/a&gt; to save our settings defined on DefaultAnimationsEditorWindow.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DefaultAnimationsUtility&lt;/strong&gt;: here we will implement the code used by our DefaultAnimationsEditorWindow to perform an operation. Put the operation code in a separated class not bounded by the GUI allow us to use these operations in any other script. This way to work is similar to what Unity itself use in some editor operations, like: &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/AnimationUtility.html&quot;&gt;AnimationUtility&lt;/a&gt;, &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/PrefabUtility.html&quot;&gt;PrefabUtility&lt;/a&gt; and &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Sprites.SpriteUtility.html&quot;&gt;SpriteUtility&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Besides the above classes, there are some other extension method classes on the folder &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites/tree/master/default-animations-editor-window-complete/Assets/_Tutorial/Editor/DefaultAnimations/Extensions&quot;&gt;Extensions&lt;/a&gt; that are self-explanatory and I won’t talk in details, but you can check them and read their code documentation to a better understanding.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;defaultanimationseditorwindow&quot;&gt;DefaultAnimationsEditorWindow&lt;/h2&gt;
&lt;p&gt;In the code bellow, we define the menu for the window through the method &lt;code class=&quot;highlighter-rouge&quot;&gt;ShowWindow&lt;/code&gt; and the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;MenuItem&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/menu-item.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;Default Animations menu item&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;At the &lt;code class=&quot;highlighter-rouge&quot;&gt;OnEnable&lt;/code&gt; we read the settings from our ScriptableObject DefaultAnimationsSettings.&lt;/p&gt;

&lt;p&gt;The next 3 methods just draw the components to the editor window GUI.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/editor-window-empty.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;editor window&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;Open &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites/blob/master/default-animations-editor-window-complete/Assets/_Tutorial/Editor/DefaultAnimations/DefaultAnimationsEditorWindow.cs &quot;&gt;DefaultAnimationsEditorWindow.cs &lt;/a&gt;hosted with ❤ by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;defaultanimationssettings&quot;&gt;DefaultAnimationsSettings&lt;/h2&gt;
&lt;p&gt;There are few things to talk about this class because it is just an ordinary ScriptableObject with a couple of properties that will be serialized and used by the DefaultAnimationsUtility class, a singleton to make easier to access the settings, two methods to load/create the asset and a subclass to sprite mappings.&lt;/p&gt;

&lt;p&gt;The most important code of this class is the property &lt;code class=&quot;highlighter-rouge&quot;&gt;SpriteIndexes&lt;/code&gt; that figure out what are the sprite indexes from the sprite sheet that ClipToOverride is using.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;SpriteIndexes will be used by DefaultAnimationsUtility.CreateAnimationClips to know what sprites should be used to create the new animations based on the DefaultAnimationsSettings.AnimationsMapping.&lt;/p&gt;
&lt;/div&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;Open &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites/blob/master/default-animations-editor-window-complete/Assets/_Tutorial/Editor/DefaultAnimations/DefaultAnimationsSettings.cs &quot;&gt;DefaultAnimationsSettings.cs &lt;/a&gt;hosted with ❤ by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;defaultanimationsutility&quot;&gt;DefaultAnimationsUtility&lt;/h2&gt;
&lt;p&gt;In this class is where the heart of our editor window resides.&lt;/p&gt;

&lt;p&gt;There are 2 important methods here: CreateAnimationClips and CreateAnimatorOverride.&lt;/p&gt;

&lt;h3 id=&quot;createanimationclips&quot;&gt;CreateAnimationClips&lt;/h3&gt;
&lt;p&gt;It iterates through the &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationsMappings&lt;/code&gt; defined in the editor window (saved on DefaultAnimationsSettings.AnimationsMapping), for each mapping it will call the method &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateAnimationClip&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateAnimationClip&lt;/code&gt; creates a new &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationClip&lt;/code&gt; (or load if already exists one with the same name), copying the frame rate and wrap mode from the &lt;code class=&quot;highlighter-rouge&quot;&gt;ClipToOverride&lt;/code&gt; defined in the mapping. After, if wrap mode is a loop, it uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationUtility&lt;/code&gt; to set the loop time to the clip settings (through the extension methods).&lt;/p&gt;

&lt;p&gt;Now is the most tricky part of this class, we need to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;EditorCurveBinding&lt;/code&gt; for the sprite and get the &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectReferenceKeyframe&lt;/code&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;ClipToOverride&lt;/code&gt; and create new &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectReferenceKeyframe&lt;/code&gt; to our new keyframes (&lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationClipExtensions&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;createanimatoroverride&quot;&gt;CreateAnimatorOverride&lt;/h2&gt;
&lt;p&gt;In this method we create &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimatorOverrideController&lt;/code&gt; that will override each clip from the &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultAnimationsSettings.AnimatorController&lt;/code&gt; by the ClipToOverride of each mapping defined on &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultAnimationsSettings.AnimationsMapping&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;AnimatorOverrideControllerExtensions&lt;/code&gt;).&lt;/p&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;Open &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites/blob/master/default-animations-editor-window-complete/Assets/_Tutorial/Editor/DefaultAnimations/DefaultAnimationsUtility.cs &quot;&gt;DefaultAnimationsUtility.cs &lt;/a&gt;hosted with ❤ by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Copy &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites/tree/master/default-animations-editor-window-complete/Assets/_Tutorial/Editor&quot;&gt;this whole Editor folder&lt;/a&gt; to your &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/_Tutorial&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;this folder is available on your local clone of the repository inside the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;default-animations-editor-window-complete/Assets/_Tutorial&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Delete the DefaultAnimationsSettings scriptable object instance.&lt;/p&gt;

&lt;p&gt;Open the editor window on menu &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows / Default Animations&lt;/code&gt; and configure it as showing in the video below:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/5Hk8awWCtSs &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;creating-and-using-the-default-animations&quot;&gt;Creating and using the default animations&lt;/h2&gt;
&lt;p&gt;Drag all the sprite sheets (textures) from folder &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/_Tutorial/Sprites&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Spritesheets&lt;/code&gt; field and click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Create animations&lt;/code&gt; button:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/49KKfR081Po &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;challenge&quot;&gt;Challenge&lt;/h2&gt;
&lt;p&gt;Try to change de editor window to allow more the one set of default animations. One way to this is by creating another ScriptableObject to save the current selected &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultAnimationsSettings&lt;/code&gt; asset.&lt;/p&gt;

&lt;p&gt;If you have any doubt how to implement any part of this challenge, feel free to ask on this post comments or &lt;a href=&quot;about&quot;&gt;send me a message&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites&quot;&gt;tutorial repository&lt;/a&gt; has two main folders:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;default-animations-editor-window-starter&lt;/strong&gt;: the one you used to make this tutorial.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;default-animations-editor-window-complete&lt;/strong&gt;: the whole solution with all scripts and assets implemented. Use this one, in case you get stuck in any item on the challenge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this tutorial, we learned how to coding a custom editor window to create a set of default animation clips and animator override controller.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt; and &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="unity3d" /><category term="editor-window" /><category term="animation-clip" /><category term="animator-override-controller" /><category term="gamedev" /><category term="open-source" /><summary type="html">In this tutorial, we will learn how to coding an EditorWindow that creates Animation Clips and Animator Override Controller from Sprites.</summary></entry><entry><title type="html">Publishing WebJobs with Azure Pipelines</title><link href="http://diegogiacomelli.com.br/publishing-webjobs-with-azure-pipelines/" rel="alternate" type="text/html" title="Publishing WebJobs with Azure Pipelines" /><published>2019-05-29T00:00:00-03:00</published><updated>2019-05-29T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/publishing-webjobs-with-azure-pipelines</id><content type="html" xml:base="http://diegogiacomelli.com.br/publishing-webjobs-with-azure-pipelines/">&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-US/azure/app-service/webjobs-sdk-get-started&quot;&gt;Azure WebJobs&lt;/a&gt; are a great way to execute background process.&lt;/p&gt;

&lt;h1 id=&quot;scenario&quot;&gt;Scenario&lt;/h1&gt;
&lt;p&gt;In last days I’ve created a &lt;a href=&quot;https://azure.microsoft.com/pt-br/services/devops/pipelines/&quot;&gt;Azure Pipelines&lt;/a&gt; that publish WebJobs, but in our specific case our WebJobs were not being published to &lt;code class=&quot;highlighter-rouge&quot;&gt;/site/wwwroot/App_Data/jobs/Continuous/&amp;lt;webjobs name&amp;gt;&lt;/code&gt;, because “reasons” our root web app is using ‘/site/www’ as folder. So, you should expect that the new folder to deploy WebJobs is &lt;code class=&quot;highlighter-rouge&quot;&gt;/site/www/App_Data/jobs/Continuous/&amp;lt;webjobs name&amp;gt;&lt;/code&gt;, but &lt;code class=&quot;highlighter-rouge&quot;&gt;NO&lt;/code&gt;, the new folder is &lt;code class=&quot;highlighter-rouge&quot;&gt;/site/jobs/Continuous/&amp;lt;webjobs name&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The big problem with the above behaviour is that &lt;code class=&quot;highlighter-rouge&quot;&gt;WebDeploy&lt;/code&gt; via VS or  &lt;code class=&quot;highlighter-rouge&quot;&gt;AzureRmWebAppDeployment&lt;/code&gt; task via Azure Pipeline will still try to deploy the webjobs to the folder inside &lt;code class=&quot;highlighter-rouge&quot;&gt;/site/www/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;My best suspects are these lines on &lt;a href=&quot;https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureRmWebAppDeploymentV3/azurermwebappdeployment.ts#L73&quot;&gt;AzureRmWebAppDeployment@3&lt;/a&gt;&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/1d47b7bf7e9a2b3806dbd0b0332743d2.js?file=AzureRmWebAppDeployment-lines.ts&quot;&gt; &lt;/script&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;AzureRmWebAppDeployment&lt;/code&gt; just check the physical path configured on Azure when we defined a &lt;code class=&quot;highlighter-rouge&quot;&gt;VirtualApplicatoin&lt;/code&gt; parameter, but in our case it is not a virtual application, but it is a different folder than &lt;code class=&quot;highlighter-rouge&quot;&gt;/site/wwwroot/&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;externalref&quot;&gt;&lt;p&gt;in &lt;a href=&quot;https://github.com/projectkudu/kudu/wiki/WebJobs&quot;&gt;Kudu wiki&lt;/a&gt; there is some explanation about the webjobs folders.&lt;/p&gt;
&lt;/div&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;
&lt;p&gt;I used the FtpUpload task to publish the WebJobs binaries to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/site/jobs/Continuous/&amp;lt;webjobs name&amp;gt;&lt;/code&gt; and two instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;AzureAppServiceManage&lt;/code&gt; task to stop and start the jobs:&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;you’ll need to replace the values between &amp;lt;..&amp;gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;variables&lt;/code&gt; section to specific values of your project&lt;/p&gt;
&lt;/div&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/1d47b7bf7e9a2b3806dbd0b0332743d2.js?file=azure-pipelines.yml&quot;&gt; &lt;/script&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;I omitted some tasks from the original azure-pipelines.yml for simplicity. The original has a lot of others taks, as unit tests and web api publishing&lt;/p&gt;
&lt;/div&gt;

&lt;h1 id=&quot;extra-points-graceful-shutdown&quot;&gt;Extra points (graceful shutdown)&lt;/h1&gt;
&lt;p&gt;Now that you’ve automate your WebJobs publishing, is a good idea improve your jobs to check if Azure has requested a shutdown. You can do this taks through the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-dotnet-class-library#cancellation-tokens&quot;&gt;CancellationToken&lt;/a&gt; parameter passed to the job.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A function can accept a CancellationToken parameter, which enables the operating system to notify your code when the function is about to be terminated. You can use this notification to make sure the function doesn’t terminate unexpectedly in a way that leaves data in an inconsistent state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;further-reading&quot;&gt;Further reading&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/ftp-upload?view=azure-devops&quot;&gt;FTP Upload task&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-app-service-manage?view=azure-devops&quot;&gt;Azure App Service Manage task&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.amitapple.com/post/2014/05/webjobs-graceful-shutdown&quot;&gt;WebJobs Graceful Shutdown&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&amp;amp;tabs=schema&quot;&gt;YAML schema reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&amp;amp;tabs=yaml&quot;&gt;Predefined variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="dotnet" /><category term="azure" /><category term="webjobs" /><category term="azure-pipelines" /><category term="continuous-integration" /><summary type="html">Azure WebJobs are a great way to execute background process.</summary></entry><entry><title type="html">A Sorting Layer Debugger for Unity</title><link href="http://diegogiacomelli.com.br/a-sorting-layer-debugger-for-unity/" rel="alternate" type="text/html" title="A Sorting Layer Debugger for Unity" /><published>2019-05-28T00:00:00-03:00</published><updated>2019-05-28T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/a-sorting-layer-debugger-for-unity</id><content type="html" xml:base="http://diegogiacomelli.com.br/a-sorting-layer-debugger-for-unity/">&lt;p&gt;While I was reading about &lt;a href=&quot;https://docs.unity3d.com/Manual/2DSorting.html&quot;&gt;2D Sorting&lt;/a&gt; and &lt;a href=&quot;https://docs.unity3d.com/Manual/class-TagManager.html#SortingLayers&quot;&gt;Sorting Layers&lt;/a&gt; on Unity Manual I came up with the idea of creating a custom editor window to see which sorting layer the sprites on the scene are using.&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/e_WaZrGMPdM &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;In the video above you can see the Sorting Layer Debugger been used in the &lt;a href=&quot;https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-platformer-11228&quot;&gt;Unity 2D Platformer&lt;/a&gt; sample project&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Just download the gist bellow to your Unity3D project and add it inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/141742c3175476f03ca2437c7b35fd88.js?file=SortingLayerDebugger.cs&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;You can open the debugger window through the menu &lt;code class=&quot;highlighter-rouge&quot;&gt;Window / Sorting Layer Debugger&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The debugger can be enabled in the edit or the play mode and it will list the Sorting Layers and the number of game objects using each layer. You can hide/show the game objects of each layer by clicking on its check box.&lt;/p&gt;

&lt;p&gt;The name of Sorting Layer been used is showing in the top of each game object in the scene view.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/28/a-sorting-layer-debugger-for-unity/SortingLayerDebugger.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;Scene view with Sorting Layer Debugger enabled&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="unity3d" /><category term="unitytips" /><category term="sorting-layers" /><category term="2D" /><category term="editor-window" /><category term="gamedev" /><category term="open-source" /><summary type="html">While I was reading about 2D Sorting and Sorting Layers on Unity Manual I came up with the idea of creating a custom editor window to see which sorting layer the sprites on the scene are using.</summary></entry><entry><title type="html">Unity and Game Development links (May 24th 2019)</title><link href="http://diegogiacomelli.com.br/unity-and-gamedev-links-may-24th-2019/" rel="alternate" type="text/html" title="Unity and Game Development links (May 24th 2019)" /><published>2019-05-24T00:00:00-03:00</published><updated>2019-05-24T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-and-gamedev-links-may-24th-2019</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-and-gamedev-links-may-24th-2019/">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Kristin Stock&lt;/strong&gt; posted a video about how she is &lt;a href=&quot;https://www.youtube.com/watch?v=zBDrH3lg4YY&quot;&gt;procedurally generating cities using Subdivsion in Unity&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dave Hunt and Yang-Hai Eakes&lt;/strong&gt; made an &lt;a href=&quot;https://blogs.unity3d.com/2019/05/14/introducing-the-animation-rigging-preview-package-for-unity-2019-1/&quot;&gt;introduction for the Animation Rigging preview package for Unity 2019.1&lt;/a&gt;.
    &lt;blockquote&gt;
      &lt;p&gt;Set up procedural motion on animated skeletons at runtime. You can use a set of predefined animation constraints to manually build a control rig hierarchy for a character or develop your own custom constraints in C#.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Alexander Ameye&lt;/strong&gt; launched a &lt;a href=&quot;https://alexanderameye.github.io/&quot;&gt;site with many Unity tutorials&lt;/a&gt;, like &lt;code class=&quot;highlighter-rouge&quot;&gt;Water 1: Tessellated Plane&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Toon Shading&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Shahriar Shahrabi&lt;/strong&gt; made a post showing how use &lt;a href=&quot;https://medium.com/realities-io/making-the-inception-effect-in-unity-3d-with-few-lines-of-code-fb9667d4786f&quot;&gt;deformation matrices to achieve the &lt;code class=&quot;highlighter-rouge&quot;&gt;Inception effect&lt;/code&gt;&lt;/a&gt;.
    &lt;blockquote&gt;
      &lt;p&gt;Have you ever wondered how your brain would react if you bend the space around you in VR? Or change the field of view and do a vertigo? Well I did, so I started writing a series of shaders which deformed the space around me, using matrices and ended up with an Inception looking effect.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Steve Cavanagh and Lyndon Homewood&lt;/strong&gt; wrote a post about the &lt;a href=&quot;https://blogs.unity3d.com/2019/05/13/introducing-the-profile-analyzer/&quot;&gt;Unity Profile Analyzer (preview)&lt;/a&gt;.
    &lt;blockquote&gt;
      &lt;p&gt;Have you ever needed to compare the difference in performance between two versions of your project? See the impact of an asset or code change, optimization work, settings change or Unity version upgrade?&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Unity 2019.2 beta&lt;/strong&gt; released an &lt;a href=&quot;https://forum.unity.com/threads/experimental-2d-renderer-in-lwrp.683623&quot;&gt;experimental 2D Renderer in LWRP&lt;/a&gt; with 2D lights, Lit and Unlit Sprite Masternode in Shader Graph, and Pixel Perfect Camera.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Julien Blais&lt;/strong&gt; wrote a post about &lt;a href=&quot;https://blogs.unity3d.com/2019/05/21/how-to-use-timeline-signals&quot;&gt;new feature Signals&lt;/a&gt; added to Timeline in Unity 2019.1.
    &lt;blockquote&gt;
      &lt;p&gt;We’ve built Signals to establish a communication channel between Timeline and outside systems. But what does that mean? Why did we decide on this approach?&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="unity3d" /><category term="gamedev" /><summary type="html">Kristin Stock posted a video about how she is procedurally generating cities using Subdivsion in Unity.</summary></entry><entry><title type="html">Unity Avatar Mask and Animation Layers</title><link href="http://diegogiacomelli.com.br/unity-avatar-mask-and-animation-layers/" rel="alternate" type="text/html" title="Unity Avatar Mask and Animation Layers" /><published>2019-05-21T00:00:00-03:00</published><updated>2019-05-21T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-avatar-mask-and-animation-layers</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-avatar-mask-and-animation-layers/">&lt;p&gt;In this tutorial we will learn how to use &lt;a href=&quot;https://docs.unity3d.com/Manual/AnimationMaskOnImportedClips.html&quot;&gt;Avatar Mask&lt;/a&gt; and &lt;a href=&quot;https://docs.unity3d.com/Manual/AnimationLayers.html&quot;&gt;Animation Layers&lt;/a&gt; to combine multiple animations.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Imagine we imported an animated 3D model from Asset Store, in our sample, we will use the incredible robot from the free package &lt;a href=&quot;https://assetstore.unity.com/packages/3d/characters/humanoids/sci-fi-warrior-pbr-hp-106154&quot;&gt;Sci Fi Warrior PBR HP&lt;/a&gt; by &lt;a href=&quot;https://assetstore.unity.com/publishers/23554&quot;&gt;Dungeon Mason&lt;/a&gt;.
In this package, there are 10 animation clips:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/animation-clips.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;animation clips available on Sci Fi Warrior PBR HP&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;All those clips are animations for full body. So, when you play them:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Idle_GunMiddle&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/Idle_GunMiddle.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;the robot stands idle with the gun in the middle of his body&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WalkForward_Shoot&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/WalkForward_Shoot.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;the robot walk forward and shoot&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;externalref&quot;&gt;&lt;p&gt;You can see all the animations available on the Sci Fi Warrior PBR HP package in this video &lt;a href=&quot;https://www.youtube.com/watch?v=fNzBdYhm3Gk&quot;&gt;https://www.youtube.com/watch?v=fNzBdYhm3Gk&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;These are great animations, although if &lt;strong&gt;we want to make the robot stands idle, but instead of keeping the gun in the middle of his body, he aims the gun or shoot?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Or &lt;strong&gt;if we want that robot walk forward but holding the gun in the middle of his body?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Of course, we can ask to the artist to create all those animation combinations, but there is a smarter approach for this case…&lt;/p&gt;

&lt;h2 id=&quot;avatar-masks-and-animation-layers-goes-to-the-rescue&quot;&gt;Avatar Masks and Animation Layers goes to the rescue&lt;/h2&gt;
&lt;p&gt;To start, lets see what Unity Manual says about Avatar Masks and Animation Layers:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.unity3d.com/Manual/AnimationMaskOnImportedClips.html&quot;&gt;Avatar Masks&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Masking allows you to discard some of the animation data within a clip, &lt;strong&gt;allowing the clip to animate only parts of the object or character rather than the entire thing&lt;/strong&gt;. For example, if you had a character with a throwing animation. If you wanted to be able to &lt;strong&gt;use the throwing animation in conjunction with various other body movements such as running, crouching and jumping&lt;/strong&gt;, you could create a mask for the throwing animation limiting it to just the right arm, upper body and head. This portion of the animation can then be played in a layer over the top of the base running or jumping animations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.unity3d.com/Manual/AnimationLayers.html&quot;&gt;Animation Layers&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Unity uses Animation Layers for managing complex state machines for different body parts. An example of this is if you have a lower-body layer for walking-jumping, and an upper-body layer for throwing objects / shooting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By reading those two sections is quite clear that we need to use avatar masks and animation layers together to combine our animations of different body parts. So, in the next sections, I will demonstrate how to combine three animations (Idle_GunMiddle, WalkForward_Shoot, and Shoot_single) to make the robot shoot while stands idle and walk forward with a gun in middle body. After that, I will propose you a challenge for the other animations available.&lt;/p&gt;

&lt;h2 id=&quot;starter-project&quot;&gt;Starter project&lt;/h2&gt;
&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/project.png&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;All the source code and assets for this tutorial are available on this GitHub repository: &lt;a href=&quot;https://github.com/giacomelli/unity-avatar-mask-and-animation-layers&quot;&gt;https://github.com/giacomelli/unity-avatar-mask-and-animation-layers&lt;/a&gt;. To start this tutorial you need to fork, clone or download the repository.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/giacomelli/unity-avatar-mask-and-animation-layers.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;avatar-mask-starter&lt;/code&gt; on Unity.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;This starter project has an initial setup and assets to allow us to focus in the learning about Avatar Masks and Animations Layers.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Open the scene &lt;code class=&quot;highlighter-rouge&quot;&gt;_Tutorial/Scenes/TutorialScene&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;If you see a popup called &lt;code class=&quot;highlighter-rouge&quot;&gt;TMP importer&lt;/code&gt;, hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Import TPM Essentials&lt;/code&gt; button to import the TextMesh Pro’s assets.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Play&lt;/code&gt; button. You should see a screen like this:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/starter-project.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;Starter project running: just HUD&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-the-animation-controller&quot;&gt;Creating the Animation Controller&lt;/h2&gt;

&lt;p&gt;Create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;Animation Controller&lt;/code&gt; (menu &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/Create/Animation Controller&lt;/code&gt;) and open it:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/animator-window-empty.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;Animator window showing the animation controller created&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;All animation layers, nodes and transitions for this tutorial will be created inside this animation controller.&lt;/p&gt;

&lt;p&gt;In the hierarchy, select the SciFiWarriorHP and in the Animator component set the &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt; property to our Animation Controller.&lt;/p&gt;

&lt;h2 id=&quot;making-the-robot-walk-forward&quot;&gt;Making the robot walk forward&lt;/h2&gt;
&lt;p&gt;To get something running right now, we will make the robot walk forward when the button &lt;code class=&quot;highlighter-rouge&quot;&gt;WALK / FORWARD&lt;/code&gt; became checked.&lt;/p&gt;

&lt;p&gt;In the Animator opening with our Animation Controller drag the animation clip &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle_GunMiddle&lt;/code&gt; from folder &lt;code class=&quot;highlighter-rouge&quot;&gt;SciFiWarrior/Animations&lt;/code&gt;. Do the same with the clip &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward_Shoot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a &lt;a href=&quot;https://docs.unity3d.com/Manual/class-Transition.html&quot;&gt;transition&lt;/a&gt; (right click on the node and  &lt;code class=&quot;highlighter-rouge&quot;&gt;Make transition&lt;/code&gt;) from &lt;code class=&quot;highlighter-rouge&quot;&gt;Any state&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward_Shoot&lt;/code&gt; and create another transition from &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward_Shoot&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle_GunMiddle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we need to tell to the animation controller when it should activate the two transitions, for this we will create a bool &lt;a href=&quot;https://docs.unity3d.com/Manual/AnimationParameters.html&quot;&gt;animation parameter&lt;/a&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/animation-parameter.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;WalkForward parameter created&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We want to activate the transition from &lt;code class=&quot;highlighter-rouge&quot;&gt;Any state&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward_Shoot&lt;/code&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward&lt;/code&gt; is true, so select this transition (click on the arrow connecting the state &lt;code class=&quot;highlighter-rouge&quot;&gt;Any State&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward_Shoot&lt;/code&gt;) and in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Conditions&lt;/code&gt; list on inspector add the &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward&lt;/code&gt; equals &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/walk-forward-condition.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;WalkForward condition defined&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;code class=&quot;highlighter-rouge&quot;&gt;reset&lt;/code&gt; to auto fit the exit and transition time:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/reset-transition.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;reseting the transition settings&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Repeat the same steps as above for the transition from &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward_Shoot&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle_GunMiddle&lt;/code&gt;, but use &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; as the value for &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/animator-base-layer.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;animation base layer&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Play&lt;/code&gt; button to test the animation states. When you click on &lt;code class=&quot;highlighter-rouge&quot;&gt;WALK / FORWARD&lt;/code&gt; the robot starts to walk, when you click it again the robot stops to walk.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-upper-body-avatar-mask&quot;&gt;Creating the upper body avatar mask&lt;/h3&gt;
&lt;p&gt;The animation for walk forward works pretty well, the robot walks forward while it’s aiming the gun. This is the whole movement animated inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;WalkForward_Shoot&lt;/code&gt; clip.&lt;/p&gt;

&lt;p&gt;Now we want that robot walk forward without aiming the gun, instead of this, we want it keeps the gun in the middle as it does when &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle_GunMiddle&lt;/code&gt; is active. To get this done, first, we need to create an avatar mask to the upper body.&lt;/p&gt;

&lt;p&gt;Create a new Avatar Mask (&lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/Create/Avatar Mask&lt;/code&gt;) called &lt;code class=&quot;highlighter-rouge&quot;&gt;UpperBody&lt;/code&gt;. In the inspector, uncheck all lower body parties, as the image below:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/upper-body-avatar-mask.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;only upper body&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;creating-a-upper-body-animation-layer&quot;&gt;Creating a upper body animation layer&lt;/h3&gt;
&lt;p&gt;With the UpperBody Avatar Mask created, we will need to create a new animation layer that will use the mask. Go to the animator window and create a new layer using the &lt;code class=&quot;highlighter-rouge&quot;&gt;+ button&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/upperbody-animation-layer.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;the new layer created with the mask&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Change the &lt;code class=&quot;highlighter-rouge&quot;&gt;Weight&lt;/code&gt; property to 1 and set the Mask to the UpperBody Avatar Mask. Keep the &lt;code class=&quot;highlighter-rouge&quot;&gt;Blending&lt;/code&gt; as override.&lt;/p&gt;

&lt;p&gt;Drag the animation clip &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle_GunMiddle&lt;/code&gt; from folder &lt;code class=&quot;highlighter-rouge&quot;&gt;SciFiWarrior/Animations&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;UpperBody&lt;/code&gt; layer.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/upperbody-animation-layer-fsm.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;upper body animation layer&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;testing-the-animations&quot;&gt;Testing the animations&lt;/h4&gt;
&lt;p&gt;Hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Play&lt;/code&gt; button to test the animation states. When you click on &lt;code class=&quot;highlighter-rouge&quot;&gt;WALK / FORWARD&lt;/code&gt; the robot starts to walk, but now it’s not aiming the gun, instead it keeps the gun in the middle.&lt;/p&gt;

&lt;h4 id=&quot;why-does-this-happen&quot;&gt;Why does this happen?&lt;/h4&gt;
&lt;p&gt;So, this is done by the UpperBody Animation Layer that we added to our animation controller, as it’s mask was defined with our UpperBody Avatar Mask that only consider upper body parts of the humanoid, Unity overrides the base layer animation with the upper body part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle_GunMiddle&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;making-the-robot-shoot&quot;&gt;Making the robot shoot&lt;/h2&gt;
&lt;p&gt;We will make the robot shoot when the button &lt;code class=&quot;highlighter-rouge&quot;&gt;SHOOT / SINGLE&lt;/code&gt; became checked, this will help us to better understand how the Avatar Mask and Animation Layer works to override the animations from the base layer with the animations from UpperBody layer.&lt;/p&gt;

&lt;p&gt;In the Animator Window with our Animation Controller opened, select the UpperBody layer and drag the animation clip &lt;code class=&quot;highlighter-rouge&quot;&gt;Shoot_single&lt;/code&gt; from folder &lt;code class=&quot;highlighter-rouge&quot;&gt;SciFiWarrior/Animations&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a &lt;a href=&quot;https://docs.unity3d.com/Manual/class-Transition.html&quot;&gt;transition&lt;/a&gt; (right click on node and  &lt;code class=&quot;highlighter-rouge&quot;&gt;Make transition&lt;/code&gt;) from &lt;code class=&quot;highlighter-rouge&quot;&gt;Any state&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Shoot_single&lt;/code&gt; and create another transition from &lt;code class=&quot;highlighter-rouge&quot;&gt;Shoot_single&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle_GunMiddle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we need to tell to the animation controller when it should activate the two transitions, for this we will create a bool &lt;a href=&quot;https://docs.unity3d.com/Manual/AnimationParameters.html&quot;&gt;animation parameter&lt;/a&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;ShootSingle&lt;/code&gt;.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/shoot-single-parameter.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;ShootSingle parameter created&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We want to activate the transition from &lt;code class=&quot;highlighter-rouge&quot;&gt;Any state&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Shoot_single&lt;/code&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;ShootSingle&lt;/code&gt; is true, so select this transition (click on the arrow connecting the state &lt;code class=&quot;highlighter-rouge&quot;&gt;Any State&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Shoot_single&lt;/code&gt;) and in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Conditions&lt;/code&gt; list on inspector add the &lt;code class=&quot;highlighter-rouge&quot;&gt;ShootSingle&lt;/code&gt; equals  &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Click the &lt;code class=&quot;highlighter-rouge&quot;&gt;reset&lt;/code&gt; to auto fit the exit and transition time.&lt;/p&gt;

&lt;p&gt;Repeat the same steps as above for the transition from &lt;code class=&quot;highlighter-rouge&quot;&gt;ShootSingle&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle_GunMiddle&lt;/code&gt;, but use &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; as the value for &lt;code class=&quot;highlighter-rouge&quot;&gt;ShootSingle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Play&lt;/code&gt; button to test the animation states. When you click on &lt;code class=&quot;highlighter-rouge&quot;&gt;SHOOT / SINGLE&lt;/code&gt; the robot shoot.&lt;/p&gt;

&lt;p&gt;Now you can combine the two buttons &lt;code class=&quot;highlighter-rouge&quot;&gt;WALK / FORWARD&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SHOOT / SINGLE&lt;/code&gt; and see how the animations combine.&lt;/p&gt;

&lt;h2 id=&quot;challenge&quot;&gt;Challenge&lt;/h2&gt;
&lt;p&gt;Do something is better to learn than just reading and following someone instructions because this I will challenge you to try to implement other actions:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/21/unity-avatar-mask-and-animation-layers/challenge.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;the remaining actions to the challenge&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt; 	 	 
To implement these actions you need to do almost the same thing we did in this tutorial so far, just using another animation clips, transitions and parameters.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;The challenger items are the legs because you will need to create new Avatar Masks with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Transform&lt;/code&gt; option of the avatar configuration to get the right animation. New Animation Layers will be needed as well.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;If you have any doubt how to implement any part of this challenge, feel free to ask on this post comments or &lt;a href=&quot;about&quot;&gt;send me a message&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;The whole source code and assets for this tutorial are available on: &lt;a href=&quot;https://github.com/giacomelli/unity-avatar-mask-and-animation-layers&quot;&gt;https://github.com/giacomelli/unity-avatar-mask-and-animation-layers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository has two main folders:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;avatar-mask-starter&lt;/strong&gt;: the one you used to make this tutorial.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;avatar-mask-complete&lt;/strong&gt;: the whole solution with all actions implemented. Use this one, in case you get stuck in any item on the challenge.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The video below shows the complete solution running:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/sl9EheTbmhE &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this tutorial, we learn how to use Avatar Masks and Animation Layers to animate a robot with different masks and layers.
These techniques allowing us to use already existent animations and combine them.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt; and &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="unity3d" /><category term="gamedev" /><category term="animation" /><category term="avatar-mask" /><category term="animation-layers" /><category term="open-source" /><summary type="html">In this tutorial we will learn how to use Avatar Mask and Animation Layers to combine multiple animations.</summary></entry><entry><title type="html">dotnet new templates for GeneticSharp</title><link href="http://diegogiacomelli.com.br/dotnet-new-templates-for-GeneticSharp/" rel="alternate" type="text/html" title="dotnet new templates for GeneticSharp" /><published>2019-02-03T00:00:00-02:00</published><updated>2019-02-03T00:00:00-02:00</updated><id>http://diegogiacomelli.com.br/dotnet-new-templates-for-GeneticSharp</id><content type="html" xml:base="http://diegogiacomelli.com.br/dotnet-new-templates-for-GeneticSharp/">&lt;p&gt;Now GeneticSharp has a NuGet package called GeneticSharp.Templates, this package allows you to install GeneticSharp templates using the &lt;strong&gt;dotnet new&lt;/strong&gt; command.&lt;/p&gt;

&lt;h1 id=&quot;installing-the-geneticsharptemplates&quot;&gt;Installing the GeneticSharp.Templates&lt;/h1&gt;
&lt;p&gt;Before you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet new&lt;/code&gt; command to create the GeneticSharp projects from templates, you need to install it on your machine:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; GeneticSharp.Templates
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After this, if you run the command:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new GeneticSharp &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The GeneticSharp templates will be listed:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/02/03/dotnet-new-templates-for-GeneticSharp/dotnet-new-list-output.png &quot; /&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;creating-a-new-geneticsharp-project-from-templates&quot;&gt;Creating a new GeneticSharp project from templates&lt;/h1&gt;

&lt;h2 id=&quot;console-application&quot;&gt;Console Application&lt;/h2&gt;
&lt;p&gt;Create a new console application template with GeneticSharp where you just need to implement the chromosome and fitness function.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new GeneticSharpConsoleApp &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; MyNamespace &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; MyOutoputFolder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/02/03/dotnet-new-templates-for-GeneticSharp/consoleapp-project.png &quot; /&gt;
      &lt;/center&gt;

&lt;h3 id=&quot;tsp-console-application&quot;&gt;TSP Console application&lt;/h3&gt;
&lt;p&gt;Create a new console application template with GeneticSharp ready to run a Travelling Salesman Problem (TSP).&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new GeneticSharpTspConsoleApp &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; MyNamespace &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; MyOutoputFolder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/02/03/dotnet-new-templates-for-GeneticSharp/tspconsoleapp-project.png &quot; /&gt;
      &lt;/center&gt;

&lt;h3 id=&quot;tsp-unity3d&quot;&gt;TSP Unity3D&lt;/h3&gt;
&lt;p&gt;Create an Unity3D template with GeneticSharp ready to run a Travelling Salesman Problem (TSP).&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new GeneticSharpTspUnity3d &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; MyNamespace &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; MyOutoputFolder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/02/03/dotnet-new-templates-for-GeneticSharp/tspunity3d-project.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;Let’s evolve!&lt;/p&gt;</content><author><name></name></author><category term="geneticsharp" /><category term="dotnet" /><summary type="html">Now GeneticSharp has a NuGet package called GeneticSharp.Templates, this package allows you to install GeneticSharp templates using the dotnet new command.</summary></entry><entry><title type="html">GeneticSharp v2.4.0 - New crossovers and TPL implementations</title><link href="http://diegogiacomelli.com.br/GeneticSharp-v2.4.0-New-Crossovers-and-TPL-implementations/" rel="alternate" type="text/html" title="GeneticSharp v2.4.0 - New crossovers and TPL implementations" /><published>2019-01-19T00:00:00-02:00</published><updated>2019-01-19T00:00:00-02:00</updated><id>http://diegogiacomelli.com.br/GeneticSharp-v2.4.0-New-Crossovers-and-TPL-implementations</id><content type="html" xml:base="http://diegogiacomelli.com.br/GeneticSharp-v2.4.0-New-Crossovers-and-TPL-implementations/">&lt;p&gt;The &lt;strong&gt;&lt;a href=&quot;https://github.com/giacomelli/GeneticSharp&quot;&gt;GeneticSharp v2.4.0&lt;/a&gt;&lt;/strong&gt; is out.&lt;/p&gt;

&lt;p&gt;The additions of this version are the two new crossovers implementations and a new option of ITaskExecutor that use TPL.&lt;/p&gt;

&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/GeneticSharp.png&quot; /&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;crossovers&quot;&gt;Crossovers&lt;/h1&gt;
&lt;h3 id=&quot;alternating-position-ap&quot;&gt;Alternating-position (AP)&lt;/h3&gt;
&lt;p&gt;The alternating position crossover operator (Larrañaga et al. 1996a) simply creates an offspring by selecting alternately the next element of the first parent and the next element of the second parent, omitting the elements already present in the offspring.&lt;/p&gt;

&lt;h3 id=&quot;voting-recombination-crossover-vr&quot;&gt;Voting Recombination Crossover (VR)&lt;/h3&gt;
&lt;p&gt;It can be seen as a P-sexual crossover operator, where p (parents number) is a natural number greater than, or equal to, 2.&lt;/p&gt;

&lt;p&gt;It starts by defining a threshold, which is a natural number smaller than, or equal to p.&lt;/p&gt;

&lt;p&gt;Next, for every; i E {l, 2, . . .N} the set of ith elements of all the parents is considered. If in this set an element occurs at least the threshold number of times, it is copied into the offspring.&lt;/p&gt;

&lt;h1 id=&quot;tpl&quot;&gt;TPL&lt;/h1&gt;
&lt;p&gt;Three new classes were implemented to run some key points of genetic algorithm using TPL.&lt;/p&gt;

&lt;p&gt;Those new classes can be used alone, but normally you will use all them together. You can see a sample usage at unit test &lt;code class=&quot;highlighter-rouge&quot;&gt;Start_TplManyGenerations_Optimization&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;tpltaskexecutor&quot;&gt;TplTaskExecutor:&lt;/h3&gt;
&lt;p&gt;An ITaskExecutor’s implementation that executes the tasks in a parallel fashion using Task Parallel Library (TPL).&lt;/p&gt;

&lt;h3 id=&quot;tplpopulation&quot;&gt;TplPopulation&lt;/h3&gt;
&lt;p&gt;Represents a population of candidate solutions (chromosomes) using TPL to create them.&lt;/p&gt;

&lt;h3 id=&quot;tploperatorsstrategy&quot;&gt;TplOperatorsStrategy&lt;/h3&gt;
&lt;p&gt;A new interface called IOperatorsStrategy was added to GeneticAlgorithm as an option. Two options of operators strategy were created, the default one, called DefaultOperatorsStrategy and the new one called TplOperatosStrategy.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;thanks-to&quot;&gt;Thanks to&lt;/h1&gt;
&lt;p&gt;I would like to thanks to &lt;a href=&quot;https://github.com/EMostafaAli&quot;&gt;EMostafaAli&lt;/a&gt; and &lt;a href=&quot;https://github.com/InRedikaWB&quot;&gt;Alexey I.&lt;/a&gt; for opened some issues and made small pull requests and &lt;a href=&quot;https://github.com/codingdna2&quot;&gt;Dan&lt;/a&gt; for contributing with the &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/pull/56&quot;&gt;TPL implementations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s evolve!&lt;/p&gt;</content><author><name></name></author><category term="geneticsharp" /><category term="dotnet" /><category term="release" /><summary type="html">The GeneticSharp v2.4.0 is out.</summary></entry><entry><title type="html">jogosdaqui - um pouco de história, open source e colaboração (pt-BR)</title><link href="http://diegogiacomelli.com.br/jogosdaqui-um-pouco-de-historia-open-source-e-colaboracao/" rel="alternate" type="text/html" title="jogosdaqui - um pouco de história, open source e colaboração (pt-BR)" /><published>2018-11-21T00:00:00-02:00</published><updated>2018-11-21T00:00:00-02:00</updated><id>http://diegogiacomelli.com.br/jogosdaqui-um-pouco-de-historia-open-source-e-colaboracao</id><content type="html" xml:base="http://diegogiacomelli.com.br/jogosdaqui-um-pouco-de-historia-open-source-e-colaboracao/">&lt;p&gt;Muitos não sabem, mas além de programar, sempre gostei de ajudar a divulgar a indústria brasileira de desenvolvimento de jogos.&lt;/p&gt;

&lt;h1 id=&quot;criação-do-jogosdaqui&quot;&gt;Criação do jogosdaqui&lt;/h1&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/11/21/jogosdaqui-um-pouco-de-historia-open-source-e-colaboracao/jogosdaqui-site-php.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;Em 2005, junto com mais 3 amigos, foi fundado o site jogosdaqui, que era um site especializado em falar sobre os games desenvolvidos por empresas brasileiras.&lt;/p&gt;

&lt;p&gt;Esse site produziu muitos artigos, catalogando diversos games, desde o Aeroporto 83, considerado o primeiro game brazuca.&lt;/p&gt;

&lt;p&gt;Essa produção de artigos se manteve bastante ativa entre entre 2005 e 2007, mas em 2008 “fechamos as portas”, pois não conseguíamos mais atualizá-lo como merecia.&lt;/p&gt;

&lt;h1 id=&quot;conta-no-twitter&quot;&gt;Conta no Twitter&lt;/h1&gt;
&lt;p&gt;Em 2010, no meio da produção do game &lt;a href=&quot;http://skahal.github.io/press/kit/snb/index.html&quot;&gt;Ships N’ Battles&lt;/a&gt; da minha gamedev indie Skahal Studios, criei uma conta de Twitter para o &lt;a href=&quot;https://twitter.com/jogosdaqui&quot;&gt;jogosdaqui&lt;/a&gt;, para pelo menos conseguir ajudar um pouco na divulgação dos games nacionais.&lt;/p&gt;

&lt;p&gt;A conta ganhou alguma notoriedade quando fiz uma pergunta sobre o posicionamento dos candidatos a presidente em relação a indústria brasileira de jogos e o José Serra respondeu:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/11/21/jogosdaqui-um-pouco-de-historia-open-source-e-colaboracao/jogosdaqui-jose-serra-responde-tweet.png &quot; /&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;blog-no-uol-jogos&quot;&gt;Blog no UOL Jogos&lt;/h1&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/11/21/jogosdaqui-um-pouco-de-historia-open-source-e-colaboracao/jogosdaqui-blog-uol.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;Tempos depois fui convidado pelo Théo Azevedo do UOL Jogos para criar um blog do jogosdaqui no UOL.&lt;/p&gt;

&lt;p&gt;Esse blog durou entre o final de 2010 e o final de 2014.&lt;/p&gt;

&lt;p&gt;Durante esse tempo também produzi algumas entrevistas para a revista EGW, com a mesma finalidade do jogosdaqui, falar sobre gamedevs brasileiras:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/11/21/jogosdaqui-um-pouco-de-historia-open-source-e-colaboracao/EGW-entrevista-Doubleleft.png &quot; /&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;site-wordpress&quot;&gt;Site WordPress&lt;/h1&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/11/21/jogosdaqui-um-pouco-de-historia-open-source-e-colaboracao/jogosdaqui-site-wordpress.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;No final de 2014, comecei a migrar o jogosdaqui para um site próprio em WordPress e durante todo ano de 2015 foram produzidos diversas matérias, mas devido a demandas pessoais o site ficou no ar apenas até 2016.&lt;/p&gt;

&lt;h1 id=&quot;open-source-e-colaborativo&quot;&gt;Open source e colaborativo&lt;/h1&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/11/21/jogosdaqui-um-pouco-de-historia-open-source-e-colaboracao/jogosdaqui-logo.png &quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;E essa história nos leva a esse momento, pois acredito que o material que o jogosdaqui produziu sobre os games nacionais, alguns deles que podem ser encontrados somente no jogosdaqui, não devem ser esquecidos ou perdidos.&lt;/p&gt;

&lt;p&gt;Então no início desse mês comecei a conversão de todos os artigos, oriundos de 3 modelos diferentes (site PHP, blog UOL e WordPress) para uma única plataforma open source, baseada no GitHub Pages (Jekyll) e que permitirá que esse material não seja perdido, possa ainda ser melhorado e novos posts possam ser publicados por qualquer pessoa interessada em divulgar a indústria brasileira de desenvolvimento de jogos.&lt;/p&gt;

&lt;p&gt;Acessem o &lt;a href=&quot;https://jogosdaqui.github.io&quot;&gt;https://jogosdaqui.github.io&lt;/a&gt; e aproveitem para conhecer mais sobre jogos os eletrônicos brasileiros.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2018/11/21/jogosdaqui-um-pouco-de-historia-open-source-e-colaboracao/150-jogosdaqui.jpg &quot; /&gt;
      &lt;/center&gt;</content><author><name></name></author><category term="jogosdaqui" /><category term="pt-br" /><category term="brasil" /><summary type="html">Muitos não sabem, mas além de programar, sempre gostei de ajudar a divulgar a indústria brasileira de desenvolvimento de jogos.</summary></entry></feed>