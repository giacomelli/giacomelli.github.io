<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://diegogiacomelli.com.br/feed.xml" rel="self" type="application/atom+xml" /><link href="http://diegogiacomelli.com.br/" rel="alternate" type="text/html" /><updated>2019-08-05T11:06:38-03:00</updated><id>http://diegogiacomelli.com.br/feed.xml</id><title type="html">Diego Giacomelli</title><subtitle>programmer</subtitle><entry><title type="html">Unity and Game Development links (Aug 5th 2019)</title><link href="http://diegogiacomelli.com.br/unity-and-gamedev-links-aug-5th-2019/" rel="alternate" type="text/html" title="Unity and Game Development links (Aug 5th 2019)" /><published>2019-08-05T00:00:00-03:00</published><updated>2019-08-05T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-and-gamedev-links-aug-5th-2019</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-and-gamedev-links-aug-5th-2019/">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Phi Dinh&lt;/strong&gt; remembered a Twitter moment with tips and tutorials about the shaders used on Recompile. (&lt;a href=&quot;https://twitter.com/i/moments/1122251136239570947&quot;&gt;Recompile Unity Tips and Tutorials&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Thomas Krogh-Jacobsen&lt;/strong&gt; wrote a blog post about Unity 2019.2 release. This version has more than 170 new features. (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/30/heres-whats-in-the-brand-new-unity-2019-2&quot;&gt;Here’s what’s in the brand-new Unity 2019.2&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Screen.cutouts for iOS/Android, Burst Compiler updates, TypeCache API in Editor code, PhysX Cloth Solver update, DSPGraph audio mixing/rendering engine, Intel® VTune™ Amplifier support, IDE support moving to packages, .NET 4.x is now default and Incremental Garbage Collection.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made a video about Unity 2019.2 features too (&lt;a href=&quot;https://www.youtube.com/watch?v=qoERAtLGq-8&quot;&gt;Unity 2019.2 is now available!&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/qoERAtLGq-8 &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Andy Touch&lt;/strong&gt; created a Twitter thread to about the different 2D Light Types available in Unity 2019.2 (&lt;a href=&quot;https://twitter.com/andytouch/status/1156204606562738176&quot;&gt;2D Light Types&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dilmer Valecillos&lt;/strong&gt; made a video showing how to use low polly assets for VR (&lt;a href=&quot;https://www.youtube.com/watch?v=4SVUeuV6TpU&quot;&gt;Unity3d Oculus Quest Development - Adding A Low Poly Asset for VR Usage from the Asset Store&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Alex Lindman&lt;/strong&gt; wrote a blog post about custom lighting in Shader Graph (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/31/custom-lighting-in-shader-graph-expanding-your-graphs-in-2019&quot;&gt;Custom Lighting in Shader Graph: Expanding your graphs in 2019&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;With the release of Unity Editor 2019.1, the Shader Graph package officially came out of preview! Now, in 2019.2, we’re bringing even more features and functionality to Shader Graph.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kenney&lt;/strong&gt; has an incredible collection of free game assets that any game developer can use (&lt;a href=&quot;https://kenney.nl/assets&quot;&gt;Kenney Assets&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;License: (CC0 1.0 Universal) You’re free to use these game assets in any project, personal or commercial. There’s no need to ask permission before using these. Giving attribution is not required, but is greatly appreciated!&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lindsay Cox&lt;/strong&gt; made a peformance test comparing single thead, TPL and C# Job System (&lt;a href=&quot;http://lindsaycox.co.uk/blog/unity/single-thread-vs-tasks-vs-unity-c-jobs-simple-performance-test/&quot;&gt;Single Thread Vs Tasks Vs Unity C# Jobs – Simple Performance Test&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;In conclusion then, based on the above tests, if you are going to crunch through work without the Burst Compiler, maybe look at using something like Tasks first before opting for Jobs. If you are going to use the Burst Compiler, use the Job System.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kristin Stock&lt;/strong&gt; made a video on procedurally generated low-poly planets (&lt;a href=&quot;https://www.youtube.com/watch?v=2FfzEdALOGQ&quot;&gt;Procedurally Generated Low-Poly Planets in Unity&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/2FfzEdALOGQ &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Eduardo Oriz and Mike Geig&lt;/strong&gt; wrote a blog post about how to set up your Unity project for retro 16-bit games (&lt;a href=&quot;https://blogs.unity3d.com/2019/08/02/2d-pixel-perfect-how-to-set-up-your-unity-project-for-retro-16-bit-games&quot;&gt;2D Pixel Perfect: How to set up your Unity project for retro 16-bit games&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;In our first 2D Pixel Perfect guide for retro games, we showed you how to set up the 2D Pixel Perfect tool and how 8-bit graphics were made back in the day. In this post, we fast-forward to the 16-bit era. With the help of Mega Cat Studios, you’ll learn how to create authentic art for Sega Genesis (or Mega Drive) and Super NES-style games using Unity settings, graphics structures, and color palettes&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unity&lt;/strong&gt; released the &lt;code class=&quot;highlighter-rouge&quot;&gt;ML-Agents Beta 0.9.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/Unity-Technologies/ml-agents/releases/tag/0.9.0&quot;&gt;ML-Agents Beta 0.9.0&lt;/a&gt;)
    &lt;blockquote&gt;
      &lt;p&gt;Generative Adversarial Imitation Learning, pre-training for the PPO trainer, training generalized reinforcement learning agents, options for Nature and ResNet CNN architectures.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="unity3d" /><category term="gamedev" /><summary type="html"></summary></entry><entry><title type="html">Developing Web APIs - Good Practices</title><link href="http://diegogiacomelli.com.br/developing-web-apis-good-practices/" rel="alternate" type="text/html" title="Developing Web APIs - Good Practices" /><published>2019-08-02T00:00:00-03:00</published><updated>2019-08-02T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/developing-web-apis-good-practices</id><content type="html" xml:base="http://diegogiacomelli.com.br/developing-web-apis-good-practices/">&lt;p&gt;Some days ago a coworker asked me what do I thought about wich status code a web api should return and if there are some good pratices to follow. When he asked this, I remembered that I’ve followed some good pratices, most of them based on my emperical knowledge of years of development and consuming web apis. For this reason I wrote this post as a way to organize and document what are those good pratices that I follow. Maybe it can be useful to someone.&lt;/p&gt;

&lt;p&gt;The list below is not intended to be right and definitive, there is no silver bullet, but just things that I learned and tested in more of a decade working with web apis. Things that worked for me and my projects can easily not work for you and your projects, because context is other  and challenges too.&lt;/p&gt;

&lt;p&gt;Besides, if you disagree with some of this points, please let a comment in the end of the post, we could learn more with it!&lt;/p&gt;

&lt;h1 id=&quot;rest-or-not-restful&quot;&gt;REST or not RESTful?&lt;/h1&gt;
&lt;p&gt;First of all, build a software that really attend the requisites, that has good code quality and has good performance is more important than follow someone’s guidance, with this said I always try to implement REST web apis, but exceptions exists and we need to work with them, so don’t try to force some operation than will don’t fit well on REST way.&lt;/p&gt;

&lt;p&gt;Remember, REST is a style architecture and as every architecture, you can (and most of time should) adapt it for your project needs and capacities.&lt;/p&gt;

&lt;h1 id=&quot;verbs-and-urls&quot;&gt;Verbs and URLs&lt;/h1&gt;
&lt;p&gt;Probably the most important rule about web api is to respect the meaning of verbs, this will really make the life easer for those whom are consuming your web api.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;: to retrieve something.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;: to create something.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;: to complete update something.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt;: to partially update something.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;: to delete something&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, combining with URLs, you get a really clear way to work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;/resource  : returns all resources.&lt;/li&gt;
      &lt;li&gt;/resource/1: returns the resource with id 1.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;/resource: creates a bunch of resources  (rarelly used).&lt;/li&gt;
      &lt;li&gt;/resource/1: Not used.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;/resource: complete updates a bunch of resources (rarelly used).&lt;/li&gt;
      &lt;li&gt;/resource/1: complete updates the resource with id 1.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;/resource: partial updates a bunch of resources (rarelly used).&lt;/li&gt;
      &lt;li&gt;/resource/1: partial updates the resource with id 1.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;/resource: deletes all resources (rarelly used, mostly never).&lt;/li&gt;
      &lt;li&gt;/resource/1: delete the resource with id 1.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;status-code&quot;&gt;Status code&lt;/h1&gt;
&lt;p&gt;I try to keep the range of returned status code small, the smallest one has only 3 status:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;200&lt;/code&gt;: succesful request.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;400&lt;/code&gt;: a client error.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;500&lt;/code&gt; : a server error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, you can extend this one, like use &lt;code class=&quot;highlighter-rouge&quot;&gt;201 (created)&lt;/code&gt; to return status for POST verbs, and &lt;code class=&quot;highlighter-rouge&quot;&gt;401&lt;/code&gt; to unauthorized requests, but try to keep this list small, so it will be easy to who consume your API take decisions about what to do with different status code.&lt;/p&gt;

&lt;p&gt;Another good pratice is return an &lt;code class=&quot;highlighter-rouge&quot;&gt;error code&lt;/code&gt; and an &lt;code class=&quot;highlighter-rouge&quot;&gt;error message&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; of requests that result in &lt;code class=&quot;highlighter-rouge&quot;&gt;400&lt;/code&gt; status code (client error), this way the client can react or display different informations to the end user. 
In most cases, &lt;code class=&quot;highlighter-rouge&quot;&gt;400&lt;/code&gt; status code are about some business logic rule that need to be respect to result in a sucessful request, so provide some information to client can help it to understand what is wrong in the request.&lt;/p&gt;

&lt;h1 id=&quot;versioning&quot;&gt;Versioning&lt;/h1&gt;
&lt;p&gt;I see a lot of developers using &lt;code class=&quot;highlighter-rouge&quot;&gt;v1&lt;/code&gt; inside the code to “versioning” their web apis, I really dislike this method, I can understand that this is easy to deploy a new web api version to the same virtual application using this technique, but we need to agree that we do versioning using some SCM, like Git, SVN and Mercurial with everything else that correspond to our code, why should we do versioning inside the code in the case of web api?&lt;/p&gt;

&lt;p&gt;In most of case your web api will have only one version, especially when you are developing a &lt;code class=&quot;highlighter-rouge&quot;&gt;SPA&lt;/code&gt; app and it is the only client of your web api.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Versioning of APIs is a controversial topic—you will find a lot of contradictory guidance on the internet.
The pattern that is most commonly practiced is probably the one with a version identifier in a path
segment of URLs. Since there is little consensus on versioning, simply offering our opinions on the topic may not be very helpful, but we offer two thoughts:&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;Doing nothing at all for API versioning is an intelligent approach that is getting more attention&lt;/li&gt;
    &lt;li&gt;Links and version identifiers in URLs make awkward bedfellows&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/files/apigee/apigee-web-api-design-the-missing-link-ebook.pdf&quot;&gt;Web API Design: The Missing Link&lt;/a&gt;&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;my-web-api-really-need-versions&quot;&gt;My web api really need versions&lt;/h2&gt;
&lt;p&gt;In this case, the approach that I use is create a new site/virtual application every time that I need to publish a major version of my web api, so, in the code of the routes there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;v1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;v2&lt;/code&gt; and so on.&lt;/p&gt;

&lt;p&gt;Let say I have a web api publish on &lt;code class=&quot;highlighter-rouge&quot;&gt;http://diegogiacomelli.com.br/sample-api/v1&lt;/code&gt;, than I made some breaking changes to the public interface of the web api and need to publish another version in a separated url to avoid any impact to the users that still use the old &lt;code class=&quot;highlighter-rouge&quot;&gt;v1&lt;/code&gt;. I will just create the new &lt;code class=&quot;highlighter-rouge&quot;&gt;v2&lt;/code&gt; virtual application, and the urls will be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://diegogiacomelli.com.br/sample-api/v1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://diegogiacomelli.com.br/sample-api/v2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a moment in future you will want to remove the support to the &lt;code class=&quot;highlighter-rouge&quot;&gt;v1&lt;/code&gt; version, in that moment you could configure your virtual application to redirect (status code &lt;code class=&quot;highlighter-rouge&quot;&gt;301&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;302&lt;/code&gt;) to the next/latest version.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Of course, it’s a good pratice too have some public changelog about your web api versions releases to notify the clients developers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;describing&quot;&gt;Describing&lt;/h1&gt;
&lt;p&gt;In the field of how to describe a web api REST I can cite &lt;code class=&quot;highlighter-rouge&quot;&gt;Swagger&lt;/code&gt;. It is not a attempt to create a WSDL like to web api REST, but it is a good attempt to create an open standard for describing web apis REST.&lt;/p&gt;

&lt;p&gt;Swagger is a specification and complete framework implementation for describing, producing, consuming, and visualizing RESTful web services.&lt;/p&gt;

&lt;p&gt;I use Swagger a lot and really love it, mainly because Swagger UI that allow you generate a nice live console and documentation for your web api.&lt;/p&gt;

&lt;p&gt;There are many implementations of Swagger for most of languages: C#, Java, Python, Ruby, etc.&lt;/p&gt;

&lt;p&gt;If you are using ASP .NET Web API, there a some projects to auto generate the Swagger specification, like &lt;a href=&quot;https://github.com/domaindrivendev/Swashbuckle.AspNetCore&quot;&gt;Swashbuckle.AspNetCore&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Swagger is very popular nowadays, but if you never see it in action, take a look on &lt;a href=&quot;https://developer.marvel.com/docs&quot;&gt;Marvel API&lt;/a&gt; that use Swagger and Swagger UI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;other-conventions-and-good-pratices&quot;&gt;Other conventions and good pratices&lt;/h1&gt;
&lt;p&gt;To keep our lifes as developers easier is good to define some conventions of how our web api REST will behave, the best effort I know in this field are the very good &lt;strong&gt;Apigee e-books&lt;/strong&gt;. The e-books are not an attempt to create a bible or a mantra about how to design your api, but rather a collection of conventions observed in large web REST apis, like Twitter, Facebook, Linkedin, Google, etc.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most of the good pratices that I used, tested and mentioned in this post I learned from my experience and Apigee books.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I probably forgot some learnings that I still use in my web apis developing, maybe because it’s so common to perform it that I even do not notice them, but the ones cited above I think are the most remarkable.&lt;/p&gt;

&lt;h1 id=&quot;further-readings&quot;&gt;Further readings&lt;/h1&gt;
&lt;p&gt;I really recommend you to read the books bellow, they have a detailed a lot of good practices about how do develop good web apis and can help you to design yours.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pages.apigee.com/rs/apigee/images/api-design-ebook-2012-03.pdf&quot;&gt;Web API Design&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The success of an API design is measured by how quickly developers can get
up to speed and start enjoying success using your API.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/files/apigee/apigee-web-api-design-the-missing-link-ebook.pdf&quot;&gt;Web API Design: The Missing Link&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;When you design any interface, you should try to put yourself in the shoes of the user&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="web-api" /><category term="good-pratices" /><summary type="html">Some days ago a coworker asked me what do I thought about wich status code a web api should return and if there are some good pratices to follow. When he asked this, I remembered that I’ve followed some good pratices, most of them based on my emperical knowledge of years of development and consuming web apis. For this reason I wrote this post as a way to organize and document what are those good pratices that I follow. Maybe it can be useful to someone.</summary></entry><entry><title type="html">Unity Toasty Notification</title><link href="http://diegogiacomelli.com.br/unity-toasty-notification/" rel="alternate" type="text/html" title="Unity Toasty Notification" /><published>2019-07-30T00:00:00-03:00</published><updated>2019-07-30T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-toasty-notification</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-toasty-notification/">&lt;p&gt;Last saturday I created the &lt;a href=&quot;https://github.com/giacomelli/Giacomelli.Unity.ToastyNotification&quot;&gt;ToastyNotification&lt;/a&gt; package, a fun editor log interceptor that play Mortal Kombat’s Toasty easter-egg every time an error is logged.&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/wwhz2wPN_wU &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;
&lt;p&gt;Just install the &lt;code class=&quot;highlighter-rouge&quot;&gt;ToastyNotification.package&lt;/code&gt; from the repository &lt;a href=&quot;https://github.com/giacomelli/Giacomelli.Unity.ToastyNotification/releases&quot;&gt;release page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now every time your game raise an error on Unity’s editor console log, the Toasty Notifcation will warning you 😉!&lt;/p&gt;</content><author><name></name></author><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><category term="console-log" /><summary type="html">Last saturday I created the ToastyNotification package, a fun editor log interceptor that play Mortal Kombat’s Toasty easter-egg every time an error is logged.</summary></entry><entry><title type="html">Unity and Game Development links (July 29th 2019)</title><link href="http://diegogiacomelli.com.br/unity-and-gamedev-links-july-29th-2019/" rel="alternate" type="text/html" title="Unity and Game Development links (July 29th 2019)" /><published>2019-07-29T00:00:00-03:00</published><updated>2019-07-29T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-and-gamedev-links-july-29th-2019</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-and-gamedev-links-july-29th-2019/">&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Kristin Stock&lt;/strong&gt; published an amazing video about SPH (Smoothed Particle Hydrodynamics) in Unity. (&lt;a href=&quot;https://www.youtube.com/watch?v=NJBz8rMJ0ZU&quot;&gt;Fluid Simulation / Smoothed Particle Hydrodynamics in Unity&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/NJBz8rMJ0ZU &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SIGGRAPH 2019&lt;/strong&gt; is taking place in Los Angeles, between July 28 and August 1. Unity has made a page where you can see the Unity’s  presentations calendar (&lt;a href=&quot;https://unity.com/events/siggraph-2019&quot;&gt;Unity at SIGGRAPH 2019&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kin&lt;/strong&gt; is a currency for the digital world that just now caught my attention. There is an SDK for Unity. They are posing a challenge for Unity developers, the deadline is December 30, 2019 (&lt;a href=&quot;https://kin.org/developers/unityapply/gaming-challenge/&quot;&gt;Kin Gaming Challenge&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Kin enables the free and instant transfer of value between users, no matter how small the amount. This lets users give something more meaningful than a like, making your app even more fun and engaging.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lasse Jon Fuglsang Pedersen and Robert Cupisz&lt;/strong&gt; in the making of The Heretic, a real-time short film made with Unity. (&lt;a href=&quot;https://www.youtube.com/watch?v=5H9Jo2qjJXs&quot;&gt;Lasse Jon Fuglsang Pedersen, Robert Cupisz - Making of The Heretic&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/5H9Jo2qjJXs &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made two videos, one showing his top 5 assets for Unity in 2019 (&lt;a href=&quot;https://www.youtube.com/watch?v=s-4s9KhO_D0&quot;&gt;5 AWESOME ASSETS FOR UNITY 2019!&lt;/a&gt;) and a second one about the new Multiplayer system that Unity is working on (&lt;a href=&quot;https://www.youtube.com/watch?v=n3kcbUBuPpk&quot;&gt;NEW MULTIPLAYER in Unity 2019 – Connected Games (Overview)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tyler Hurd&lt;/strong&gt; presented to the world a tool that him have been working: Actuator leverages real-time physics and tracked VR devices for rigging, animating and puppeteering. (&lt;a href=&quot;http://tylerhurd.com/projects/actuator/&quot;&gt;Actuator)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/moYfppZzf2c &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;</content><author><name></name></author><category term="unity3d" /><category term="gamedev" /><summary type="html"></summary></entry><entry><title type="html">Publishing a .NET Core project to SonarCloud with Cake</title><link href="http://diegogiacomelli.com.br/publishing-a-dotnet-core-project-to-sonarcloud-with-cake/" rel="alternate" type="text/html" title="Publishing a .NET Core project to SonarCloud with Cake" /><published>2019-07-25T00:00:00-03:00</published><updated>2019-07-25T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/publishing-a-dotnet-core-project-to-sonarcloud-with-cake</id><content type="html" xml:base="http://diegogiacomelli.com.br/publishing-a-dotnet-core-project-to-sonarcloud-with-cake/">&lt;p&gt;In this post I will show how to use &lt;a href=&quot;https://cakebuild.net/&quot;&gt;Cake&lt;/a&gt; to build and test a .NET Core project and then publish the results to &lt;a href=&quot;https://sonarcloud.io&quot;&gt;SonarCloud&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Cake&lt;/strong&gt; (C# Make) is a cross-platform build automation system with a C# DSL for tasks such as compiling code, copying files and folders, running unit tests, compressing files and building NuGet packages.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;SonarCloud&lt;/strong&gt; is a cloud service offered by SonarSource and based on SonarQube. SonarQube is a widely adopted open source platform to inspect continuously the quality of source code and detect bugs, vulnerabilities and code smells.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cake&lt;/strong&gt;: install the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cake&lt;/code&gt; on your .NET Core project before start this tutorial. Follow this &lt;a href=&quot;https://cakebuild.net/docs/tutorials/setting-up-a-new-project&quot;&gt;Setting Up A New Project&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SonarCloud&lt;/strong&gt;: create an account and add a project on &lt;a href=&quot;https://sonarcloud.io&quot;&gt;https://sonarcloud.io&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;creating-the-buildcake&quot;&gt;Creating the build.cake&lt;/h2&gt;
&lt;p&gt;In project root folder, create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;build.cake&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;adding-the-tools-and-addin-references&quot;&gt;Adding the tools and addin references&lt;/h3&gt;
&lt;p&gt;Add the lines below to the file:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2ff83d13a8b970aacd4aa94b9182e7bb.js?file=build.v1.cake&quot;&gt; &lt;/script&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;We’ll use those tools and addins to create the complete .cake script.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;setting-the-variables&quot;&gt;Setting the variables&lt;/h3&gt;
&lt;p&gt;Now we need to set some variables:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2ff83d13a8b970aacd4aa94b9182e7bb.js?file=build.v2.cake&quot;&gt; &lt;/script&gt;

&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;solutionDir&lt;/strong&gt;: is the subfolder where your solution source code is located.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sonarLogin&lt;/strong&gt;: Change the &lt;code class=&quot;highlighter-rouge&quot;&gt;[SONARCLOUD-USER-TOKEN]&lt;/code&gt; for a token you can generate at the page &lt;a href=&quot;https://sonarcloud.io/account/security/&quot;&gt;https://sonarcloud.io/account/security/&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;branch&lt;/strong&gt;: if you are using git, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;GitBranchCurrent(&quot;.&quot;).FriendlyName&lt;/code&gt; will pass the right branch name to SonarCloud, otherwise you can set it manually.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are using &lt;code class=&quot;highlighter-rouge&quot;&gt;AppVeyor&lt;/code&gt; you can use line bellow to allow discover the branch name locally and in the AppVeyor:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2ff83d13a8b970aacd4aa94b9182e7bb.js?file=build.v3.cake&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;build-task&quot;&gt;Build task&lt;/h3&gt;
&lt;p&gt;The first task definitions will build our .NET Core project:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2ff83d13a8b970aacd4aa94b9182e7bb.js?file=build.v4.cake&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;test-task&quot;&gt;Test task&lt;/h3&gt;
&lt;p&gt;Now we will define the task to run our tests:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2ff83d13a8b970aacd4aa94b9182e7bb.js?file=build.v5.cake&quot;&gt; &lt;/script&gt;

&lt;p&gt;This task use &lt;code class=&quot;highlighter-rouge&quot;&gt;Coverlet&lt;/code&gt; to collect the code coverage. Install it on your test project using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Coverlet&lt;/code&gt; NuGet package:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;install-package coverlet.msbuild
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sonar-tasks&quot;&gt;Sonar tasks&lt;/h3&gt;
&lt;p&gt;The lasts tasks to define are responsible to scan the project and send the build and tests results to SonarCloud:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2ff83d13a8b970aacd4aa94b9182e7bb.js?file=build.v6.cake&quot;&gt; &lt;/script&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Key&lt;/strong&gt;: is your project key on SonarCloud. You can get it throw these steps on &lt;a href=&quot;https://sonarcloud.io&quot;&gt;SonarCloud&lt;/a&gt;:
    &lt;ul&gt;
      &lt;li&gt;Select your project.&lt;/li&gt;
      &lt;li&gt;Open the menu &lt;code class=&quot;highlighter-rouge&quot;&gt;Administration / Update Key&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Organization&lt;/strong&gt;: is the name of your organization on SonarCloud. If your &lt;code class=&quot;highlighter-rouge&quot;&gt;projects&lt;/code&gt; page is &lt;code class=&quot;highlighter-rouge&quot;&gt;https://sonarcloud.io/organizations/YOUR-ORGANIZATION/projects&lt;/code&gt;, then your &lt;strong&gt;Organization&lt;/strong&gt; value is &lt;code class=&quot;highlighter-rouge&quot;&gt;YOUR-ORGANIZATION&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Exclusions&lt;/strong&gt;: here you can define the wildcards to excluse some files fron Sonar scan, like sample, docs and test files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;defining-the-tasks-order&quot;&gt;Defining the tasks order&lt;/h3&gt;
&lt;p&gt;The last part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.cake&lt;/code&gt; file define the order that tasks will run:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2ff83d13a8b970aacd4aa94b9182e7bb.js?file=build.v7.cake&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;running-the-buildcake&quot;&gt;Running the build.cake&lt;/h2&gt;
&lt;p&gt;Now, every time you want to build, test and publish the results to SonarCloud you need to type this command on your project root folder:&lt;/p&gt;

&lt;p&gt;MacOS:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./build.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Windows:&lt;/p&gt;

&lt;p&gt;Open a &lt;code class=&quot;highlighter-rouge&quot;&gt;powershell&lt;/code&gt; terminal:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;uild.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the build finish, you should see something like this:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/07/25/publishing-a-dotnet-core-project-to-sonarcloud-with-cake/cake-terminal.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;Cake build&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Then open your project on &lt;a href=&quot;https://sonarcloud.io/projects&quot;&gt;SonarCloud&lt;/a&gt;:&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/07/25/publishing-a-dotnet-core-project-to-sonarcloud-with-cake/sonarcloud-dashboard.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;SonarCloud dashboard&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;That’s it, now your project is ready to using cake to publish results to SonarCloud.&lt;/p&gt;

&lt;h2 id=&quot;complete-buildcake&quot;&gt;Complete build.cake&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2ff83d13a8b970aacd4aa94b9182e7bb.js?file=build.cake&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;extras&quot;&gt;Extras&lt;/h2&gt;
&lt;p&gt;If you are using git, you can add this lines to your .gitignore file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tools/**
!tools/packages.config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="dotnet" /><category term="sonar" /><category term="cake" /><summary type="html">In this post I will show how to use Cake to build and test a .NET Core project and then publish the results to SonarCloud. Introduction</summary></entry><entry><title type="html">unitytips&amp;amp;colon; Scene Preview Window</title><link href="http://diegogiacomelli.com.br/unitytips-scene-preview-window/" rel="alternate" type="text/html" title="unitytips&amp;colon; Scene Preview Window" /><published>2019-07-23T00:00:00-03:00</published><updated>2019-07-23T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-scene-preview-window</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-scene-preview-window/">&lt;p&gt;I created this window that extends the Unity 3D editor so you can preview the scenes by selecting them in the project window.&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/eh8nqfDCUVo &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt;
&lt;p&gt;As can be seen from the video above the extension can be used in two ways after adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene Preview&lt;/code&gt; window to the editor (via the&lt;code class=&quot;highlighter-rouge&quot;&gt; Window / Scene Preview&lt;/code&gt; menu):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Selects &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene&lt;/code&gt; and clicking the &lt;code class=&quot;highlighter-rouge&quot;&gt;Capture screenshot&lt;/code&gt; button in both edit mode and play mode.&lt;/li&gt;
  &lt;li&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene&lt;/code&gt; in play mode and if there is still no preview screenshot for the scene, a screenshot will be taken automatically after 10 seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Below you can see only the code of &lt;code class=&quot;highlighter-rouge&quot;&gt;ScenePreviewEditor.cs&lt;/code&gt;. There are 3 more files for this extension.&lt;/p&gt;

&lt;p&gt;Download the full &lt;a href=&quot;https://gist.github.com/giacomelli/ad9d4dcdb702d2d1edf0663628ca9608&quot;&gt;gist&lt;/a&gt; or use the &lt;a href=&quot;/unitytips-gist-importer&quot;&gt;Gist Importer&lt;/a&gt; to import the complete &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene Preview Window&lt;/code&gt; for your project.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ad9d4dcdb702d2d1edf0663628ca9608.js?file=ScenePreviewWindow.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Remember that you need to save the above .cs files inside any &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder&lt;/p&gt;
&lt;/div&gt;</content><author><name></name></author><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><category term="editor-window" /><summary type="html">I created this window that extends the Unity 3D editor so you can preview the scenes by selecting them in the project window.</summary></entry><entry><title type="html">Unity and Game Development links (July 22th 2019)</title><link href="http://diegogiacomelli.com.br/unity-and-gamedev-links-july-22th-2019/" rel="alternate" type="text/html" title="Unity and Game Development links (July 22th 2019)" /><published>2019-07-22T00:00:00-03:00</published><updated>2019-07-22T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-and-gamedev-links-july-22th-2019</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-and-gamedev-links-july-22th-2019/">&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Stephen Palmer&lt;/strong&gt; presented the preview of Addressables, the Unity new system for editor and runtime asset management. (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/15/addressable-asset-system&quot;&gt;Addressable Asset System&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;What we found when talking to developers about their experience using Asset Bundles was that almost everyone doing so successfully were more or less writing the same high level systems a thousand slightly different ways. Addressables was born out of this obvious need for a framework to solve a set of common problems related to addressing, building, and loading assets.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cyan&lt;/strong&gt; made a blog post about Voronoi noise, a type of noise based on cells,  and shaders (&lt;a href=&quot;https://cyangamedev.wordpress.com/2019/07/16/voronoi/&quot;&gt;Voronoi&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kat Woolley&lt;/strong&gt; introduced the Creator Kits, a beginners kit to learn Unity basics without writing code. (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/17/creator-kits-get-creating-quickly&quot;&gt;Creator Kits – Get creating quickly&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;We’ve produced three kits: A puzzle game, an FPS and an RPG. Get a brief introduction to each game genre and learn the basics of Unity without writing code. The kits offer beginners a good way to create your own game in under an hour before embarking on something with a broader scope like the Game Kits.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unity&lt;/strong&gt; made a case study about Playkot, the creators of Age Of Magic (&lt;a href=&quot;https://unity.com/case-study/playkot-age-of-magic&quot;&gt;Playkot – A Unity developer case study&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;How do a businessman and a software developer working at an improvised kitchen table in St. Petersburg, Russia go on to produce sophisticated social games and mobile RPGs with some of the best graphics in the industry? Meet Sasha Pavlov and Oleg Sysoev, who started Playkot Games in 2009. Since then, they’ve grown their team to 150+ by carefully combining the right people, adopting Unity, and implementing the right strategies to capture significant market share around the world.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Anna Lee&lt;/strong&gt; wrote a blog post on the series &lt;code class=&quot;highlighter-rouge&quot;&gt;Faces of Unity&lt;/code&gt;, now presenting Dave Hunt, Lead Technical Artist in Copenhagen (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/19/faces-of-unity-dave-hunt&quot;&gt;Faces of Unity – Dave Hunt)&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Learn more about Dave as he shares about his career journey and work-life balance as a parent here at Unity!&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Brackeys&lt;/strong&gt; published a video about learnings in 10 years of game development! (&lt;a href=&quot;https://youtu.be/T18X1HuawRc&quot;&gt;What I learned after 10 Years of Game Development!&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made a video showing how to make explosions and shockwave effects in Unity (&lt;a href=&quot;https://youtu.be/u7lwL7ubwKA&quot;&gt;SHOCKWAVE &amp;amp; EXPLOSION IN UNITY 2019! (Tutorial)&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="unity3d" /><category term="gamedev" /><summary type="html"></summary></entry><entry><title type="html">GeneticSharp in the Wild&amp;amp;colon; Design of a Warehouse Order Picking Policy</title><link href="http://diegogiacomelli.com.br/geneticsharp-in-the-wild-design-of-a-warehouse-order-picking-policy/" rel="alternate" type="text/html" title="GeneticSharp in the Wild&amp;colon; Design of a Warehouse Order Picking Policy" /><published>2019-07-18T00:00:00-03:00</published><updated>2019-07-18T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/geneticsharp-in-the-wild-design-of-a-warehouse-order-picking-policy</id><content type="html" xml:base="http://diegogiacomelli.com.br/geneticsharp-in-the-wild-design-of-a-warehouse-order-picking-policy/">&lt;p&gt;I started a &lt;a href=&quot;/tags/geneticsharp-in-the-wild/&quot;&gt;series of posts&lt;/a&gt; about some outstanding scientific papers and projects using &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp&quot;&gt;GeneticSharp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For this fourth post the choose one is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Design of a Warehouse Order Picking Policy - Using Genetic Algorithm&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The main motivation of the author about this paper was:
&lt;em&gt;improving order-picking process is considered which is an essential
operation critically impacting warehouse and supply chain performance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The study is composed of two phases: In the first phase, the
shortest path between each pair of items is determined in a pick list leading to the
second phase of determining the sequence of all items to be picked. A
mathematical model is utilized to find the shortest path between each item pair in
a pick list.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;A genetic algorithm based approach is developed to decide the picking
sequence of all items in an order list, given the shortest distance between each pair
of items. The performance of the proposed algorithms is compared to popular
heuristics used for multi-block warehouses, namely: S-Shape and Largest Gap.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ahmet Can Saner, the paper author made &lt;a href=&quot;http://diegogiacomelli.com.br/GeneticSharp-v1.2.0-sequence-mutations/&quot;&gt;great contributions to GeneticSharp&lt;/a&gt;, that him developed during his master degree, like: Displacement Mutation, Insertion Mutation and Partial Shuffle Mutation (PSM).&lt;/p&gt;

&lt;h1 id=&quot;results&quot;&gt;Results&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;For 25-item pick lists, all of the proposed
GA algorithms are superior to S-Shape and Largest Gap heuristics, in terms of travelled
distance. GA with order crossover operator, inversion mutation operator provides the best
results in terms of average travelled distance&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;For 50-item pick lists, all of the proposed GA
algorithms are superior to S-Shape, in terms of travelled distance. But when compared to
Largest Gap heuristic, only GA algorithms with inversion mutation operator performs
better than Largest Gap, in terms of travelled distance.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;For 100-
item pick lists, only GA algorithms with inversion mutation operator performs better than
both S-Shape and Largest Gap heuristics, in terms of travelled distance. GA with order
crossover operator, inversion mutation operator setting performs the best in terms of
average travelled distance for pick lists of size 100.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;author&quot;&gt;Author&lt;/h1&gt;
&lt;p&gt;Ahmet Can Saner, with Dr. Zehra
Düzgi supervision, wrote the paper for his master degree at Istanbul Bilgi University.&lt;/p&gt;

&lt;h1 id=&quot;further-reading&quot;&gt;Further reading&lt;/h1&gt;
&lt;p&gt;You can access the full paper directly on &lt;a href=&quot;http://openaccess.bilgi.edu.tr:8080/xmlui/bitstream/handle/11411/1310/Design%20of%20a%20warehouse%20order%20picking%20policy%20using%20genetic%20algorithm.pdf?sequence=1&amp;amp;isAllowed=y&quot;&gt;Istanbul Bilgi University library&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="geneticsharp" /><category term="geneticsharp-in-the-wild" /><summary type="html">I started a series of posts about some outstanding scientific papers and projects using GeneticSharp.</summary></entry><entry><title type="html">unitytips&amp;amp;colon; Hierarchy Window GameObject Icon</title><link href="http://diegogiacomelli.com.br/unitytips-hierarchy-window-gameobject-icon/" rel="alternate" type="text/html" title="unitytips&amp;colon; Hierarchy Window GameObject Icon" /><published>2019-07-16T00:00:00-03:00</published><updated>2019-07-16T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-hierarchy-window-gameobject-icon</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-hierarchy-window-gameobject-icon/">&lt;p&gt;You can show the game objects icons in hierarchy window using &lt;code class=&quot;highlighter-rouge&quot;&gt;EditorGUIUtility.ObjectContent&lt;/code&gt;&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/fwtQ51ybHpc &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/a73c947508ee0b32eef7c422620ec6b6.js?file=HierarchyWindowGameObjectIcon.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;p&gt;The icons used in the video are &lt;a href=&quot;https://fontawesome.com/icons&quot;&gt;Font Awesome&lt;/a&gt; icons and I used &lt;a href=&quot;http://fa2png.io/&quot;&gt;fa2png.io&lt;/a&gt; to convert them to .png.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Remember that you need to save the above .cs inside any &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder&lt;/p&gt;
&lt;/div&gt;</content><author><name></name></author><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><category term="hierarchy-window" /><summary type="html">You can show the game objects icons in hierarchy window using EditorGUIUtility.ObjectContent</summary></entry><entry><title type="html">Unity and Game Development links (July 15th 2019)</title><link href="http://diegogiacomelli.com.br/unity-and-gamedev-links-july-15th-2019/" rel="alternate" type="text/html" title="Unity and Game Development links (July 15th 2019)" /><published>2019-07-15T00:00:00-03:00</published><updated>2019-07-15T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-and-gamedev-links-july-15th-2019</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-and-gamedev-links-july-15th-2019/">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Alexander Ameye&lt;/strong&gt; made a tutorial about edge detection shaders with Shader Graph and how to use some Lightweight Rendering Pipeline customization to generate DepthNormals (&lt;a href=&quot;https://alexanderameye.github.io/edgedetection&quot;&gt;Edge Detection Shader&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cyan&lt;/strong&gt; made a blog post about Render Textures and how to read them  in a C# script (&lt;a href=&quot;https://cyangamedev.wordpress.com/2019/07/08/render-textures/&quot;&gt;Render Textures&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Render Textures are stored and handled on the GPU, which means we can’t access the data from them in a C# script which runs on the CPU – and you shouldn’t really need to for most effects. However, I wanted my player to be able to interact with water which was based on a Render Texture and only spawn particles if the player was in the water, along with some other effects.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Frank Manley&lt;/strong&gt; wrote about the Unity Hackweek 2019 (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/08/unity-hackweek-2019-tackling-hard-problems-building-team-skills&quot;&gt;Unity Hackweek 2019: Tackling hard problems, building team skills&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;What happens when you put 700+ people from Unity and our ecosystem in a secluded location once a year and tell them to solve hard tech, coding, and process problems? Their instructions? Unleash your creativity, collaborate like crazy, and embrace diverse perspectives.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tracy Joseph and Brittany Edmond,&lt;/strong&gt; wrote a blog post about their experience on Cannes Lions 2019 (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/09/cannes-lions-2019-celebrating-creativity-innovation-storytelling&quot;&gt;Cannes Lions 2019: Celebrating creativity, innovation &amp;amp; storytelling&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;This year at the Cannes Lions International Festival of Creativity, Unity showed up as the leading real-time 3D creation platform.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Garrexus&lt;/strong&gt; made a breakdown on the Screen space Cosmic shader (&lt;a href=&quot;https://realtimevfx.com/t/screen-space-cosmic-shader-breakdown-unity-ase-shaders-textures-included/9753&quot;&gt;Screen space Cosmic shader breakdown (Unity/ASE, Shaders/Textures included)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Alexander Ameye&lt;/strong&gt; again, now with a tutorial about collision effect (&lt;a href=&quot;https://alexanderameye.github.io/collision.html&quot;&gt;Collision Effect&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tenzin W. and Eduardo Oriz,&lt;/strong&gt; wrote about the results of the latest Asset Store challenge (&lt;a href=&quot;https://blogs.unity3d.com/2019/07/11/the-winners-inside-the-vault-3d-environment-art-contest&quot;&gt;The Winners! Inside the Vault: 3D Environment Art Contest&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;A number of judges evaluated all of the impressive submissions to pick the winners of the latest Asset Store challenge: Use Substance Painter to texture stunning assets that expand the futuristic world of Buried Memories: Yggdrasil.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Anis Benyoub&lt;/strong&gt; made a speech about ray tracing hardware acceleration (&lt;a href=&quot;https://www.youtube.com/watch?v=wbuvrAdNtmQ&quot;&gt;Anis Benyoub - Leveraging Ray Tracing Hardware Acceleration In The Unity Game Engine&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Ray tracing hardware acceleration (RTX) is a newly available feature that allows graphics developers to increase their image quality. While solving complex problems, properly integrating this new set of APIs (DXR and Vulkan ray tracing) in a game engine is tricky, especially so when the engine supports anything from mobile to virtual production.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Brackeys&lt;/strong&gt; published a video about gamepad input (&lt;a href=&quot;https://www.youtube.com/watch?v=p-3S73MaDP8&quot;&gt;CONTROLLER INPUT in Unity!&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made a video showing how to make terrains (&lt;a href=&quot;https://www.youtube.com/watch?v=2Vvwjfp-hg8&quot;&gt;How to make Terrains with Unity 2019! (Tutorial)&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="unity3d" /><category term="gamedev" /><summary type="html"></summary></entry></feed>