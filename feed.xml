<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://diegogiacomelli.com.br/feed.xml" rel="self" type="application/atom+xml" /><link href="http://diegogiacomelli.com.br/" rel="alternate" type="text/html" /><updated>2019-06-10T13:29:30-03:00</updated><id>http://diegogiacomelli.com.br/feed.xml</id><title type="html">Diego Giacomelli</title><subtitle>programmer</subtitle><entry><title type="html">Unity and Game Development links (June 10th 2019)</title><link href="http://diegogiacomelli.com.br/unity-and-gamedev-links-june-10th-2019/" rel="alternate" type="text/html" title="Unity and Game Development links (June 10th 2019)" /><published>2019-06-10T00:00:00-03:00</published><updated>2019-06-10T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-and-gamedev-links-june-10th-2019</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-and-gamedev-links-june-10th-2019/">&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/unity-and-gamdedev-links.png&quot; /&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Toulouse de Margerie&lt;/strong&gt; wrote a post about how Unity natively maintains frame rates an how to make Unity follow a precise frame rate (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/03/precise-framerates-in-unity/&quot;&gt;Precise frame rates in Unity&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Normally, out of the box, a Unity project will attempt to run your project as fast as possible. Frames will be rendered as quickly as they can while generally being limited by your display device’s refresh rate.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jean-Christophe Cimetiere&lt;/strong&gt;, Sr. Technical Product Manager for Mobile Plaftorms at Unity, made a forum post  about the first preview of the new Project Tiny that uses C# as the programming language (&lt;a href=&quot;https://forum.unity.com/threads/project-tiny-c-preview-available.688969/&quot;&gt;Project Tiny C# Preview available&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;We’ve been hard at work changing most of the underlying technology powering Project Tiny in response to your feedback, and in order to bring it closer to the Unity ecosystem. This preview is fully integrated with Unity’s Data-Oriented Tech Stack (DOTS) and sets up a foundation for bringing advanced features for both tiny and big use cases.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Claudia L.&lt;/strong&gt; posted about the Unity Asset Store partnership with Kochava to bring the Kochava SDK for free (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/04/bringing-the-power-of-marketing-data-to-indie-devs/&quot;&gt;Bringing the power of marketing data to indie devs&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jeff Campbell&lt;/strong&gt; wrote an article covering his experience of porting an existing game system to Unity’s DOTS (&lt;a href=&quot;https://www.jeffcampbellmakes.games/blog/2019/5/26/diving-in-headfirst-unitys-job-system-and-jtween&quot;&gt;Porting Existing Systems to Unity’s DOTS: JTween&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Profile early and often as a DOTS implementation develops.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Alexey Zakharov&lt;/strong&gt; wrote a forum post about the UnityEditor.TypeCache API available on Unity 2019.2 or later (&lt;a href=&quot;https://forum.unity.com/threads/unityeditor-typecache-api-for-fast-extraction-of-type-attributes-in-the-editor-tooling.687682&quot;&gt;UnityEditor.TypeCache API for fast extraction of type attributes in the Editor tooling&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;For 2019.2 we optimized and extended the native cache and exposed it as a public UnityEditor.TypeCache API. It can extract information very quickly, allowing iteration over the smaller number of types we are interested in (10–100). That significantly reduces the time required to fetch types by Editor tooling.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Harry Alisavakis&lt;/strong&gt; started a series of tutorials about shaders called &lt;code class=&quot;highlighter-rouge&quot;&gt;VFX Master Shader&lt;/code&gt; (&lt;a href=&quot;https://halisavakis.com/my-take-on-shaders-vfx-master-shader-part-i/&quot;&gt;My take on shaders: VFX Master Shader (Part I)&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;While I experimented with different VFX concepts, I noticed that I was using a bunch of common shader techniques to create new shaders again and again, and I thought to myself: “Why not have one shader to rule them all?”&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; made a new video tutorial about the Terrain Tools Package preview  in Unity 2019.1 (&lt;a href=&quot;https://www.youtube.com/watch?v=tazRinr6nRg&quot;&gt;NEW TERRAIN TOOLS in Unity! (Tutorial)&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Unity&lt;/strong&gt; published a video tutorial to show how to create a toon outiline effect using the new Scriptable Render pass feature (&lt;a href=&quot;https://www.youtube.com/watch?v=joG_tmXUX4M&quot;&gt;How to Make a Toon Outline Effect in Unity 2019 LWRP! (Tutorial)&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;William Todd Stinson&lt;/strong&gt; wrote a blog post about how to access ARKit 3 functionality with AR foundation 2.2 and Unity 2019.1 (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/06/ar-foundation-support-for-arkit-3&quot;&gt;AR Foundation support for ARKit 3&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;Unity has been working closely with Apple throughout the development of ARKit 3, and we are excited to bring these new features to Unity developers.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Kristin Stock&lt;/strong&gt; made a video showing how to create a simple build system with a circular UI (&lt;a href=&quot;https://www.youtube.com/watch?v=tKmsMfoPTC0&quot;&gt;Building System and Circular UI in Unity&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sirawat Pitaksarit&lt;/strong&gt; wrote a article about Unity Timeline, Playables and the undocumented new feature &lt;code class=&quot;highlighter-rouge&quot;&gt;Marker&lt;/code&gt; (&lt;a href=&quot;https://gametorrahod.com/timeline-marker-and-everything-leading-up-to-it/&quot;&gt;Timeline marker and everything leading up to it&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;New in Unity 2019.1, you can now create a duration-less object on the timeline, the marker.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Eduardo Oriz and Alitt Khaliq&lt;/strong&gt; made a post about the high-end asset pack &lt;code class=&quot;highlighter-rouge&quot;&gt;Buried Memories Vollume 2: Sereckh&lt;/code&gt; (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/07/introducing-serekh-new-asset-pack-buried-memories-volume-2&quot;&gt;Introducing Serekh: New asset pack, Buried Memories Volume 2&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;The Unity Icon Collective strives to democratize high-end asset production. With Buried Memories, starting with Volume 1: Yggdrasil, we hope to inspire creators to extend their own universe but especially to guide aspiring artists and others to observe, analyze and learn from the techniques of industry veterans.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="unity3d" /><category term="gamedev" /><summary type="html"></summary></entry><entry><title type="html">Easing2Curve&amp;amp;colon; An editor window to create animation curve from easing functions</title><link href="http://diegogiacomelli.com.br/easing-2-curve-an-editor-window-to-create-animation-curve-from-easing-functions/" rel="alternate" type="text/html" title="Easing2Curve&amp;colon; An editor window to create animation curve from easing functions" /><published>2019-06-07T00:00:00-03:00</published><updated>2019-06-07T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/easing-2-curve-an-editor-window-to-create-animation-curve-from-easing-functions</id><content type="html" xml:base="http://diegogiacomelli.com.br/easing-2-curve-an-editor-window-to-create-animation-curve-from-easing-functions/">&lt;p&gt;I’ve coded an &lt;a href=&quot;https://docs.unity3d.com/Manual/editor-EditorWindows.html&quot;&gt;EditorWindow&lt;/a&gt; to create an &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/AnimationCurve.html&quot;&gt;AnimationCurve&lt;/a&gt; using easing functions that define how much a value changes over time.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;There are many classic easing functions, such as: InQuad, OutElastic, InOutSin, and InOutBounce. All of these are functions that have a &lt;code class=&quot;highlighter-rouge&quot;&gt;time&lt;/code&gt; input parameter and a return value between 0 and 1 that.&lt;/p&gt;

&lt;p&gt;For example, the easing function &lt;code class=&quot;highlighter-rouge&quot;&gt;OutCirc&lt;/code&gt; is coded like:&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Easing2Curve&lt;/code&gt; editor window you can see 31 easing function availables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Linear&lt;/li&gt;
  &lt;li&gt;InQuad, OutQuad, InOutQuad&lt;/li&gt;
  &lt;li&gt;InCubic, OutCubic, InOutCubic&lt;/li&gt;
  &lt;li&gt;InQuart, OutQuart, InOutQuart&lt;/li&gt;
  &lt;li&gt;InQuint, OutQuint, InOutQuint&lt;/li&gt;
  &lt;li&gt;InElastic, OutElastic, InOutElastic&lt;/li&gt;
  &lt;li&gt;InSin, OutSin, InOutSin&lt;/li&gt;
  &lt;li&gt;InExpo, OutExpo, InOutExpo&lt;/li&gt;
  &lt;li&gt;InCirc, OutCirc, InOutCirc&lt;/li&gt;
  &lt;li&gt;InBack, OutBack, InOutBack&lt;/li&gt;
  &lt;li&gt;InBounce, OutBounce and InOutBounce.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, you can add new easing functions just implementing the &lt;code class=&quot;highlighter-rouge&quot;&gt;IEasing&lt;/code&gt; interface.&lt;/p&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;
&lt;p&gt;To setup the &lt;code class=&quot;highlighter-rouge&quot;&gt;Easing2Curve&lt;/code&gt; just download this &lt;a href=&quot;https://gist.github.com/giacomelli/7324d63679c11529e1710a5470d9ee7f&quot;&gt;gist&lt;/a&gt; and unzip it on an &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder inside your Unity project.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/7324d63679c11529e1710a5470d9ee7f.js?file=Easing2CurveEditorWindow.cs&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;using&quot;&gt;Using&lt;/h2&gt;
&lt;p&gt;You can open the window through the context menu on any &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationCurve&lt;/code&gt; property on &lt;code class=&quot;highlighter-rouge&quot;&gt;Inspector&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the video below you can see how to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Easing2Curve&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/2W-g6-k74nc &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;</content><author><name></name></author><category term="unity3d" /><category term="editor-window" /><category term="animation-curve" /><category term="gamedev" /><category term="open-source" /><category term="gist" /><summary type="html">I’ve coded an EditorWindow to create an AnimationCurve using easing functions that define how much a value changes over time.</summary></entry><entry><title type="html">Evolution (or from prototype to game)</title><link href="http://diegogiacomelli.com.br/evolution-or-from-prototype-to-game/" rel="alternate" type="text/html" title="Evolution (or from prototype to game)" /><published>2019-06-06T00:00:00-03:00</published><updated>2019-06-06T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/evolution-or-from-prototype-to-game</id><content type="html" xml:base="http://diegogiacomelli.com.br/evolution-or-from-prototype-to-game/">&lt;h1 id=&quot;the-importance-of-game-prototype&quot;&gt;The importance of game prototype&lt;/h1&gt;
&lt;p&gt;Several famous books and game designers cite how the prototyping phase of a new game project is an important time to &lt;strong&gt;lay out the foundations that will guide the whole game structure&lt;/strong&gt; during its development project and, as well, to experiment with concepts and ideas of quick and unassuming way.&lt;/p&gt;

&lt;p&gt;The prototyping phase, although important, often takes a small percentage in the development time of a game project or in some cases is not part of the project itself, but rather a point prior to that, where we are seeking the idea or concept that will give birth to the new project.&lt;/p&gt;

&lt;h1 id=&quot;transposing-the-fog&quot;&gt;Transposing the fog&lt;/h1&gt;
&lt;p&gt;I always find it interesting to &lt;strong&gt;compare when an idea is born, or has its first steps, with its final result&lt;/strong&gt;, because when we are at the beginning of any project or journey, the path may seem hazy and maybe it will become clear only when we manage to transpose the fog which separates the persevering from those who prefer to fear it.&lt;/p&gt;

&lt;p&gt;For this reason I present the screenshots to &lt;strong&gt;compare Ships N ‘Battles in its prototype&lt;/strong&gt; phase, which, incidentally, at that stage did not have a name, only its project name “iBattleships”;) , &lt;strong&gt;with the final result of its HD version for iOS devices&lt;/strong&gt; with armv7 and retina display, that is, after letting the fog of this project back.&lt;/p&gt;

&lt;h1 id=&quot;prototype-x-final-product&quot;&gt;Prototype x final product&lt;/h1&gt;
&lt;p&gt;So we have below the screenshots of the main menu, deploy ships, aim and view the player’s ships, for the first functional prototype version running on Windows and the HD edition version running on an iPad 2:&lt;/p&gt;

&lt;center&gt;
  
  &lt;ul id=&quot;lightSlider&quot;&gt;
    
        &lt;li data-thumb=&quot;/assets/2019/06/06/evolution-or-from-prototype-to-game/01_prototype_menu2.png&quot;&gt;
          &lt;img class=&quot;lazy&quot; src=&quot;/assets/loading-image.png&quot; data-src=&quot;/assets/2019/06/06/evolution-or-from-prototype-to-game/01_prototype_menu2.png&quot; alt=&quot;Screenshot do post&quot; /&gt;        
        &lt;/li&gt;
    
        &lt;li data-thumb=&quot;/assets/2019/06/06/evolution-or-from-prototype-to-game/02_hd_menu2.png&quot;&gt;
          &lt;img class=&quot;lazy&quot; src=&quot;/assets/loading-image.png&quot; data-src=&quot;/assets/2019/06/06/evolution-or-from-prototype-to-game/02_hd_menu2.png&quot; alt=&quot;Screenshot do post&quot; /&gt;        
        &lt;/li&gt;
    
        &lt;li data-thumb=&quot;/assets/2019/06/06/evolution-or-from-prototype-to-game/03_prototype_deploy.png&quot;&gt;
          &lt;img class=&quot;lazy&quot; src=&quot;/assets/loading-image.png&quot; data-src=&quot;/assets/2019/06/06/evolution-or-from-prototype-to-game/03_prototype_deploy.png&quot; alt=&quot;Screenshot do post&quot; /&gt;        
        &lt;/li&gt;
    
        &lt;li data-thumb=&quot;/assets/2019/06/06/evolution-or-from-prototype-to-game/04_hd_deploy.png&quot;&gt;
          &lt;img class=&quot;lazy&quot; src=&quot;/assets/loading-image.png&quot; data-src=&quot;/assets/2019/06/06/evolution-or-from-prototype-to-game/04_hd_deploy.png&quot; alt=&quot;Screenshot do post&quot; /&gt;        
        &lt;/li&gt;
    
        &lt;li data-thumb=&quot;/assets/2019/06/06/evolution-or-from-prototype-to-game/05_prototype_aim.png&quot;&gt;
          &lt;img class=&quot;lazy&quot; src=&quot;/assets/loading-image.png&quot; data-src=&quot;/assets/2019/06/06/evolution-or-from-prototype-to-game/05_prototype_aim.png&quot; alt=&quot;Screenshot do post&quot; /&gt;        
        &lt;/li&gt;
    
        &lt;li data-thumb=&quot;/assets/2019/06/06/evolution-or-from-prototype-to-game/06_hd_aim.png&quot;&gt;
          &lt;img class=&quot;lazy&quot; src=&quot;/assets/loading-image.png&quot; data-src=&quot;/assets/2019/06/06/evolution-or-from-prototype-to-game/06_hd_aim.png&quot; alt=&quot;Screenshot do post&quot; /&gt;        
        &lt;/li&gt;
    
        &lt;li data-thumb=&quot;/assets/2019/06/06/evolution-or-from-prototype-to-game/07_prototype_myShips.png&quot;&gt;
          &lt;img class=&quot;lazy&quot; src=&quot;/assets/loading-image.png&quot; data-src=&quot;/assets/2019/06/06/evolution-or-from-prototype-to-game/07_prototype_myShips.png&quot; alt=&quot;Screenshot do post&quot; /&gt;        
        &lt;/li&gt;
    
        &lt;li data-thumb=&quot;/assets/2019/06/06/evolution-or-from-prototype-to-game/08_hd_myShips.png&quot;&gt;
          &lt;img class=&quot;lazy&quot; src=&quot;/assets/loading-image.png&quot; data-src=&quot;/assets/2019/06/06/evolution-or-from-prototype-to-game/08_hd_myShips.png&quot; alt=&quot;Screenshot do post&quot; /&gt;        
        &lt;/li&gt;
    
  &lt;/ul&gt;
  
 &lt;/center&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
var initialized = false;

$(document).ready(function() {
  var inview = new Waypoint.Inview({
    element: document.getElementById('lightSlider'),
    enter: function(direction) {
      initializeGallery();
    }
  });
});

function initializeGallery() {
  if(initialized) return;
  
  initialized = true;

  $('#lightSlider').lightSlider({
    gallery: true,
    pager: true,
    controls: false,
    thumbItem: 8,
    item: 1,
    loop: false,
    slideMargin: 0,
    autoWidth: true,
    adaptiveHeight: true,
    mode: &quot;fade&quot;,
    useCSS: true,
    cssEasing: 'ease',
    easing: 'linear'
  });
}
&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are only two mistakes one can make along the road to truth; not going all the way, and not starting. (Buddha)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;This is an old post that I made years ago on &lt;a href=&quot;http://skahal.github.io&quot;&gt;Skahal&lt;/a&gt;’s blog, as the subject still relevant, I reposted it here.&lt;/p&gt;
&lt;/div&gt;</content><author><name></name></author><category term="gamedev" /><category term="game-design" /><category term="motivation" /><summary type="html">The importance of game prototype Several famous books and game designers cite how the prototyping phase of a new game project is an important time to lay out the foundations that will guide the whole game structure during its development project and, as well, to experiment with concepts and ideas of quick and unassuming way.</summary></entry><entry><title type="html">GeneticSharp in the Wild&amp;amp;colon; AeroVision - Aircraft Trajectories Optimization and Visualization</title><link href="http://diegogiacomelli.com.br/geneticsharp-in-the-wild-aerovision-aircraft-trajectories-optimization-and-visualization/" rel="alternate" type="text/html" title="GeneticSharp in the Wild&amp;colon; AeroVision - Aircraft Trajectories Optimization and Visualization" /><published>2019-06-05T00:00:00-03:00</published><updated>2019-06-05T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/geneticsharp-in-the-wild-aerovision-aircraft-trajectories-optimization-and-visualization</id><content type="html" xml:base="http://diegogiacomelli.com.br/geneticsharp-in-the-wild-aerovision-aircraft-trajectories-optimization-and-visualization/">&lt;p&gt;I decided to start a series of posts about some outstanding scientific papers and projects using GeneticSharp.&lt;/p&gt;

&lt;p&gt;For this first post the choose one is the &lt;code class=&quot;highlighter-rouge&quot;&gt;AeroVision - Aircraft Trajectories Optimization and Visualization&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The main motivation of the authors about the AeroVision was:
&lt;em&gt;build program that represents an innovative and efficient way to
minimize and visualize aircraft noise along simulated and real flight routes. There are no existing programs that offer both optimization and visualization of aircraft noise.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;To optimize aircraft trajectories using a genetic algorithm, AeroVision uses the &lt;a href=&quot;https://github.com/giacomelli/geneticsharp&quot;&gt;GeneticSharp&lt;/a&gt; library, which is a fast, extensible, multi-platform and multithreading C# Genetic Algorithm library that simplifies the development of applications using Genetic Algorithms.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The library supports a number of selection methods, of which the most basic option (elite selection) is recommended. The mutation method used by AeroVision is crossover, which is a commonly used setting. The stop criteria can be a fixed number of generations, which can be specified by the user.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Additionally, the user is free to define the number of chromosomes that are part of one population. The default population size is 70 chromosomes, each representing a possible trajectory in our case.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;results&quot;&gt;Results&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;For trajectory optimization we were able to achieve a &lt;code class=&quot;highlighter-rouge&quot;&gt;performance improvement of 84%&lt;/code&gt; by using a &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/wiki/multithreading&quot;&gt;multi-core and multi-threaded genetic algorithm&lt;/a&gt; based on &lt;a href=&quot;https://github.com/giacomelli/GeneticSharp/wiki/crossovers&quot;&gt;crossover operations&lt;/a&gt;. This led to a major improvement on the workﬂow management and automation&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;authors&quot;&gt;Authors&lt;/h1&gt;
&lt;p&gt;Elvan Kula and Hans Schouten wrote the paper as equirements for their degree of Bachelor of Science in Computer Science. The Dr. Ir. N. Dintzner (TU Delft, supervisor), Dr. ir. S. Hartjes (Client) and Dr. ir. M. Larson (Bachelor Project Coordinator) are the thesis committee.&lt;/p&gt;

&lt;h1 id=&quot;further-reading&quot;&gt;Further reading&lt;/h1&gt;
&lt;p&gt;You can access the full paper directly on &lt;a href=&quot;http://resolver.tudelft.nl/uuid:91c8261d-a5f2-414a-9b83-2e0d6ad5b37f&quot;&gt;TUDelft library repository&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="geneticsharp" /><category term="geneticsharp-in-the-wild" /><summary type="html">I decided to start a series of posts about some outstanding scientific papers and projects using GeneticSharp.</summary></entry><entry><title type="html">Using a Sprite Mask to create a flashlight effect</title><link href="http://diegogiacomelli.com.br/using-a-sprite-mask-to-create-a-flashlight-effect/" rel="alternate" type="text/html" title="Using a Sprite Mask to create a flashlight effect" /><published>2019-06-04T00:00:00-03:00</published><updated>2019-06-04T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/using-a-sprite-mask-to-create-a-flashlight-effect</id><content type="html" xml:base="http://diegogiacomelli.com.br/using-a-sprite-mask-to-create-a-flashlight-effect/">&lt;p&gt;When I was reading about the &lt;a href=&quot;https://docs.unity3d.com/Manual/class-SpriteMask.html&quot;&gt;Sprite Mask&lt;/a&gt; on Unity Manual, I questioned my self &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;How long does it take to create a flashlight effect using the Sprite Mask?&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The answer is: &lt;code class=&quot;highlighter-rouge&quot;&gt;less than 2 minutes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can check this by watching the video tutorial that I made showing how to add the a flashlight effect to the &lt;a href=&quot;https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-roguelike-29825&quot;&gt;Unity 2D Roguelike sample project&lt;/a&gt;:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/EfXLi6AWc_4 &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;</content><author><name></name></author><category term="unity3d" /><category term="unitytips" /><category term="sprite-mask" /><category term="gamedev" /><summary type="html">When I was reading about the Sprite Mask on Unity Manual, I questioned my self &quot;How long does it take to create a flashlight effect using the Sprite Mask?&quot;.</summary></entry><entry><title type="html">Unity and Game Development links (June 3th 2019)</title><link href="http://diegogiacomelli.com.br/unity-and-gamedev-links-june-3th-2019/" rel="alternate" type="text/html" title="Unity and Game Development links (June 3th 2019)" /><published>2019-06-03T00:00:00-03:00</published><updated>2019-06-03T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-and-gamedev-links-june-3th-2019</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-and-gamedev-links-june-3th-2019/">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Nick Davis&lt;/strong&gt; wrote a post about how Unity recently teamed up with Autodesk and Texel Logic to create a mixed-reality experience to illustrate and understand the complex nature of airflow passing over and around an IndyCar (&lt;a href=&quot;https://blogs.unity3d.com/2019/05/24/simulating-high-speed-indycars-in-ar/&quot;&gt;Simulating high-speed IndyCars in AR&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sykoo&lt;/strong&gt;, online evangelist for Unity, published a video showing his techniques during the level design process (&lt;a href=&quot;https://www.youtube.com/watch?v=oKzX-wS4_so&quot;&gt;How I made a Village in Unity in 1 Hour!&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Joyce[MinionsArt]&lt;/strong&gt; released another shader tutorial on Twitter (&lt;a href=&quot;https://twitter.com/minionsart/status/1132593681452683264&quot;&gt;Using particle lifetime to create a fire system&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Keen Claassen&lt;/strong&gt; celebrated the enter of &lt;code class=&quot;highlighter-rouge&quot;&gt;Motion Matching for Unity&lt;/code&gt; on Asset Store (&lt;a href=&quot;https://www.youtube.com/watch?v=hiWvExOyBgQ&quot;&gt;Motion Matching for Unity (MxM) - Trailer&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;can produce highly fluid and responsive animations with the need for state machines or complex logic.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Chandra Foxglove&lt;/strong&gt; introduced the Terrain Tools package (preview) for Unity 2019.1 (&lt;a href=&quot;https://blogs.unity3d.com/2019/05/28/speed-up-your-work-with-the-new-terrain-tools-package&quot;&gt;Speed up your work with the new Terrain Tools Package&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;This package contains over 15 new sculpting tools, as well as a utility toolbox to streamline terrain workflow.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Making of The Heretic: Digital Humans and VFX Characters&lt;/strong&gt; is available through a &lt;a href=&quot;https://docs.google.com/presentation/d/1aiBXsNu-D9ZfpBNqcs08w7ToNJ2e7jgyoyfNUXSCWW8/edit#slide=id.g552bb7139f_6_1117&quot;&gt;Google Docs presentation&lt;/a&gt;.
    &lt;blockquote&gt;
      &lt;p&gt;Now the HD Render Pipeline and Post Processing are quite solid, and we were able to put much more effort into building on top of that foundation. Among other things, we put some effort into human faces and vfx-heavy characters.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The evangelist &lt;strong&gt;Keijiro Takahashi&lt;/strong&gt; released a GitHub repository with an example that shows how to connect RealSense depth camera to Unity VFX Graph (&lt;a href=&quot;https://github.com/keijiro/Rsvfx&quot;&gt;Rsvfx&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Martin Best&lt;/strong&gt; posted about the official Unity Editor for Linux (&lt;a href=&quot;&quot;&gt;Announcing the Unity Editor for Linux&lt;/a&gt;).
    &lt;blockquote&gt;
      &lt;p&gt;We expect it to be fully supported by Unity 2019.3.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Anis Benyoub&lt;/strong&gt; wrote about &lt;a href=&quot;https://auzaiffe.files.wordpress.com/2019/05/digital-dragons-leveraging-ray-tracing-hardware-acceleration-in-unity.pdf&quot;&gt;Leveraging Ray Tracing
Hardware Acceleration
In Unity&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Elena Nizhnik&lt;/strong&gt; made a post listing the most outstanding #madewithunity projects from last days (&lt;a href=&quot;https://blogs.unity3d.com/2019/06/01/community-component-soft-body-physics-shaders-that-deform-space-normans-island-and-our-steam-wishlist&quot;&gt;Community Component – Soft body physics, shaders that deform space, Norman’s Island and our Steam wishlist&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sykoo&lt;/strong&gt; again, now with a video tutorial about the new 2D lights in Unity  2019.2 (&lt;a href=&quot;https://www.youtube.com/watch?v=ZJvCphxCGJU&quot;&gt;NEW 2D LIGHTS IN UNITY 2019.2&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="unity3d" /><category term="gamedev" /><summary type="html">Nick Davis wrote a post about how Unity recently teamed up with Autodesk and Texel Logic to create a mixed-reality experience to illustrate and understand the complex nature of airflow passing over and around an IndyCar (Simulating high-speed IndyCars in AR).</summary></entry><entry><title type="html">Using an AssetPostprocessor + EditorWindow to keep assets organized on Unity projects</title><link href="http://diegogiacomelli.com.br/using-an-assetpostprocessor-editorwindow-to-keep-assets-organized-on-unity-projects/" rel="alternate" type="text/html" title="Using an AssetPostprocessor + EditorWindow to keep assets organized on Unity projects" /><published>2019-05-31T00:00:00-03:00</published><updated>2019-05-31T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/using-an-assetpostprocessor-editorwindow-to-keep-assets-organized-on-unity-projects</id><content type="html" xml:base="http://diegogiacomelli.com.br/using-an-assetpostprocessor-editorwindow-to-keep-assets-organized-on-unity-projects/">&lt;p&gt;I created an AssetPostProcessor and an EditorWindow to validate if assets are in the right folder and help the Unity projects to keep organized.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;There are many ways to structure folders in a Unity project, but most common ones are cited by the Unity Learn tutorial: &lt;a href=&quot;https://unity3d.com/pt/learn/tutorials/topics/tips/large-project-organisation&quot;&gt;Large Project Organisation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To keep the project easy to navigate, avoid placing files in the root Assets folder. Use subfolders. How you organize those subfolders is generally decided by your projects but the two main ways to do it are:&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;A folder for each type of asset and subfolders in them per objects&lt;/strong&gt;, zones (For example Assets/Materials, Assets/Prefabs, with subfolders Assets/Material/Level1 or Assets/Prefabs/Enemies)&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;A folder per objects or zones&lt;/strong&gt; (Such as Assets/Level1/Enemies/Archer, Assets/Shared/UI, Assets/Forest/Trees) with all assets related to those in the folders (Assets/Forest/Trees/BigTree.fbx, Assets/Forest/Trees/Tree.mat, Assets/Forest/Trees/Tree_Bark.jpg).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With big teams or even with the small ones is easy that some assets will be placed in wrong folders. To help to identify and keep those projects folders organized I coded a couple of editor scripts that I called &lt;code class=&quot;highlighter-rouge&quot;&gt;Folder organizer&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Another advantage of keeping assets organized in their proper folders is that you can &lt;a href=&quot;https://docs.unity3d.com/Manual/DefaultPresetsByFolder.html&quot;&gt;apply defaults presets to assets by folder&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;
&lt;p&gt;To setup the &lt;code class=&quot;highlighter-rouge&quot;&gt;Folder organizer&lt;/code&gt; just download this &lt;a href=&quot;https://gist.github.com/giacomelli/2d561e29beadab641a4f8b56954f53f7&quot;&gt;gist&lt;/a&gt; and unzip it on an &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder inside your Unity project.&lt;/p&gt;

&lt;h2 id=&quot;using&quot;&gt;Using&lt;/h2&gt;
&lt;p&gt;You can open the window through the menu &lt;code class=&quot;highlighter-rouge&quot;&gt;Window / Folder organizer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Just configure the folders to ignore, if should run the validation every time an asset is imported and defined a regular expression to find the assets and what is the expected folder.&lt;/p&gt;

&lt;p&gt;In the video below you can see in more details how to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Folder organizer&lt;/code&gt; to validate if your assets are in the right folders:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/GU6jWl6MpdM &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;</content><author><name></name></author><category term="unity3d" /><category term="editor-window" /><category term="asset-post-processor" /><category term="gamedev" /><category term="open-source" /><summary type="html">I created an AssetPostProcessor and an EditorWindow to validate if assets are in the right folder and help the Unity projects to keep organized.</summary></entry><entry><title type="html">Coding an EditorWindow to create default animations from sprites</title><link href="http://diegogiacomelli.com.br/coding-an-editorwindow-to-create-default-animations-from-sprites/" rel="alternate" type="text/html" title="Coding an EditorWindow to create default animations from sprites" /><published>2019-05-30T00:00:00-03:00</published><updated>2019-05-30T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/coding-an-editorwindow-to-create-default-animations-from-sprites</id><content type="html" xml:base="http://diegogiacomelli.com.br/coding-an-editorwindow-to-create-default-animations-from-sprites/">&lt;p&gt;In this tutorial, we will learn how to coding an &lt;a href=&quot;https://docs.unity3d.com/Manual/editor-EditorWindows.html&quot;&gt;EditorWindow&lt;/a&gt; that creates &lt;a href=&quot;https://docs.unity3d.com/Manual/AnimationClips.html&quot;&gt;Animation Clips&lt;/a&gt; and &lt;a href=&quot;https://docs.unity3d.com/Manual/AnimatorOverrideController.html&quot;&gt;Animator Override Controller&lt;/a&gt; from &lt;a href=&quot;https://docs.unity3d.com/Manual/Sprites.html&quot;&gt;Sprites&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Create animation clips from sprites is quite a simple operation to perform on Unity:&lt;/p&gt;
&lt;center&gt;&lt;video width=&quot;640&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot;&gt;
          &lt;source src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/create-animation-clip-from-sprite.mp4 &quot; type=&quot;video/mp4&quot; /&gt;
          Your browser does not support the video tag.
       &lt;/video&gt;&lt;/center&gt;

&lt;p&gt;But in many cases, you need to repeat this operation over and over again to create other animations to the same character, like clips for idle, walk up, walk down and walk horizontal animations.&lt;/p&gt;

&lt;p&gt;When you need to this for only one character, there is no problem, but imagine you need to create the same 4 animation clip for dozens (maybe hundreds) of characters. Besides being a boring operation, you probably will make some mistake and creating some wrong clip. In cases like that, could be a good option to create your own EditorWindow to automate those operations.&lt;/p&gt;

&lt;h2 id=&quot;editorwindow&quot;&gt;EditorWindow&lt;/h2&gt;
&lt;p&gt;To start, let’s see what Unity Manual says about &lt;a href=&quot;https://docs.unity3d.com/Manual/editor-EditorWindows.html&quot;&gt;EditorWindow&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can create any number of custom windows in your app. These behave just like the Inspector, Scene or any other built-in ones. This is a great way to add a user interface to a sub-system for your game.&lt;/p&gt;

  &lt;p&gt;Making a custom Editor Window involves the following simple steps:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Create a script that derives from EditorWindow.&lt;/li&gt;
    &lt;li&gt;Use code to trigger the window to display itself.&lt;/li&gt;
    &lt;li&gt;Implement the GUI code for your tool.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;During this tutorial we will create a class called DefaultAnimationsEditorWindow that derives from EditorWindow, we will add a menu item to Unity Editor to allow call our EditorWindow and we will implement the GUI for the window.&lt;/p&gt;

&lt;p&gt;Furthermore, we will implement the code that allows us to create Animation Clips and Animation Override Controller from sprites.&lt;/p&gt;

&lt;p&gt;The idea behind DefaultAnimationsEditorWindow is that when you have a bunch o characters using the same kind of animations, they used the same structure of sprite sheets, so you can create the animations based on the sprites indexes on sprite sheet texture.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/similar-spritesheets.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;similar sprites sheets from Phantasy Star IV (Alys, Chaz and Demi). Sprites ripped by Ultimecia from &lt;a href=&quot;https://www.spriters-resource.com/genesis_32x_scd/ps4&quot;&gt;The Spriters Resource&lt;/a&gt;&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Starting with sprite to walk down and ending with the last sprite of walk horizontal, we have 9 sprites and in all sprite sheets the sprites indexes are the same:&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/alys-walking-spritesheet.png &quot; /&gt;
      &lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;Idle: index 1&lt;/li&gt;
  &lt;li&gt;Walk down: indexes 0, 1 and 2.&lt;/li&gt;
  &lt;li&gt;Walk up: indexes 3, 4 and 5.&lt;/li&gt;
  &lt;li&gt;Walk horizontal: indexes 6, 7 and 9.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;starter-project&quot;&gt;Starter project&lt;/h2&gt;
&lt;center&gt;
      &lt;img class=&quot;lazy&quot; src=&quot;/assets/logos/project.png&quot; /&gt;
      &lt;/center&gt;

&lt;p&gt;All the source code and assets for this tutorial are available on this GitHub repository: &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites&quot;&gt;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites&lt;/a&gt;. To start the tutorial you need to fork, clone or download the repository.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;default-animations-editor-window-starter&lt;/code&gt; on Unity.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;This starter project has an initial setup and assets to allow us to focus on the learning about how to code the EditorWindow.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Open the scene &lt;code class=&quot;highlighter-rouge&quot;&gt;_Tutorial/Scenes/TutorialScene&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Play&lt;/code&gt; button. You should see a screen like this:&lt;/p&gt;

&lt;center&gt;&lt;video width=&quot;640&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot;&gt;
          &lt;source src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/starter-project-play-mode.mp4 &quot; type=&quot;video/mp4&quot; /&gt;
          Your browser does not support the video tag.
       &lt;/video&gt;&lt;/center&gt;

&lt;h2 id=&quot;the-editor-window-code-organization&quot;&gt;The editor window code organization&lt;/h2&gt;

&lt;p&gt;We will organize our DefaultAnimationsEditorWindow in 3 main classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DefaultAnimationsEditorWindow&lt;/strong&gt;: where is the menu and GUI for our editor window.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DefaultAnimationsSettings&lt;/strong&gt;: this is our &lt;a href=&quot;https://docs.unity3d.com/Manual/class-ScriptableObject.html&quot;&gt;ScriptableObject&lt;/a&gt; to save our settings defined on DefaultAnimationsEditorWindow.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DefaultAnimationsUtility&lt;/strong&gt;: here we will implement the code used by our DefaultAnimationsEditorWindow to perform an operation. Put the operation code in a separated class not bounded by the GUI allow us to use these operations in any other script. This way to work is similar to what Unity itself use in some editor operations, like: &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/AnimationUtility.html&quot;&gt;AnimationUtility&lt;/a&gt;, &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/PrefabUtility.html&quot;&gt;PrefabUtility&lt;/a&gt; and &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Sprites.SpriteUtility.html&quot;&gt;SpriteUtility&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Besides the above classes, there are some other extension method classes on the folder &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites/tree/master/default-animations-editor-window-complete/Assets/_Tutorial/Editor/DefaultAnimations/Extensions&quot;&gt;Extensions&lt;/a&gt; that are self-explanatory and I won’t talk in details, but you can check them and read their code documentation to a better understanding.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;defaultanimationseditorwindow&quot;&gt;DefaultAnimationsEditorWindow&lt;/h2&gt;
&lt;p&gt;In the code bellow, we define the menu for the window through the method &lt;code class=&quot;highlighter-rouge&quot;&gt;ShowWindow&lt;/code&gt; and the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;MenuItem&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/menu-item.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;Default Animations menu item&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;At the &lt;code class=&quot;highlighter-rouge&quot;&gt;OnEnable&lt;/code&gt; we read the settings from our ScriptableObject DefaultAnimationsSettings.&lt;/p&gt;

&lt;p&gt;The next 3 methods just draw the components to the editor window GUI.&lt;/p&gt;
&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/30/coding-an-editorwindow-to-create-default-animations-from-sprites/editor-window-empty.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;editor window&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;Open &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites/blob/master/default-animations-editor-window-complete/Assets/_Tutorial/Editor/DefaultAnimations/DefaultAnimationsEditorWindow.cs &quot;&gt;DefaultAnimationsEditorWindow.cs &lt;/a&gt;hosted with ❤ by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;defaultanimationssettings&quot;&gt;DefaultAnimationsSettings&lt;/h2&gt;
&lt;p&gt;There are few things to talk about this class because it is just an ordinary ScriptableObject with a couple of properties that will be serialized and used by the DefaultAnimationsUtility class, a singleton to make easier to access the settings, two methods to load/create the asset and a subclass to sprite mappings.&lt;/p&gt;

&lt;p&gt;The most important code of this class is the property &lt;code class=&quot;highlighter-rouge&quot;&gt;SpriteIndexes&lt;/code&gt; that figure out what are the sprite indexes from the sprite sheet that ClipToOverride is using.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;SpriteIndexes will be used by DefaultAnimationsUtility.CreateAnimationClips to know what sprites should be used to create the new animations based on the DefaultAnimationsSettings.AnimationsMapping.&lt;/p&gt;
&lt;/div&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;Open &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites/blob/master/default-animations-editor-window-complete/Assets/_Tutorial/Editor/DefaultAnimations/DefaultAnimationsSettings.cs &quot;&gt;DefaultAnimationsSettings.cs &lt;/a&gt;hosted with ❤ by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;defaultanimationsutility&quot;&gt;DefaultAnimationsUtility&lt;/h2&gt;
&lt;p&gt;In this class is where the heart of our editor window resides.&lt;/p&gt;

&lt;p&gt;There are 2 important methods here: CreateAnimationClips and CreateAnimatorOverride.&lt;/p&gt;

&lt;h3 id=&quot;createanimationclips&quot;&gt;CreateAnimationClips&lt;/h3&gt;
&lt;p&gt;It iterates through the &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationsMappings&lt;/code&gt; defined in the editor window (saved on DefaultAnimationsSettings.AnimationsMapping), for each mapping it will call the method &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateAnimationClip&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateAnimationClip&lt;/code&gt; creates a new &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationClip&lt;/code&gt; (or load if already exists one with the same name), copying the frame rate and wrap mode from the &lt;code class=&quot;highlighter-rouge&quot;&gt;ClipToOverride&lt;/code&gt; defined in the mapping. After, if wrap mode is a loop, it uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationUtility&lt;/code&gt; to set the loop time to the clip settings (through the extension methods).&lt;/p&gt;

&lt;p&gt;Now is the most tricky part of this class, we need to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;EditorCurveBinding&lt;/code&gt; for the sprite and get the &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectReferenceKeyframe&lt;/code&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;ClipToOverride&lt;/code&gt; and create new &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectReferenceKeyframe&lt;/code&gt; to our new keyframes (&lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationClipExtensions&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;createanimatoroverride&quot;&gt;CreateAnimatorOverride&lt;/h2&gt;
&lt;p&gt;In this method we create &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimatorOverrideController&lt;/code&gt; that will override each clip from the &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultAnimationsSettings.AnimatorController&lt;/code&gt; by the ClipToOverride of each mapping defined on &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultAnimationsSettings.AnimationsMapping&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;AnimatorOverrideControllerExtensions&lt;/code&gt;).&lt;/p&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;Open &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites/blob/master/default-animations-editor-window-complete/Assets/_Tutorial/Editor/DefaultAnimations/DefaultAnimationsUtility.cs &quot;&gt;DefaultAnimationsUtility.cs &lt;/a&gt;hosted with ❤ by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Copy &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites/tree/master/default-animations-editor-window-complete/Assets/_Tutorial/Editor&quot;&gt;this whole Editor folder&lt;/a&gt; to your &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/_Tutorial&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;this folder is available on your local clone of the repository inside the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;default-animations-editor-window-complete/Assets/_Tutorial&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Delete the DefaultAnimationsSettings scriptable object instance.&lt;/p&gt;

&lt;p&gt;Open the editor window on menu &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows / Default Animations&lt;/code&gt; and configure it as showing in the video below:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/5Hk8awWCtSs &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;creating-and-using-the-default-animations&quot;&gt;Creating and using the default animations&lt;/h2&gt;
&lt;p&gt;Drag all the sprite sheets (textures) from folder &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/_Tutorial/Sprites&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Spritesheets&lt;/code&gt; field and click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Create animations&lt;/code&gt; button:&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/49KKfR081Po &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;challenge&quot;&gt;Challenge&lt;/h2&gt;
&lt;p&gt;Try to change de editor window to allow more the one set of default animations. One way to this is by creating another ScriptableObject to save the current selected &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultAnimationsSettings&lt;/code&gt; asset.&lt;/p&gt;

&lt;p&gt;If you have any doubt how to implement any part of this challenge, feel free to ask on this post comments or &lt;a href=&quot;about&quot;&gt;send me a message&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/giacomelli/coding-an-editorwindow-to-create-default-animations-from-sprites&quot;&gt;tutorial repository&lt;/a&gt; has two main folders:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;default-animations-editor-window-starter&lt;/strong&gt;: the one you used to make this tutorial.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;default-animations-editor-window-complete&lt;/strong&gt;: the whole solution with all scripts and assets implemented. Use this one, in case you get stuck in any item on the challenge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this tutorial, we learned how to coding a custom editor window to create a set of default animation clips and animator override controller.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt; and &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="unity3d" /><category term="editor-window" /><category term="animation-clip" /><category term="animator-override-controller" /><category term="gamedev" /><category term="open-source" /><summary type="html">In this tutorial, we will learn how to coding an EditorWindow that creates Animation Clips and Animator Override Controller from Sprites.</summary></entry><entry><title type="html">Publishing WebJobs with Azure Pipelines</title><link href="http://diegogiacomelli.com.br/publishing-webjobs-with-azure-pipelines/" rel="alternate" type="text/html" title="Publishing WebJobs with Azure Pipelines" /><published>2019-05-29T00:00:00-03:00</published><updated>2019-05-29T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/publishing-webjobs-with-azure-pipelines</id><content type="html" xml:base="http://diegogiacomelli.com.br/publishing-webjobs-with-azure-pipelines/">&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-US/azure/app-service/webjobs-sdk-get-started&quot;&gt;Azure WebJobs&lt;/a&gt; are a great way to execute background process.&lt;/p&gt;

&lt;h1 id=&quot;scenario&quot;&gt;Scenario&lt;/h1&gt;
&lt;p&gt;In last days I’ve created a &lt;a href=&quot;https://azure.microsoft.com/pt-br/services/devops/pipelines/&quot;&gt;Azure Pipelines&lt;/a&gt; that publish WebJobs, but in our specific case our WebJobs were not being published to &lt;code class=&quot;highlighter-rouge&quot;&gt;/site/wwwroot/App_Data/jobs/Continuous/&amp;lt;webjobs name&amp;gt;&lt;/code&gt;, because “reasons” our root web app is using ‘/site/www’ as folder. So, you should expect that the new folder to deploy WebJobs is &lt;code class=&quot;highlighter-rouge&quot;&gt;/site/www/App_Data/jobs/Continuous/&amp;lt;webjobs name&amp;gt;&lt;/code&gt;, but &lt;code class=&quot;highlighter-rouge&quot;&gt;NO&lt;/code&gt;, the new folder is &lt;code class=&quot;highlighter-rouge&quot;&gt;/site/jobs/Continuous/&amp;lt;webjobs name&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The big problem with the above behaviour is that &lt;code class=&quot;highlighter-rouge&quot;&gt;WebDeploy&lt;/code&gt; via VS or  &lt;code class=&quot;highlighter-rouge&quot;&gt;AzureRmWebAppDeployment&lt;/code&gt; task via Azure Pipeline will still try to deploy the webjobs to the folder inside &lt;code class=&quot;highlighter-rouge&quot;&gt;/site/www/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;My best suspects are these lines on &lt;a href=&quot;https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureRmWebAppDeploymentV3/azurermwebappdeployment.ts#L73&quot;&gt;AzureRmWebAppDeployment@3&lt;/a&gt;&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/1d47b7bf7e9a2b3806dbd0b0332743d2.js?file=AzureRmWebAppDeployment-lines.ts&quot;&gt; &lt;/script&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;AzureRmWebAppDeployment&lt;/code&gt; just check the physical path configured on Azure when we defined a &lt;code class=&quot;highlighter-rouge&quot;&gt;VirtualApplicatoin&lt;/code&gt; parameter, but in our case it is not a virtual application, but it is a different folder than &lt;code class=&quot;highlighter-rouge&quot;&gt;/site/wwwroot/&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;externalref&quot;&gt;&lt;p&gt;in &lt;a href=&quot;https://github.com/projectkudu/kudu/wiki/WebJobs&quot;&gt;Kudu wiki&lt;/a&gt; there is some explanation about the webjobs folders.&lt;/p&gt;
&lt;/div&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;
&lt;p&gt;I used the FtpUpload task to publish the WebJobs binaries to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/site/jobs/Continuous/&amp;lt;webjobs name&amp;gt;&lt;/code&gt; and two instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;AzureAppServiceManage&lt;/code&gt; task to stop and start the jobs:&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;you’ll need to replace the values between &amp;lt;..&amp;gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;variables&lt;/code&gt; section to specific values of your project&lt;/p&gt;
&lt;/div&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/1d47b7bf7e9a2b3806dbd0b0332743d2.js?file=azure-pipelines.yml&quot;&gt; &lt;/script&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;I omitted some tasks from the original azure-pipelines.yml for simplicity. The original has a lot of others taks, as unit tests and web api publishing&lt;/p&gt;
&lt;/div&gt;

&lt;h1 id=&quot;extra-points-graceful-shutdown&quot;&gt;Extra points (graceful shutdown)&lt;/h1&gt;
&lt;p&gt;Now that you’ve automate your WebJobs publishing, is a good idea improve your jobs to check if Azure has requested a shutdown. You can do this taks through the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-dotnet-class-library#cancellation-tokens&quot;&gt;CancellationToken&lt;/a&gt; parameter passed to the job.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A function can accept a CancellationToken parameter, which enables the operating system to notify your code when the function is about to be terminated. You can use this notification to make sure the function doesn’t terminate unexpectedly in a way that leaves data in an inconsistent state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;further-reading&quot;&gt;Further reading&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/ftp-upload?view=azure-devops&quot;&gt;FTP Upload task&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-app-service-manage?view=azure-devops&quot;&gt;Azure App Service Manage task&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.amitapple.com/post/2014/05/webjobs-graceful-shutdown&quot;&gt;WebJobs Graceful Shutdown&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&amp;amp;tabs=schema&quot;&gt;YAML schema reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&amp;amp;tabs=yaml&quot;&gt;Predefined variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="dotnet" /><category term="azure" /><category term="webjobs" /><category term="azure-pipelines" /><category term="continuous-integration" /><summary type="html">Azure WebJobs are a great way to execute background process.</summary></entry><entry><title type="html">A Sorting Layer Debugger for Unity</title><link href="http://diegogiacomelli.com.br/a-sorting-layer-debugger-for-unity/" rel="alternate" type="text/html" title="A Sorting Layer Debugger for Unity" /><published>2019-05-28T00:00:00-03:00</published><updated>2019-05-28T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/a-sorting-layer-debugger-for-unity</id><content type="html" xml:base="http://diegogiacomelli.com.br/a-sorting-layer-debugger-for-unity/">&lt;p&gt;While I was reading about &lt;a href=&quot;https://docs.unity3d.com/Manual/2DSorting.html&quot;&gt;2D Sorting&lt;/a&gt; and &lt;a href=&quot;https://docs.unity3d.com/Manual/class-TagManager.html#SortingLayers&quot;&gt;Sorting Layers&lt;/a&gt; on Unity Manual I came up with the idea of creating a custom editor window to see which sorting layer the sprites on the scene are using.&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/e_WaZrGMPdM &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;In the video above you can see the Sorting Layer Debugger been used in the &lt;a href=&quot;https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-platformer-11228&quot;&gt;Unity 2D Platformer&lt;/a&gt; sample project&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Just download the gist bellow to your Unity3D project and add it inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/141742c3175476f03ca2437c7b35fd88.js?file=SortingLayerDebugger.cs&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;You can open the debugger window through the menu &lt;code class=&quot;highlighter-rouge&quot;&gt;Window / Sorting Layer Debugger&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The debugger can be enabled in the edit or the play mode and it will list the Sorting Layers and the number of game objects using each layer. You can hide/show the game objects of each layer by clicking on its check box.&lt;/p&gt;

&lt;p&gt;The name of Sorting Layer been used is showing in the top of each game object in the scene view.&lt;/p&gt;

&lt;center&gt;
        &lt;img class=&quot;lazy&quot; src=&quot;/assets/2019/05/28/a-sorting-layer-debugger-for-unity/SortingLayerDebugger.png &quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;Scene view with Sorting Layer Debugger enabled&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="unity3d" /><category term="unitytips" /><category term="sorting-layers" /><category term="2D" /><category term="editor-window" /><category term="gamedev" /><category term="open-source" /><summary type="html">While I was reading about 2D Sorting and Sorting Layers on Unity Manual I came up with the idea of creating a custom editor window to see which sorting layer the sprites on the scene are using.</summary></entry></feed>