<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://diegogiacomelli.com.br/feed.xml" rel="self" type="application/atom+xml" /><link href="http://diegogiacomelli.com.br/" rel="alternate" type="text/html" /><updated>2020-10-28T09:16:22-03:00</updated><id>http://diegogiacomelli.com.br/feed.xml</id><title type="html">Giacomelli</title><subtitle>C# programmer and Unity 3D gamedev</subtitle><entry><title type="html">ARC-8&amp;amp;colon; devlog &amp;amp;num;1</title><link href="http://diegogiacomelli.com.br/arc-8-devlog-1/" rel="alternate" type="text/html" title="ARC-8&amp;amp;colon; devlog &amp;amp;num;1" /><published>2020-10-28T00:00:00-03:00</published><updated>2020-10-28T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/arc-8-devlog-1</id><content type="html" xml:base="http://diegogiacomelli.com.br/arc-8-devlog-1/">&lt;p&gt;Some years ago I coded a CHIP-8 emulator in C# just for fun, that emulator was hibernating in a private repository that I never released. Some days ago I started to working on it again with the idea to release it running on Blazor and as a Unity asset where any game developer could drag its prefabs as easter eggs directly to their games.&lt;/p&gt;

&lt;p&gt;In this post, I will talk about my premises for the ARC-8’s code design that guided me during its development.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;The source code is not yet published on GitHub, I will notify in this series of posts about ARC-8 devlog and on my &lt;a href=&quot;https://twitter.com/ogiacomelli&quot;&gt;Twitter&lt;/a&gt; too when this happens.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I always wanted to develop a video game emulator. Anybody that tried or even google about it quickly realizes that it is not an easy or simple task.
If you search a little further you will see developers talking about CHIP-8 as the best thing to emulate as your first emulator project. Why? Well, the CHIP-8 is quite a simple virtual machine that has only 35 opcodes, simple graphic, sound, and input systems too.&lt;/p&gt;

&lt;h2 id=&quot;chip-8&quot;&gt;CHIP-8&lt;/h2&gt;
&lt;p&gt;According to Wikipedia:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;CHIP-8 is an interpreted programming language, developed by Joseph Weisbecker. It was initially used on the COSMAC VIP and Telmac 1800 8-bit microcomputers in the mid-1970s. CHIP-8 programs are run on a CHIP-8 virtual machine. It was made to allow video games to be more easily programmed for these computers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to &lt;a href=&quot;http://mattmik.com/files/chip8/mastering/chip8.html&quot;&gt;Mastering CHIP-8 by Matthew Mikolay&lt;/a&gt; (one of the best technical information source about CHIP-8):&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;CHIP-8 is an interpreted minimalist programming language that was designed by Joseph Weisbecker in the 1970s for use on the RCA COSMAC VIP computer. Due to its hexadecimal format, it was best suited to machines with a scarcity of memory, as minimal text processing had to be performed by the interpreter before a program could be executed. This property inevitably led to its implementation on a variety of hobbyist computers aside from the VIP, such as the COSMAC ELF, Telmac 1800, and ETI 660.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;arc-8&quot;&gt;ARC-8&lt;/h2&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-200-42589059c.webp 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-400-42589059c.webp 400w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-600-42589059c.webp 600w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-200-42589059c.png 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-400-42589059c.png 400w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-600-42589059c.png 600w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-600-42589059c.png&quot; alt=&quot;post image&quot; width=&quot;600&quot; height=&quot;200&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;I won’t get into details about how to implement each of CHIP-8’s 35 opcodes, because there are plenty of tutorials and resources talking about this on the internet (look in the section ‘Further reading’ in the of this post). My focus here is to explain my code design decisions to allow built a CHIP-8 emulator core in .NET Standard that will allow us to develop a graphic, sound, and input systems for Blazor and Unity3D (and any other platform where C# / .NET is supported).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why the name ARC-8? well, the choice of the name was quite chaotic as any of the name ideas brainstorm that I have had with my friend &lt;a href=&quot;http://twitter.com/giusepe&quot;&gt;Giusepe Casagrande&lt;/a&gt;. The name’s meaning and the way of speaking are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arcade&lt;/code&gt; because we want to remember that old day when we are kids playing some classic games in an arcade or fliperama as we call it in Brazil.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;premises&quot;&gt;Premises&lt;/h2&gt;
&lt;p&gt;First of all, before started do develop the code, I needed to sit down and defined some premises of the ARC-8’s code design, they are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Premise 1 - Cross-platform&lt;/strong&gt;: the ARC-8 core solution should be cross-platform.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Premise 2 - Testable&lt;/strong&gt;: code must be testable.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Premise 3 - 100% code coverage&lt;/strong&gt;: Unit test code coverage for the core should be 100%.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Premise 4 - Benchmark&lt;/strong&gt;: benchmark the code to verify and compare solutions performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;premise-1---cross-platform&quot;&gt;Premise 1 - Cross-platform&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/cross-platform-128-90fb5f56b.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/cross-platform-128-90fb5f56b.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/cross-platform-128-90fb5f56b.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;To make the ARC-8 core solution cross-platform, the first decision is to implement it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET Standard class library&lt;/code&gt;. The second one is to define the graphic, sound, input, and logging systems of the emulator as interfaces that will only be implemented on specific platforms, like Blazor and Unity3d.&lt;/p&gt;

&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-systems-interfaces-200-39c2d19ce.webp 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-systems-interfaces-280-39c2d19ce.webp 280w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-systems-interfaces-200-39c2d19ce.jpg 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-systems-interfaces-280-39c2d19ce.jpg 280w&quot; type=&quot;image/jpeg&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-systems-interfaces-280-39c2d19ce.jpg&quot; alt=&quot;post image&quot; width=&quot;280&quot; height=&quot;562&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h3 id=&quot;systems-interfaces&quot;&gt;Systems interfaces&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=system-interfaces.cs&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;premise-2---testable&quot;&gt;Premise 2 - Testable&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/test-128-7afecab50.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/test-128-7afecab50.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/test-128-7afecab50.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;The main part of a CHIP-8 emulation development is on the opcodes.&lt;/p&gt;

&lt;p&gt;The common solution for many emulators is to put all opcodes inside a giant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement (some use nested switch to group some opcodes).&lt;/p&gt;

&lt;p&gt;There is no problem in this kind of solution, but besides the code readability that can easily suffer from too many cases in the switch statement, there is a problem with the idea of unit testing, because we cannot test each opcode isolated.&lt;/p&gt;

&lt;p&gt;Sure, you can still unit testing an emulator with opcodes in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement, but I decided to define an interface that an opcode needs to implement to be used on the emulator.&lt;/p&gt;

&lt;h3 id=&quot;iopcode-interface&quot;&gt;IOpcode interface&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=IOpcode.cs&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;an-iopcodes-implementation&quot;&gt;An IOpcode’s implementation&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=AnnnOpcode.cs&quot;&gt; &lt;/script&gt;

&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-opcodes-200-17d4a8cba.webp 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-opcodes-296-17d4a8cba.webp 296w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-opcodes-200-17d4a8cba.jpg 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-opcodes-296-17d4a8cba.jpg 296w&quot; type=&quot;image/jpeg&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-opcodes-296-17d4a8cba.jpg&quot; alt=&quot;post image&quot; width=&quot;296&quot; height=&quot;552&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;premise-3---100-code-coverage&quot;&gt;Premise 3 - 100% code coverage&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/score-128-702a2b758.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/score-128-702a2b758.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/score-128-702a2b758.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;With the decision of implement each opcode in a separate classes and the decision of use interfaces for each system, we can easly unit test them and achieve the 100% code coverage:
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=AnnnOpcodeTest.cs&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;To validate the code coverage I used the &lt;a href=&quot;https://github.com/coverlet-coverage/coverlet&quot;&gt;coverlet.msbuild&lt;/a&gt; and &lt;a href=&quot;https://github.com/danielpalme/ReportGenerator&quot;&gt;ReportGenerator&lt;/a&gt; Nuget packages combined with Cake’s recipe to generate a code coverage report:
&lt;script src=&quot;https://gist.github.com/0edd94eed39b8f03c9b46f0562983d10.js?file=unit-test.cake&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-200-43462216e.webp 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-400-43462216e.webp 400w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-800-43462216e.webp 800w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-1600-43462216e.webp 1600w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-200-43462216e.jpg 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-400-43462216e.jpg 400w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-800-43462216e.jpg 800w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-1600-43462216e.jpg 1600w&quot; type=&quot;image/jpeg&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-code-coverage-800-43462216e.jpg&quot; alt=&quot;post image&quot; width=&quot;1600&quot; height=&quot;527&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;premise-4---benchmark&quot;&gt;Premise 4 - Benchmark&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/podium-128-f9f44969b.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/podium-128-f9f44969b.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/podium-128-f9f44969b.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;I like to benchmark the code to compare some solutions in a fast and precise way. To create a benchmark in the .NET system the &lt;a href=&quot;https://benchmarkdotnet.org/&quot;&gt;BenchmarkDotNet&lt;/a&gt; is the right choice. BenchmarkDotNet is quite easy to use and you can set up a project with it in less than 5 minutes.&lt;/p&gt;

&lt;p&gt;When I used it on ARC-8 implementation I discover that I could improve the performance in 18x just removing a Linq code and using a cached solution to locate the opcodes.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-200-c0dab76d0.webp 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-400-c0dab76d0.webp 400w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-800-c0dab76d0.webp 800w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-1331-c0dab76d0.webp 1331w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-200-c0dab76d0.jpg 200w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-400-c0dab76d0.jpg 400w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-800-c0dab76d0.jpg 800w, /assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-1331-c0dab76d0.jpg 1331w&quot; type=&quot;image/jpeg&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/28/arc-8-devlog-1/arc-8-core-benchmark-800-c0dab76d0.jpg&quot; alt=&quot;post image&quot; width=&quot;1331&quot; height=&quot;239&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;next-step&quot;&gt;Next step&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;In the next &lt;a href=&quot;/tags/arc8-devlog&quot;&gt;ARC-8 devlog&lt;/a&gt; I will talk about the ARC-8’s implementation on Blazor.&lt;/p&gt;

&lt;p&gt;If you have any doubts about what I talk about above or any tip about the CHIP-8 emulator and you like to share it, please let me know in the comments section below.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://mattmik.com/files/chip8/mastering/chip8.html&quot;&gt;Mastering CHIP-8 by Matthew Mikolay&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JohnEarnest/Octo&quot;&gt;Octo: a high-level assembler for the CHIP-8&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mwales/chip8&quot;&gt;CHIP-8 Emulation and Disassembler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/corax89/chip8-test-rom&quot;&gt;CHIP-8 test rom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://johnearnest.github.io/chip8Archive/&quot;&gt;CHIP-8 Archive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dmatlack/chip8/tree/master/roms/games&quot;&gt;CHIP-8 roms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/coverlet-coverage/coverlet#Quick-Start&quot;&gt;Coverlet quick-start&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://benchmarkdotnet.org/articles/guides/getting-started.html&quot;&gt;BenchmarkDotNet getting started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cakebuild.net/docs/getting-started&quot;&gt;Cake getting started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="Labs" /><category term="devlog" /><category term="dotnet" /><category term="blazor" /><category term="chip8" /><category term="emulator" /><category term="arc8" /><category term="arc8-devlog" /><summary type="html">Some years ago I coded a CHIP-8 emulator in C# just for fun, that emulator was hibernating in a private repository that I never released. Some days ago I started to working on it again with the idea to release it running on Blazor and as a Unity asset where any game developer could drag its prefabs as easter eggs directly to their games.</summary></entry><entry><title type="html">unitytips&amp;amp;colon; Overview of .NET in Unity</title><link href="http://diegogiacomelli.com.br/unitytips-overview-of-donet-in-unity/" rel="alternate" type="text/html" title="unitytips&amp;amp;colon; Overview of .NET in Unity" /><published>2020-10-27T00:00:00-03:00</published><updated>2020-10-27T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-overview-of-donet-in-unity</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-overview-of-donet-in-unity/">&lt;p&gt;Unity Official documentation has an amazing page called &lt;a href=&quot;https://docs.unity3d.com/Manual/overview-of-dot-net-in-unity.html&quot;&gt;Overview of .NET in Unity&lt;/a&gt; that highlight 8 points about the usage o .NET in Unity.&lt;/p&gt;

&lt;p&gt;I think it’s important to any pro programmer in Unity quite understand those points, because of this I list them below, in a brief way. &lt;strong&gt;You can (and should) read the full documentation to understand all the 8 points listed in more depth&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;overview-of-net-in-unity&quot;&gt;Overview of .NET in Unity&lt;/h2&gt;
&lt;p&gt;Read the full documentation: &lt;a href=&quot;https://docs.unity3d.com/Manual/overview-of-dot-net-in-unity.html&quot;&gt;https://docs.unity3d.com/Manual/overview-of-dot-net-in-unity.html&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;infographic&quot;&gt;Infographic&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Download &lt;a href=&quot;/assets/2020/10/27/unitytips-overview-of-donet-in-unity/overview-of-donet-in-unity-infographic.png&quot;&gt;overview-of-donet-in-unity-infographic.png&lt;a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Download &lt;a href=&quot;/assets/2020/10/27/unitytips-overview-of-donet-in-unity/overview-of-donet-in-unity-infographic.pdf&quot;&gt;overview-of-donet-in-unity-infographic.pdf&lt;a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/27/unitytips-overview-of-donet-in-unity/overview-of-donet-in-unity-infographic-200-76d1c217b.webp 200w, /assets/images/generated/assets/2020/10/27/unitytips-overview-of-donet-in-unity/overview-of-donet-in-unity-infographic-400-76d1c217b.webp 400w, /assets/images/generated/assets/2020/10/27/unitytips-overview-of-donet-in-unity/overview-of-donet-in-unity-infographic-800-76d1c217b.webp 800w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/27/unitytips-overview-of-donet-in-unity/overview-of-donet-in-unity-infographic-200-76d1c217b.png 200w, /assets/images/generated/assets/2020/10/27/unitytips-overview-of-donet-in-unity/overview-of-donet-in-unity-infographic-400-76d1c217b.png 400w, /assets/images/generated/assets/2020/10/27/unitytips-overview-of-donet-in-unity/overview-of-donet-in-unity-infographic-800-76d1c217b.png 800w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/27/unitytips-overview-of-donet-in-unity/overview-of-donet-in-unity-infographic-800-76d1c217b.png&quot; alt=&quot;post image&quot; width=&quot;800&quot; height=&quot;2000&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h3 id=&quot;scripting-backends&quot;&gt;Scripting backends&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Mono uses just-in-time (JIT) compilation and compiles code on demand at runtime.&lt;/li&gt;
  &lt;li&gt;IL2CPP uses ahead-of-time (AOT) compilation and compiles your entire application before it is run.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;managed-code-stripping&quot;&gt;Managed code stripping&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;When you build your application, Unity scans the compiled assemblies (.DLLs) to detect and remove unused code.&lt;/li&gt;
  &lt;li&gt;This process reduces the final binary size of your build, but increases build time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;garbage-collection-gc&quot;&gt;Garbage collection (GC)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Garbage collector only runs for a limited period of time and does not necessarily collect all objects in one pass. This spreads the time it takes to collect objects over a number of frames and reduces the amount of stuttering and CPU spikes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;net-system-libraries&quot;&gt;.NET system libraries&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Unity tries its best to support as much of the .NET ecosystem as possible, there are some exceptions to parts of the .NET system libraries that Unity explicitly does not support.&lt;/li&gt;
  &lt;li&gt;You should use the .NET Standard 2.0 API Compatibility Level for all new projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;third-party-net-libraries&quot;&gt;Third-party .NET libraries&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;You should only use third-party .NET libraries that have been extensively tested on a wide range of Unity configurations and platforms.&lt;/li&gt;
  &lt;li&gt;You should profile the usage of your .NET system libraries on all target platforms.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;c-reflection-overhead&quot;&gt;C# reflection overhead&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;GC continuously scans the cached C# reflection objects, which causes unnecessary overhead.&lt;/li&gt;
  &lt;li&gt;To minimize the overhead, avoid methods such as Assembly.GetTypes and Type.GetMethods().&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;unityengineobject-special-behavior&quot;&gt;UnityEngine.Object special behavior&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;UnityEngine.Object is a special type of C# object in Unity, because it is linked to a native C++ counterpart object.&lt;/li&gt;
  &lt;li&gt;MonoBehaviour/ScriptableObject override the equality (==) and inequality (!=) operators.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;avoid-using-async-and-await&quot;&gt;Avoid using async and await&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The Unity API is not thread safe and therefore, you should not use async and await tasks.&lt;/li&gt;
  &lt;li&gt;Async tasks often allocate objects when invoked, which might cause performance issues if you overuse them.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Lab" /><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><category term="dotnet" /><category term="infographic" /><summary type="html">Unity Official documentation has an amazing page called Overview of .NET in Unity that highlight 8 points about the usage o .NET in Unity.</summary></entry><entry><title type="html">Gamedev Utility Belt&amp;amp;colon; Unity Native Share Plugin</title><link href="http://diegogiacomelli.com.br/gamedev-utility-belt-unity-native-share-plugin/" rel="alternate" type="text/html" title="Gamedev Utility Belt&amp;amp;colon; Unity Native Share Plugin" /><published>2020-10-23T00:00:00-03:00</published><updated>2020-10-23T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/gamedev-utility-belt-unity-native-share-plugin</id><content type="html" xml:base="http://diegogiacomelli.com.br/gamedev-utility-belt-unity-native-share-plugin/">&lt;p&gt;I decided to start a &lt;a href=&quot;/tags/gamedev-utility-belt/&quot;&gt;series of posts&lt;/a&gt; about some game development resources that are part of my gamedev utility belt and that helps me on my game projects.&lt;/p&gt;

&lt;p&gt;For this first post the choose one is the &lt;strong&gt;&lt;a href=&quot;https://github.com/yasirkula/UnityNativeShare&quot;&gt;Unity Native Share Plugin&lt;/a&gt;&lt;/strong&gt; by &lt;a href=&quot;https://twitter.com/yasirkula&quot;&gt;Süleyman Yasir KULA&lt;/a&gt; that I used on my latest mobile game &lt;a href=&quot;http://diegogiacomelli.com.br/games/puzzimals&quot;&gt;Puzzimals&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Unity Native Share Plugin is:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A Unity plugin to natively share files (images, videos, documents, etc.) and/or plain text on Android &amp;amp; iOS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you use this plugin on the Android and iOS project you will be able to invoke the native share of the target operating system.
For example, here is the result when I used it on Android:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/23/gamedev-utility-belt-unity-native-share-plugin/unity-native-share-plugin-puzzimals-sample-200-f02b99f71.webp 200w, /assets/images/generated/assets/2020/10/23/gamedev-utility-belt-unity-native-share-plugin/unity-native-share-plugin-puzzimals-sample-360-f02b99f71.webp 360w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/23/gamedev-utility-belt-unity-native-share-plugin/unity-native-share-plugin-puzzimals-sample-200-f02b99f71.jpg 200w, /assets/images/generated/assets/2020/10/23/gamedev-utility-belt-unity-native-share-plugin/unity-native-share-plugin-puzzimals-sample-360-f02b99f71.jpg 360w&quot; type=&quot;image/jpeg&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/23/gamedev-utility-belt-unity-native-share-plugin/unity-native-share-plugin-puzzimals-sample-360-f02b99f71.jpg&quot; alt=&quot;post image&quot; width=&quot;360&quot; height=&quot;640&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;You can follow the instructions on the plugin GitHub repository: &lt;a href=&quot;https://github.com/yasirkula/UnityNativeShare#installation&quot;&gt;https://github.com/yasirkula/UnityNativeShare&lt;/a&gt; to install it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using .unitypackage&lt;/li&gt;
  &lt;li&gt;Cloning the repository&lt;/li&gt;
  &lt;li&gt;Via Asset Store&lt;/li&gt;
  &lt;li&gt;Via Package Manager&lt;/li&gt;
  &lt;li&gt;Using the OpenUPM&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;The plugin is quite simple to be used, there is an &lt;a href=&quot;https://github.com/yasirkula/UnityNativeShare#example-code&quot;&gt;example code on its repository&lt;/a&gt; that show how you can use it with few lines of code.&lt;/p&gt;

&lt;p&gt;Some time ago I made the gist below that uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unity Native Share Plugin&lt;/code&gt; to add a social share component to any game object:
&lt;script src=&quot;https://gist.github.com/c03ec79fa0f0def94726f4b6914b4769.js?file=SocialShare.cs&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; alt=&quot;Gist Importer&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;</content><author><name></name></author><category term="Article" /><category term="unity3d" /><category term="open-source" /><category term="gamedev" /><category term="mobile" /><category term="android" /><category term="gamedev-utility-belt" /><summary type="html">I decided to start a series of posts about some game development resources that are part of my gamedev utility belt and that helps me on my game projects.</summary></entry><entry><title type="html">Unity Game Growth Program&amp;amp;colon; Tips &amp;amp; Tricks</title><link href="http://diegogiacomelli.com.br/unity-game-growth-program-tips-and-tricks/" rel="alternate" type="text/html" title="Unity Game Growth Program&amp;amp;colon; Tips &amp;amp; Tricks" /><published>2020-10-20T00:00:00-03:00</published><updated>2020-10-20T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unity-game-growth-program-tips-and-tricks</id><content type="html" xml:base="http://diegogiacomelli.com.br/unity-game-growth-program-tips-and-tricks/">&lt;p&gt;In this post, I will list some tips and tricks that I learned while applying my game &lt;a href=&quot;https://play.google.com/store/apps/details?id=br.com.diegogiacomelli.puzzimals&quot;&gt;Puzzimals&lt;/a&gt; to the &lt;a href=&quot;https://unity.com/solutions/mobile/game-growth-program&quot;&gt;Unity Game Growth Program&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Unity has recently &lt;a href=&quot;https://blogs.unity3d.com/2020/10/13/introducing-the-game-growth-program/&quot;&gt;launch the Unity Game Growth Program&lt;/a&gt; an accelerator program for free-to-play indie iOS/Android games made with Unity.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Game Growth is a new game accelerator for mobile indie developers. We partner with indie game devs so they can quickly and effectively scale their games while remaining 100% independent. Becoming a partner gives you access to user acquisition funding alongside industry-leading tools and experts in game operations. The best part? You keep full ownership of your studio and intellectual property.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you meet the criteria and we accept you into the program, Unity will fund user acquisition for your game and provide the technology and Unity experts to help manage player engagement and monetization. We take care of the process that helps grow your game while you concentrate on development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Game Growth is a revenue-sharing program – Unity and the developer team split the revenue from advertising and in-app purchases 50/50 after the user acquisition spend has been recouped. Put simply, Unity covers the cost of bringing in new players while we both share in the reward.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can read more about the program here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.unity3d.com/2020/10/13/introducing-the-game-growth-program/&quot;&gt;Introducing the Game Growth program&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://unity.com/solutions/mobile/game-growth-program&quot;&gt;Game Growth Program&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/route-128-704e92446.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/route-128-704e92446.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/route-128-704e92446.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;According to documentation, the Unity Game Growth Program works through 4 steps:&lt;/p&gt;

&lt;h3 id=&quot;submit-game--integrate-package&quot;&gt;Submit Game &amp;amp; Integrate Package&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Getting started is easy. All you need is a published free-to-play mobile game made with Unity. Begin your application by submitting your project, advertising assets, and installing the Game Growth package.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;evaluation&quot;&gt;Evaluation&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;This stage determines if your game is a good candidate for the program. We take a look at your core game performance, project details and overall program fit. If everything looks good, Unity covers the cost of a full user acquisition test.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;optimize-game-operations&quot;&gt;Optimize Game Operations&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;If you become a partner, we work with you to design features, integrate business services, and optimize player engagement and monetization. You will also have access to a dedicated game ops team that works with you every step of the way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;accelerate-your-game&quot;&gt;Accelerate your Game&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Game Growth gives you access to the user acquisition funding and resources to take your game to the next level - with a 50/50 revenue sharing model. We acquire the right players then effectively manage those lifecycles and provide guidance for monetization.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/requirements-128-8b68e8c6b.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/requirements-128-8b68e8c6b.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/requirements-128-8b68e8c6b.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;There are 7 requirements that your game must meet to apply to the program:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Made with Unity&lt;/code&gt;: game must be made with Unity 2018.4 or later.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mobile Free-to Play&lt;/code&gt;: game must be free-to-play on iOS or Android.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Published Games&lt;/code&gt;: game must be currently live and published on the Google Play or Apple App Store.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connected to Unity Dashboard&lt;/code&gt;: game must be connected to the Unity Dashboard and have a valid project ID.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Age Restrictions&lt;/code&gt;: not accepting games aimed at audiences under 13 years of age.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Advertising Assets&lt;/code&gt;: submit images and videos for use in Unity ads.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Language&lt;/code&gt;: game must support English.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;More details at: &lt;a href=&quot;https://dashboard.unity3d.com/&quot;&gt;Unity Dashboard / Game Growth&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/start-128-ea031347f.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/start-128-ea031347f.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/start-128-ea031347f.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;Is not the intent of this post cover everything about how to get through the Unity Game Growth Program, I guess this quite well documented on &lt;a href=&quot;https://unity.com/solutions/mobile/game-growth-program&quot;&gt;Unity Game Growth Program page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea of this post is focused on the first of the four-step: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Submit Game &amp;amp; Integrate Package&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;read-the-docs&quot;&gt;Read the docs&lt;/h3&gt;
&lt;p&gt;Please, if you did not read the official documentation yet, go to &lt;a href=&quot;https://unity.com/solutions/mobile/game-growth-program&quot;&gt;Game Growth Program page&lt;/a&gt;, click in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt; button and follow the instructions&lt;/p&gt;

&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-game-growth-apply-200-ee7227d70.webp 200w, /assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-game-growth-apply-400-ee7227d70.webp 400w, /assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-game-growth-apply-800-ee7227d70.webp 800w, /assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-game-growth-apply-805-ee7227d70.webp 805w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-game-growth-apply-200-ee7227d70.png 200w, /assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-game-growth-apply-400-ee7227d70.png 400w, /assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-game-growth-apply-800-ee7227d70.png 800w, /assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-game-growth-apply-805-ee7227d70.png 805w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-game-growth-apply-800-ee7227d70.png&quot; alt=&quot;post image&quot; width=&quot;805&quot; height=&quot;170&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;p&gt;After you finish the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6 - Confirm&lt;/code&gt; come back here. You’ll better understand this post and tips &amp;amp; tricks after that.&lt;/p&gt;

&lt;h2 id=&quot;submit-game--integrate-package-1&quot;&gt;Submit Game &amp;amp; Integrate Package&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/package-128-f3193c47c.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/package-128-f3193c47c.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/package-128-f3193c47c.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Submit Game &amp;amp; Integrate Package&lt;/code&gt; step is divided into 3 sub-steps:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Download and Install Package&lt;/li&gt;
  &lt;li&gt;Run &amp;amp; Validate Integration&lt;/li&gt;
  &lt;li&gt;Publish &amp;amp; Validate Integration&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;download-and-install-package&quot;&gt;Download and Install Package&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Download the Game Growth package and integrate it into your project. Once installed, refer to the package documentation for next steps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You need to download the package through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Download Package&lt;/code&gt;, then in Unity, open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Package Manager&lt;/code&gt; window install it from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tarball&lt;/code&gt; option.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-package-manager-tarball-200-35c02476c.webp 200w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-package-manager-tarball-200-35c02476c.png 200w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-package-manager-tarball-200-35c02476c.png&quot; alt=&quot;post image&quot; width=&quot;200&quot; height=&quot;102&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;if you are using Unity version previous 2019.4, you need to use the option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add package from disk&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tip--trick&quot;&gt;Tip &amp;amp; Trick&lt;/h3&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/tip-128-d93c80d98.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/tip-128-d93c80d98.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/tip-128-d93c80d98.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;After installing the package, if your using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnityEngine.Purchasing&lt;/code&gt; in your project and you use &lt;a href=&quot;https://docs.unity3d.com/Manual/ScriptCompilationAssemblyDefinitionFiles.html&quot;&gt;Assembly Definitions&lt;/a&gt; too you can see a lot of errors in the console about it, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error CS0246: The type or namespace name 'IStoreController' could not be found (are you missing a using directive or an assembly reference?)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To fix it, just reference again the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnityEngine.Purchasing&lt;/code&gt; on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Assembly Definition references&lt;/code&gt;:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-assembly-definition-references-200-dcdbf7a02.webp 200w, /assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-assembly-definition-references-369-dcdbf7a02.webp 369w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-assembly-definition-references-200-dcdbf7a02.png 200w, /assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-assembly-definition-references-369-dcdbf7a02.png 369w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-assembly-definition-references-369-dcdbf7a02.png&quot; alt=&quot;post image&quot; width=&quot;369&quot; height=&quot;76&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h3 id=&quot;easy-on-boarding&quot;&gt;Easy On-Boarding&lt;/h3&gt;
&lt;p&gt;Now, open the menu &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Game Growth / Easy onboarding&lt;/code&gt; and follow the steps.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-game-growth-eash-on-boarding-200-57c9a0919.webp 200w, /assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-game-growth-eash-on-boarding-400-57c9a0919.webp 400w, /assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-game-growth-eash-on-boarding-770-57c9a0919.webp 770w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-game-growth-eash-on-boarding-200-57c9a0919.png 200w, /assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-game-growth-eash-on-boarding-400-57c9a0919.png 400w, /assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-game-growth-eash-on-boarding-770-57c9a0919.png 770w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/20/unity-game-growth-program-tips-and-tricks/unity-game-growth-eash-on-boarding-770-57c9a0919.png&quot; alt=&quot;post image&quot; width=&quot;770&quot; height=&quot;530&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;run--validate-integration&quot;&gt;Run &amp;amp; Validate Integration&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;After the package has been installed and configured for sandbox, run your game on the devices . To confirm integration, make sure you remove the game from your device, reinstall, and then launch the game.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Build, install, and run the game on your target device (iOS / Android).
Then go to Unity Dashboard and try to confirm the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run &amp;amp; Validate integration&lt;/code&gt;, this can take minutes or even hours to allow you to confirm successfully.&lt;/p&gt;

&lt;h3 id=&quot;tip--trick-1&quot;&gt;Tip &amp;amp; Trick&lt;/h3&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/tip-128-d93c80d98.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/tip-128-d93c80d98.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/tip-128-d93c80d98.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;Running the shell &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./adb logcat -s Unity PackageManager dalvikvm DEBUG&lt;/code&gt; while running the game on an Android device I saw errors like this on the game log:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UriFormatException: Invalid URI: The hostname could not be parsed
at DeltaDNA.Network+&amp;lt;SendRequest&amp;gt;
[DDSDK] [WARNING] Event upload failed - try again later&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I found out that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collect_url&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;engagement_url&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Assets/DeltaDNA/Resources/ddna_configuration.xml&lt;/code&gt; file were empty and this was an error cause.&lt;/p&gt;

&lt;p&gt;To fix it, I had to go to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Game Growth / Configuration&lt;/code&gt; menu, then click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Configure SDKs&lt;/code&gt; button, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collect_url&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;engagement_url&lt;/code&gt; were correctly configured in the file.&lt;/p&gt;

&lt;h2 id=&quot;publish--validate-integration&quot;&gt;Publish &amp;amp; Validate Integration&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;The final step is to publish your project on the Apple App Store and Google Play Store. Don’t forget to switch the package environment dropdown from Sandbox to Store in GGLauncher prefab. Run your game on the devices.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Build and publish the game to the store (App Store or Google Play), download/update the game and run it on your device.
Then go to Unity Dashboard again and try to confirm the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Publish &amp;amp; Validate integration&lt;/code&gt;, this can take minutes or even hours to allow you to confirm successfully.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;I hope that these tips and tricks that I learned while applying my game &lt;a href=&quot;https://play.google.com/store/apps/details?id=br.com.diegogiacomelli.puzzimals&quot;&gt;Puzzimals&lt;/a&gt; to the &lt;a href=&quot;https://unity.com/solutions/mobile/game-growth-program&quot;&gt;Unity Game Growth Program&lt;/a&gt; can be useful to you too.&lt;/p&gt;

&lt;p&gt;If you have any other tips &amp;amp; tricks you use on the Unity Game Growth Program process and you like to share it, please let me know in the comments section below.&lt;/p&gt;</content><author><name></name></author><category term="Tutorial" /><category term="unity3d" /><category term="gamedev" /><category term="android" /><category term="self-publishing" /><category term="unity-game-growth-program" /><summary type="html">In this post, I will list some tips and tricks that I learned while applying my game Puzzimals to the Unity Game Growth Program.</summary></entry><entry><title type="html">OWASP ZAP Path Traversal and ASP .NET&amp;amp;colon; Notes</title><link href="http://diegogiacomelli.com.br/owasp-zap-path-traversal-and-asp-dotnet-notes/" rel="alternate" type="text/html" title="OWASP ZAP Path Traversal and ASP .NET&amp;amp;colon; Notes" /><published>2020-10-15T00:00:00-03:00</published><updated>2020-10-15T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/owasp-zap-path-traversal-and-asp-dotnet-notes</id><content type="html" xml:base="http://diegogiacomelli.com.br/owasp-zap-path-traversal-and-asp-dotnet-notes/">&lt;p&gt;In this post, I wrote some notes of my experience trying to understand the alerts about the &lt;a href=&quot;https://owasp.org/www-community/attacks/Path_Traversal&quot;&gt;Path Traversal&lt;/a&gt; attack while running &lt;a href=&quot;https://www.zaproxy.org/&quot;&gt;OWASP ZAP&lt;/a&gt; against an ASP .NET project.&lt;/p&gt;

&lt;h2 id=&quot;owasp-zap&quot;&gt;OWASP ZAP&lt;/h2&gt;
&lt;p&gt;OWASP ZAP (short for Zed Attack Proxy) is an open-source web application security scanner. It is intended to be used by both those new to application security as well as professional penetration testers.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-200-bda195394.webp 200w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-400-bda195394.webp 400w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-800-bda195394.webp 800w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-1032-bda195394.webp 1032w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-200-bda195394.png 200w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-400-bda195394.png 400w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-800-bda195394.png 800w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-1032-bda195394.png 1032w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-main-screen-800-bda195394.png&quot; alt=&quot;post image&quot; width=&quot;1032&quot; height=&quot;641&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;More at &lt;a href=&quot;https://owasp.org/www-project-zap/&quot;&gt;https://owasp.org/www-project-zap/&lt;/a&gt;&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;path-traversal&quot;&gt;Path Traversal&lt;/h2&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-path-traversal-alert-200-f835e0ab6.webp 200w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-path-traversal-alert-400-f835e0ab6.webp 400w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-path-traversal-alert-495-f835e0ab6.webp 495w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-path-traversal-alert-200-f835e0ab6.png 200w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-path-traversal-alert-400-f835e0ab6.png 400w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-path-traversal-alert-495-f835e0ab6.png 495w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-path-traversal-alert-495-f835e0ab6.png&quot; alt=&quot;post image&quot; width=&quot;495&quot; height=&quot;167&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;p&gt;As the &lt;a href=&quot;https://owasp.org/www-community/attacks/Path_Traversal&quot;&gt;Path Traversal alert documentation&lt;/a&gt; explains:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with “dot-dot-slash (../)” sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The most common way to use this kind of attack in ASP .NET applications is trying to download some configuration files, like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web.config&lt;/code&gt; file, from the server file system. By default, the IIS handlers will not allow download this kind of file.&lt;/p&gt;

&lt;h2 id=&quot;validating-user-input&quot;&gt;Validating user input&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/programmer-128-6cef95d36.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;It is good practice (mandatory in fact) to validate user input, especially on routes/actions where there is some kind of access to the file system.&lt;/p&gt;

&lt;p&gt;OWASP ZAP docs say:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Validate the user’s input by only accepting known good – do not sanitize the data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;modelstateisvalid&quot;&gt;ModelState.IsValid&lt;/h3&gt;
&lt;p&gt;An easy way to perform a basic user input validation is to use the ModelState.IsValid, this property will always be false if any data sent by the client has an invalid or unexpected value. This is a good way to only accepted the expected type for model properties.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Model state represents errors that come from two subsystems: model binding and model validation. Errors that originate from model binding are generally data conversion errors. For example, an “x” is entered in an integer field. Model validation occurs after model binding and reports errors where data doesn’t conform to business rules. For example, a 0 is entered in a field that expects a rating between 1 and 5.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A way that you can extend and either improve the validation is using the &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation?view=aspnetcore-3.1#validation-attributes&quot;&gt;Validation attributes&lt;/a&gt;, like CreditCard, Compare, EmailAddress, Phone, Range, RegularExpression, Required, StringLength, Url, and Remote,&lt;/p&gt;

&lt;h3 id=&quot;validatemodelattribute&quot;&gt;ValidateModelAttribute&lt;/h3&gt;
&lt;p&gt;You can even use a custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActionFilterAttribute&lt;/code&gt; to validate all your action models like the MS official documentation suggest: &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/model-validation-in-aspnet-web-api#handling-validation-errors&quot;&gt;Model Validation in ASP.NET Web API&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/8ebd55525bc250095e95db2eb5712aca.js?file=ValidateModelAttribute.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;And use it on WebApiConfig:
&lt;script src=&quot;https://gist.github.com/8ebd55525bc250095e95db2eb5712aca.js?file=WebApiConfig.cs&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Does not matter if you will use Validation attributes or another validation way, the important thing here is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;you should always validate the user input before use it&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;check-all-file-system-handling-actions&quot;&gt;Check all file system handling actions&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/telescope-128-e0357d1e6.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/telescope-128-e0357d1e6.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/telescope-128-e0357d1e6.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;If you have any action on your API that lets the user define a file system path, be sure to validate if it not passing strings like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..\&lt;/code&gt;. If you not validate inputs like this, you can allow an attacker to navigate on your app file system, even the host machine file system.&lt;/p&gt;

&lt;p&gt;OWASP ZAP docs say:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Ensure the user cannot supply all parts of the path – surround it with your path code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;false-positives&quot;&gt;False Positives&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;OWASP ZAP can report some false positives, especially for routes that have an argument with the same name of the action: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://localhost:8080/api/tests/test1?kind=test1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This happens because OWASP ZAP tries to use action name in all arguments in an attempt to see if can access a different resource or file.&lt;/p&gt;

&lt;p&gt;In my case, all reports like this were false positives.&lt;/p&gt;

&lt;p&gt;You can change the risk alert to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False Positive&lt;/code&gt; for each URL in the context alert filters:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-200-d561dca0a.webp 200w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-400-d561dca0a.webp 400w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-800-d561dca0a.webp 800w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-1029-d561dca0a.webp 1029w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-200-d561dca0a.png 200w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-400-d561dca0a.png 400w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-800-d561dca0a.png 800w, /assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-1029-d561dca0a.png 1029w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/10/15/owasp-zap-path-traversal-and-asp-dotnet-notes/owasp-zap-alert-false-positive-800-d561dca0a.png&quot; alt=&quot;post image&quot; width=&quot;1029&quot; height=&quot;640&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Remember: only mark an alert as false positive after had to validate that URL action code and you are certain that is a false positive&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;In most cases ASP .NET Web APIs/Apps are not exposed to a Path Traversal attack, but a poor user input validation in file system handling action can easily expose the whole API/APP.&lt;/p&gt;

&lt;p&gt;These are the basic rules of OWASP ZAP documents:&lt;/p&gt;

&lt;h3 id=&quot;how-to-identify-if-you-are-vulnerable&quot;&gt;How to identify if you are vulnerable&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Be sure you understand how the underlying operating system will process filenames handed off to it.&lt;/li&gt;
  &lt;li&gt;Don’t store sensitive configuration files inside the web root&lt;/li&gt;
  &lt;li&gt;For Windows IIS servers, the web root should not be on the system disk, to prevent recursive traversal back to system directories.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-to-protect-yourself&quot;&gt;How to protect yourself&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Prefer working without user input when using file system calls&lt;/li&gt;
  &lt;li&gt;Use indexes rather than actual portions of file names when templating or using language files (ie value 5 from the user submission = Czechoslovakian, rather than expecting the user to return “Czechoslovakian”)&lt;/li&gt;
  &lt;li&gt;Ensure the user cannot supply all parts of the path – surround it with your path code&lt;/li&gt;
  &lt;li&gt;Validate the user’s input by only accepting known good – do not sanitize the data&lt;/li&gt;
  &lt;li&gt;Use chrooted jails and code access policies to restrict where the files can be obtained or saved to&lt;/li&gt;
  &lt;li&gt;If forced to use user input for file operations, normalize the input before using in file io API’s, such as normalize().&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="Tutorial" /><category term="aspdotnet" /><category term="dotnet" /><category term="security" /><category term="owasp" /><summary type="html">In this post, I wrote some notes of my experience trying to understand the alerts about the Path Traversal attack while running OWASP ZAP against an ASP .NET project.</summary></entry><entry><title type="html">unitytips&amp;amp;colon; Sprites Collection</title><link href="http://diegogiacomelli.com.br/unitytips-sprites-collection/" rel="alternate" type="text/html" title="unitytips&amp;amp;colon; Sprites Collection" /><published>2020-10-13T00:00:00-03:00</published><updated>2020-10-13T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-sprites-collection</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-sprites-collection/">&lt;p&gt;Sometimes we have related sprites that can be used in a prefab, like sprites for the environment, props, and scenario. Would be cool if we can easily swap them directly on the prefab without need to find and set the sprite directly in the SpriteRenderer component?&lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/TJ-Ou9YMFdA &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;spritescollection-component&quot;&gt;SpritesCollection component&lt;/h2&gt;
&lt;p&gt;I created this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpritesCollection&lt;/code&gt; component that allows us to define a collection of sprites to a prefab/GameObject and then easily swap between the sprites available.&lt;/p&gt;

&lt;h3 id=&quot;source-code&quot;&gt;Source code&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/d5d7c720eb910d00a5a3e217b5f95fff.js?file=SpritesCollection.cs&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; alt=&quot;Gist Importer&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;I strongly recommend that you use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gist Importer&lt;/code&gt; to import this gist to your project, but if want to import it manually, just access &lt;a href=&quot;https://gist.github.com/giacomelli/d5d7c720eb910d00a5a3e217b5f95fff&quot;&gt;the gist&lt;/a&gt; and add all .cs files to any folder on your Unity project, except the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpritesCollectionEditor.cs&lt;/code&gt;, this one should be added to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Editor&lt;/code&gt; folder.&lt;/p&gt;
&lt;/div&gt;</content><author><name></name></author><category term="Lab" /><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><summary type="html">Sometimes we have related sprites that can be used in a prefab, like sprites for the environment, props, and scenario. Would be cool if we can easily swap them directly on the prefab without need to find and set the sprite directly in the SpriteRenderer component?</summary></entry><entry><title type="html">Triangle Classifier Made With Unity</title><link href="http://diegogiacomelli.com.br/triangle-classifier-made-with-unity/" rel="alternate" type="text/html" title="Triangle Classifier Made With Unity" /><published>2020-09-24T00:00:00-03:00</published><updated>2020-09-24T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/triangle-classifier-made-with-unity</id><content type="html" xml:base="http://diegogiacomelli.com.br/triangle-classifier-made-with-unity/">&lt;p&gt;These days were studying polygons and thought that would be cool build a triangle classifier to help people learn and teach about types of triangle.&lt;/p&gt;

&lt;h2 id=&quot;types-of-triangle&quot;&gt;Types of triangle&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/project-128-4f597ed4f.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/project-128-4f597ed4f.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/project-128-4f597ed4f.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;Triangles can be classified &lt;a href=&quot;https://en.wikipedia.org/wiki/Triangle#Types_of_triangle&quot;&gt;by lengths of sides and by internal angles&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;by-lengths-of-sides&quot;&gt;By lengths of sides&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Equilateral_triangle&quot;&gt;Equilateral&lt;/a&gt;: all three sides have the same length.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Isosceles_triangle&quot;&gt;Isosceles&lt;/a&gt;: has two sides of equal length.&lt;/li&gt;
  &lt;li&gt;Scalene: has all its sides of different lengths.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;by-internal-angles&quot;&gt;By internal angles&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Right_triangle&quot;&gt;Right&lt;/a&gt;: has one of its interior angles measuring 90°.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Oblique_triangle&quot;&gt;Oblique&lt;/a&gt;: do not have an angle measuring 90°.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Acute_triangle&quot;&gt;Acute&lt;/a&gt;: with all interior angles measuring less than 90°.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Obtuse_triangle&quot;&gt;Obtuse&lt;/a&gt;: with one interior angle measuring more than 90°.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;triangle-classifier&quot;&gt;Triangle Classifier&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/podium-128-f9f44969b.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/podium-128-f9f44969b.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/podium-128-f9f44969b.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;Below you can use the Triangle Classifier that I made with Unity.&lt;/p&gt;

&lt;h3 id=&quot;instructions&quot;&gt;Instructions&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;You can move any of the 3 vertices (A, B, C)&lt;/li&gt;
  &lt;li&gt;The vertices positions can be changed too from the inputs on the top of the screen.&lt;/li&gt;
  &lt;li&gt;Each time that any vertices are updated you can see the types of the triangle be updated in the top message.&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&quot;/apps/triangle-classifier/index.html&quot; style=&quot;width: 100%;min-height: 700px;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The font and the vertice sprite used are from &lt;a href=&quot;http://kenney.nl&quot;&gt;Kenney&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="Lab" /><category term="unity3d" /><category term="gamedev" /><category term="math" /><category term="webgl" /><summary type="html">These days were studying polygons and thought that would be cool build a triangle classifier to help people learn and teach about types of triangle.</summary></entry><entry><title type="html">unitytips&amp;amp;colon; ShadowCaster2DFromCollider Component</title><link href="http://diegogiacomelli.com.br/unitytips-shadowcaster2-from-collider-component/" rel="alternate" type="text/html" title="unitytips&amp;amp;colon; ShadowCaster2DFromCollider Component" /><published>2020-09-21T00:00:00-03:00</published><updated>2020-09-21T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-shadowcaster2-from-collider-component</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-shadowcaster2-from-collider-component/">&lt;p&gt;If you try to use a &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@7.1/manual/2DShadows.html&quot;&gt;ShadowCaster2D&lt;/a&gt; in a &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.2d.spriteshape@3.0/manual/index.html&quot;&gt;SpriteShape&lt;/a&gt; the shadow produced will have a box form, no matter the form of your SpriteShape.&lt;/p&gt;

&lt;p&gt;This happens because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShadowCaster2D&lt;/code&gt; does not update its internal shape according to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpriteShape's&lt;/code&gt; form.&lt;/p&gt;

&lt;h2 id=&quot;shadowcaster2dfromcollider-component&quot;&gt;ShadowCaster2DFromCollider component&lt;/h2&gt;
&lt;p&gt;I created this script to help to have &lt;strong&gt;SpriteShape with ShadowCaster2D casting right shadows&lt;/strong&gt;.&lt;br /&gt;
To use it you need to add a &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/PolygonCollider2D.html&quot;&gt;PolygonCollider2D&lt;/a&gt; or an &lt;a href=&quot;https://docs.unity3d.com/Manual/class-EdgeCollider2D.html&quot;&gt;EdgeCollider2D&lt;/a&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpriteShape's&lt;/code&gt; gameobject and then add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShadowCaster2DFromCollider&lt;/code&gt; component to the same gameobject.&lt;/p&gt;

&lt;p&gt;Below you can see a video showing a scene with some SpriteShapes before and after applying the ShadowCaster2DFromCollider component.&lt;/p&gt;
&lt;center&gt;
        &lt;iframe src=&quot;https://www.youtube.com/embed/m8nnTek5U0Y &quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
      &lt;/center&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source code&lt;/h2&gt;
&lt;script src=&quot;https://gist.github.com/c208e20ecf75a77e0833f4c7671a0052.js&quot;&gt; &lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-a9a1cf2ca01efd362bfa52312712ae94.css&quot; /&gt;
&lt;div class=&quot;gist&quot; style=&quot;margin-top:-17px&quot;&gt;
        &lt;div class=&quot;gist-file&quot;&gt;
          &lt;div class=&quot;gist-meta&quot;&gt;
            &lt;a href=&quot;/unitytips-gist-importer/&quot;&gt;You can easily import this gist directly into your Unity 3D project using the &lt;b&gt;Gist Importer&lt;/b&gt;&lt;img style=&quot;float:right;width:48px;&quot; src=&quot;/assets/logos/Unity3d.png&quot; alt=&quot;Gist Importer&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;This solution was based on this Unity Forum post: https://forum.unity.com/threads/can-2d-shadow-caster-use-current-sprite-silhouette.861256&lt;/p&gt;
&lt;/div&gt;</content><author><name></name></author><category term="Lab" /><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><summary type="html">If you try to use a ShadowCaster2D in a SpriteShape the shadow produced will have a box form, no matter the form of your SpriteShape.</summary></entry><entry><title type="html">unitytips&amp;amp;colon; Editor Coroutines</title><link href="http://diegogiacomelli.com.br/unitytips-editor-coroutines/" rel="alternate" type="text/html" title="unitytips&amp;amp;colon; Editor Coroutines" /><published>2020-09-15T00:00:00-03:00</published><updated>2020-09-15T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/unitytips-editor-coroutines</id><content type="html" xml:base="http://diegogiacomelli.com.br/unitytips-editor-coroutines/">&lt;p&gt;Recently, I was doing a small experiment trying to run an &lt;a href=&quot;https://en.wikipedia.org/wiki/CHIP-8&quot;&gt;CHIP-8&lt;/a&gt; emulator inside the Unity Editor inspector window and for that I needed to update from times to time the inspector.&lt;/p&gt;

&lt;p&gt;Initially I tried to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EditorApplication.update&lt;/code&gt;, but as it is only called when something changes in the inspector, it ended up not serving this purpose.&lt;/p&gt;

&lt;p&gt;It was then that I discovered this official Unity package: &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.editorcoroutines@0.0/manual/index.html&quot;&gt;Editor Coroutines&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Editor Coroutines package allows the user to start the execution of iterator methods within the Editor similar to how we handle Coroutines inside MonoBehaviour scripts during runtime.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;At this time we cannot use any of the yield classes present inside the Unity Scripting API, like WaitForSeconds and WaitForEndOfFrame, except for the CustomYieldInstruction.&lt;/p&gt;

&lt;p&gt;However, there is a specific yielding class for wait seconds on Editor: &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.editorcoroutines@0.0/api/Unity.EditorCoroutines.Editor.EditorWaitForSeconds.html&quot;&gt;EditorWaitForSeconds&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case, I used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yield return null&lt;/code&gt; to skip a frame within the Editor and get the refresh rate that I would like.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/96086201cb5cc512ce7a15a02ebcf29a.js&quot;&gt; &lt;/script&gt;

&lt;center&gt;                
        &lt;img class=&quot;screenshot&quot; src=&quot;/assets/2020/09/15/unitytips-editor-coroutines/chip-8-inside-unity-editor.gif &quot; alt=&quot;post image&quot; /&gt;
      &lt;/center&gt;
&lt;center&gt;&lt;span style=&quot;font-style:italic; font-size:small&quot;&gt;&lt;p&gt;The result of using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EditorCoroutineUtility.StartCoroutine&lt;/code&gt;&lt;/p&gt;
&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;More details in the official documentation: &lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.editorcoroutines@0.0/api/Unity.EditorCoroutines.Editor.EditorCoroutineUtility.html&quot;&gt;Editor Coroutines&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content><author><name></name></author><category term="Lab" /><category term="unity3d" /><category term="unitytips" /><category term="gamedev" /><summary type="html">Recently, I was doing a small experiment trying to run an CHIP-8 emulator inside the Unity Editor inspector window and for that I needed to update from times to time the inspector.</summary></entry><entry><title type="html">Using Gulp for Chrome Extension development workflow</title><link href="http://diegogiacomelli.com.br/using-gulp-for-chrome-extension-dev-workflow/" rel="alternate" type="text/html" title="Using Gulp for Chrome Extension development workflow" /><published>2020-09-11T00:00:00-03:00</published><updated>2020-09-11T00:00:00-03:00</updated><id>http://diegogiacomelli.com.br/using-gulp-for-chrome-extension-dev-workflow</id><content type="html" xml:base="http://diegogiacomelli.com.br/using-gulp-for-chrome-extension-dev-workflow/">&lt;p&gt;In this tutorial, we will learn how to create a development workflow for a Chrome extension, with different configurations and manifest.json for each environment, like DEV, TEST, and PROD.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;A few months ago we built a Chrome Extension to a customer to allow users to capture Netflix captions and sent them to the customer web site to study them later.&lt;/p&gt;

&lt;p&gt;While we were developing it we needed to change some configurations on the extension to use different URLs of our API depending on what environment the Chrome Extension was using, like DEV (local), TEST, and Production.&lt;/p&gt;

&lt;h2 id=&quot;chrome-extension&quot;&gt;Chrome Extension&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/chrome-extension-200-209699985.webp 200w, /assets/images/generated/assets/logos/chrome-extension-400-209699985.webp 400w, /assets/images/generated/assets/logos/chrome-extension-496-209699985.webp 496w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/chrome-extension-200-209699985.png 200w, /assets/images/generated/assets/logos/chrome-extension-400-209699985.png 400w, /assets/images/generated/assets/logos/chrome-extension-496-209699985.png 496w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/chrome-extension-496-209699985.png&quot; alt=&quot;post image&quot; width=&quot;496&quot; height=&quot;150&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;For this tutorial, I’ll use a Chrome Extension basic sample called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello Extensions&lt;/code&gt;.&lt;br /&gt; 
You can download it from this page &lt;a href=&quot;https://developer.chrome.com/extensions/samples&quot;&gt;https://developer.chrome.com/extensions/samples&lt;/a&gt; or directly from &lt;a href=&quot;https://developer.chrome.com/extensions/examples/tutorials/hello_extensions.zip&quot;&gt;here&lt;/a&gt;.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Is not the intent of this tutorial explains how to create a Chrome Extension from scratch, for this you can use the official documentation: &lt;a href=&quot;https://developer.chrome.com/extensions/getstarted&quot;&gt;Getting Started Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;gulp&quot;&gt;Gulp&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;icon&quot; src=&quot;/assets/logos/gulp.svg &quot; alt=&quot;post image&quot; /&gt;
At that time we did not find any builtin or other solution to make this workflow easier and streamlined, so we decided to create our own solution using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gulp&lt;/code&gt;. This whole solution will be explaining below.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;gulp is an open-source JavaScript toolkit created by Eric Schoffstall used as a streaming build system in front-end web development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We decided to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp&lt;/code&gt;, because a Chrome Extensions is a bunch of .js, .html and .json files. Perfect to use gulp.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/problem-128-a3f91d933.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;If we just try to open our download &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello Extension&lt;/code&gt; .zip file or the opened folder directly on the Chrome extensions page, it will work and you see the extension’s icon in the toolbar.&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/basic-sample-chrome-extension-113-f70b16101.webp 113w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/basic-sample-chrome-extension-113-f70b16101.png 113w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/basic-sample-chrome-extension-113-f70b16101.png&quot; alt=&quot;post image&quot; width=&quot;113&quot; height=&quot;145&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;p&gt;This is not a problem if you have only one environment or if you don’t need different configurations for different environments, but as I’ve already explained, we needed different configs for different environments.&lt;/p&gt;

&lt;p&gt;To the purpose of this tutorial we will work with 3 environments: DEV, TEST, and PROD and will use our configuration file just to change our plugin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.html&lt;/code&gt; text:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DEV: Hello, World! (DEV)&lt;/li&gt;
  &lt;li&gt;TEST: Hello, World! (TEST)&lt;/li&gt;
  &lt;li&gt;PROD: Hello, World!&lt;/li&gt;
&lt;/ul&gt;

&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-200-3afbb65ab.webp 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-336-3afbb65ab.webp 336w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-200-3afbb65ab.png 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-336-3afbb65ab.png 336w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-336-3afbb65ab.png&quot; alt=&quot;post image&quot; width=&quot;336&quot; height=&quot;167&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;files-structure&quot;&gt;Files structure&lt;/h2&gt;
&lt;p&gt;Move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello Extensions&lt;/code&gt; files to a subfolder called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt;.
At the end of this tutorial, our files structure will look like this:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/files-structure-200-484bbc2a8.webp 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/files-structure-202-484bbc2a8.webp 202w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/files-structure-200-484bbc2a8.png 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/files-structure-202-484bbc2a8.png 202w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/files-structure-202-484bbc2a8.png&quot; alt=&quot;post image&quot; width=&quot;202&quot; height=&quot;142&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;If have any doubt about the files structure during this tutorial, you can download the full solution in section &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Download&lt;/code&gt; at the end of the tutorial&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;installing-gulp&quot;&gt;Installing gulp&lt;/h2&gt;
&lt;p&gt;To allow us to build our workflow, first, we need to install gulp.&lt;/p&gt;

&lt;p&gt;Follow the instructions described in &lt;a href=&quot;https://gulpjs.com/docs/en/getting-started/quick-start/&quot;&gt;Quick Start&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;In the section &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create a project directory and navigate into it&lt;/code&gt; you just need to open the root folder of our file structure described in the previous section&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;In the section &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create a package.json file in your project directory&lt;/code&gt; you can use the default values for all the questions of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm init&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;You don’t need to perform the section &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create a gulpfile&lt;/code&gt;, because we will perform it in the next section.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-gulpfilejs-file&quot;&gt;The gulpfile.js file&lt;/h2&gt;
&lt;p&gt;Create a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt; in the root folder.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=gulpfile.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This is the full &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt; file that will allow our development workflow for different environments.&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-gulpfilejs-sections&quot;&gt;The gulpfile.js sections&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/project-128-4f597ed4f.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/project-128-4f597ed4f.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/project-128-4f597ed4f.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;Now I will explain each section of it.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;requires-section&quot;&gt;Requires section&lt;/h3&gt;
&lt;p&gt;This section define the NPM packages need for our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;.
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=requires.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The first one is &lt;a href=&quot;https://www.npmjs.com/package/gulp&quot;&gt;gulp&lt;/a&gt;, then we need the package &lt;a href=&quot;&quot;&gt;del&lt;/a&gt; that will allow us to clean our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder, 
after &lt;a href=&quot;https://www.npmjs.com/package/gulp-merge-json&quot;&gt;gulp-merge-json&lt;/a&gt; to allow us to merge our environment config files. The last one is &lt;a href=&quot;https://www.npmjs.com/package/fs&quot;&gt;fs&lt;/a&gt; to allow read and write files.&lt;/p&gt;

&lt;h3 id=&quot;consts-section&quot;&gt;Consts section&lt;/h3&gt;
&lt;p&gt;This is quite simple, we are just reading the command-line argument called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;. If it is not present, the default value is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEV&lt;/code&gt;. 
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=consts.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;exports-section&quot;&gt;Exports section&lt;/h3&gt;
&lt;p&gt;Now we jump to the last line of the file to explain the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exports.default&lt;/code&gt;. 
Here we are basically defining the order of each function that will be called when we run our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt; file:
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=exports.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;clean-section&quot;&gt;Clean section&lt;/h3&gt;
&lt;p&gt;Cleans our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder.
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=clean.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;copyallfiles-section&quot;&gt;CopyAllFiles section&lt;/h3&gt;
&lt;p&gt;Copies all files from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; folder to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=copyAllFiles.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;transformconfig-section&quot;&gt;TransformConfig section&lt;/h3&gt;
&lt;p&gt;Transforms our config.json files, merging the source one with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;environment&lt;/code&gt; one.
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=transformConfig.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;writeconfigjsfile-section&quot;&gt;WriteConfigJsFile section&lt;/h3&gt;
&lt;p&gt;Writes our transformed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.json&lt;/code&gt; file to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scripts&lt;/code&gt; folder to allow our Chrome Extension’s .js files access the config values.
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=writeConfigJsFile.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;transformmanifest-section&quot;&gt;TransformManifest section&lt;/h3&gt;
&lt;p&gt;Transforms our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; file too.
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=transformManifest.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;watch-section&quot;&gt;Watch section&lt;/h3&gt;
&lt;p&gt;Watches for any change in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; folder and automatically repeat the previous steps.
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=watch.section.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;packagesjson-file&quot;&gt;packages.json file&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/package-128-f3193c47c.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/package-128-f3193c47c.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/package-128-f3193c47c.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;Change the content of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;packages.json&lt;/code&gt; file to the content below to update the dependencies.
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=packages.json&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Then run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt; in the root folder, after that run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install gulp&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;running-the-gulp-for-the-first-time&quot;&gt;Running the gulp for the first time&lt;/h2&gt;
&lt;p&gt;Now, if you just run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp&lt;/code&gt; in the root folder, you should see an output like this:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-failed-config-200-d0dfc6cee.webp 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-failed-config-369-d0dfc6cee.webp 369w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-failed-config-200-d0dfc6cee.png 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-failed-config-369-d0dfc6cee.png 369w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-failed-config-369-d0dfc6cee.png&quot; alt=&quot;post image&quot; width=&quot;369&quot; height=&quot;148&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;h2 id=&quot;creating-the-configjson-files&quot;&gt;Creating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.json&lt;/code&gt; files&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/config-128-c46695ddc.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/config-128-c46695ddc.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/config-128-c46695ddc.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;We need to create our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.json&lt;/code&gt; files.
They are 3 files:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.json&lt;/code&gt;: the baseline file, our common configuration should be defined here and will be used for the DEV environment.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.TEST.json&lt;/code&gt;: the file that the define specific configuration values for the TEST environment&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.PROD.json&lt;/code&gt;: the file that the define specific configuration values for the PROD environment
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;If you’re familiar with &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/web-forms/overview/deployment/visual-studio-web-deployment/web-config-transformations&quot;&gt;Web.config File Transformations&lt;/a&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appsettings.json&lt;/code&gt; files transformation, the philosophy used here is the same: the baseline file (config.json) contains all the common configuration values, and the specific environment files, like config.TEST.json and config.PROD.json, need to define only the values that are different for that environment&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Create the 3 files inside the subfolder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt;.
Here is the content of each one:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=config.json&quot;&gt; &lt;/script&gt;

&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=config.TEST.json&quot;&gt; &lt;/script&gt;

&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=config.PROD.json&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;running-the-gulp-for-the-second-time&quot;&gt;Running the gulp for the second time&lt;/h2&gt;
&lt;p&gt;Run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp&lt;/code&gt; in the root folder, you should see an output like this:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-ok-no-manifest-200-b124fa8a9.webp 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-ok-no-manifest-379-b124fa8a9.webp 379w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-ok-no-manifest-200-b124fa8a9.png 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-ok-no-manifest-379-b124fa8a9.png 379w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/gulp-ok-no-manifest-379-b124fa8a9.png&quot; alt=&quot;post image&quot; width=&quot;379&quot; height=&quot;255&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;p&gt;There is a new subfolder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt; created. Load it on Chrome Extensions page:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/chrome-extension-page-200-0991800ea.webp 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/chrome-extension-page-400-0991800ea.webp 400w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/chrome-extension-page-423-0991800ea.webp 423w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/chrome-extension-page-200-0991800ea.png 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/chrome-extension-page-400-0991800ea.png 400w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/chrome-extension-page-423-0991800ea.png 423w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/chrome-extension-page-423-0991800ea.png&quot; alt=&quot;post image&quot; width=&quot;423&quot; height=&quot;230&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;p&gt;The plugin should work ok.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Remember to remove the plugin previously loaded on Chrome and add it again from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;creating-the-hellojs&quot;&gt;Creating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Create a new file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.js&lt;/code&gt; inside the subfolder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scripts&lt;/code&gt;.
We will use this file to change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H1&lt;/code&gt; tag inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.html&lt;/code&gt;
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=hello.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;loading-scripts-on-hellohtml&quot;&gt;Loading scripts on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.html&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Change the content of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.html&lt;/code&gt; file to the content bellow:
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=hello.html&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This will load the .js and add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; attribute to our  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H1&lt;/code&gt; tag.&lt;/p&gt;

&lt;h2 id=&quot;reading-the-configuration-inside-the-scripts&quot;&gt;Reading the configuration inside the scripts&lt;/h2&gt;
&lt;p&gt;The first thing we need to do is change our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; file to allow the content of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scripts/config.js&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scripts/hello.js&lt;/code&gt; been read by the extension .js.
Open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; and change it to the content below:
&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=manifest.json&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;/scripts/config.js&quot;&lt;/code&gt; is what we need to access the configuration values.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-manifestjson-files&quot;&gt;Creating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; files&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/manifest-128-579a71043.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/manifest-128-579a71043.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/manifest-128-579a71043.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;We need to create our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; files, in the same way, we created our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.json&lt;/code&gt; files.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
They are 3 files:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt;: the baseline file, our common manifest definition, and used by DEV environment (already created).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.TEST.json&lt;/code&gt;: the file that the define specific manifest configuration values for the TEST environment&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.PROD.json&lt;/code&gt;: the file that the define specific manifest configuration values for the PROD environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create the 2 files inside the subfolder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt;.
Here is the content of each one:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=manifest.TEST.json&quot;&gt; &lt;/script&gt;

&lt;script src=&quot;https://gist.github.com/4f9d7289273222713933d8a95a077311.js?file=manifest.PROD.json&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;running-the-gulp-for-each-environment&quot;&gt;Running the gulp for each environment&lt;/h2&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-200-3afbb65ab.webp 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-336-3afbb65ab.webp 336w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-200-3afbb65ab.png 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-336-3afbb65ab.png 336w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/all-extension-environments-336-3afbb65ab.png&quot; alt=&quot;post image&quot; width=&quot;336&quot; height=&quot;167&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;
&lt;p&gt;Run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp&lt;/code&gt; in the root folder.
This will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEV&lt;/code&gt; configuration from config.js and manifest.json&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;Is the same if you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp --config DEV&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Now, try to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp --config TEST&lt;/code&gt;.
In the Chrome Extensions page you should see something like this:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-extension-test-chrome-200-439243e20.webp 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-extension-test-chrome-400-439243e20.webp 400w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-extension-test-chrome-468-439243e20.webp 468w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-extension-test-chrome-200-439243e20.png 200w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-extension-test-chrome-400-439243e20.png 400w, /assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-extension-test-chrome-468-439243e20.png 468w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-extension-test-chrome-468-439243e20.png&quot; alt=&quot;post image&quot; width=&quot;468&quot; height=&quot;358&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;p&gt;Your extension is using the TEST environment values.
When you click on the extension icon on the Chrome toolbar, you should see something like this:&lt;/p&gt;
&lt;center&gt;                
        &lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-world-test-129-24527d511.webp 129w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-world-test-129-24527d511.png 129w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;screenshot&quot; src=&quot;/assets/images/generated/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/hello-world-test-129-24527d511.png&quot; alt=&quot;post image&quot; width=&quot;129&quot; height=&quot;177&quot; /&gt;
&lt;/picture&gt;

      &lt;/center&gt;

&lt;div class=&quot;note&quot;&gt;&lt;p&gt;You can try to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp --config PROD&lt;/code&gt;. To see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROD&lt;/code&gt; environment values on the extension.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;running-gulp---watch&quot;&gt;Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp --watch&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To have a fast and streamline workflow, we need that every time we change something on our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; folder, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder automatically updates and we can see the changes right on Chrome.&lt;/p&gt;

&lt;p&gt;Run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp --watch&lt;/code&gt;. It’ll monitor your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; folder and update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt;.&lt;br /&gt;
You can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--config&lt;/code&gt; option combine, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp --watch --config TEST&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;
&lt;p&gt;You can download the full source code of the plugin of this tutorial: &lt;a href=&quot;/assets/2020/09/11/using-gulp-for-chrome-extension-dev-workflow/chrome-extension-sample.zip&quot;&gt;chrome-extension-sample.zip&lt;a&gt;.&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this .zip are all files mentioned in this tutorial, you just need to set up your gulp environment and call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install gulp&lt;/code&gt; before starting to use it.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;picture&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.webp 128w&quot; type=&quot;image/webp&quot; /&gt;
  &lt;source sizes=&quot;(max-width: 600px) 100vw, (max-width: 900px) 80vw, 800px&quot; srcset=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png 128w&quot; type=&quot;image/png&quot; /&gt;
  &lt;img class=&quot;icon&quot; src=&quot;/assets/images/generated/assets/logos/conclusion-128-875fc7bbb.png&quot; alt=&quot;post image&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;In this tutorial, we learned how to create a development workflow for a Chrome extension, with different configurations and manifest.json for each environment, like DEV, TEST, and PROD.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Icons made by &lt;a href=&quot;http://www.freepik.com&quot;&gt;Freepik&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/authors/vignesh-oviyan&quot;&gt;Vignesh Oviyan&lt;/a&gt; and &lt;a href=&quot;https://www.flaticon.com/authors/eucalyp&quot; title=&quot;Eucalyp&quot;&gt;Eucalyp&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons BY 3.0&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="Tutorial" /><category term="unity3d" /><category term="gamedev" /><category term="math" /><category term="curves" /><summary type="html">In this tutorial, we will learn how to create a development workflow for a Chrome extension, with different configurations and manifest.json for each environment, like DEV, TEST, and PROD.</summary></entry></feed>